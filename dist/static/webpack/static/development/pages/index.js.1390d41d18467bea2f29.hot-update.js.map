{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.1390d41d18467bea2f29.hot-update.js","sources":["webpack:///./components/Chat-Messages.jsx"],"sourcesContent":["import React from 'react';\r\nimport UI_ELEMENTS from 'components/shared/UI';\r\nimport Icon from 'components/Icons/icon';\r\nimport Messages from \"components/Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    __CHANGE_STATUS_MODAL,\r\n    __SET_ENCRYPT_DATA,\r\n    __CHANGE_MOBILE_LIST_OPEN,\r\n} from 'store/actions';\r\n\r\n\r\nclass ChatMessages extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n        this._encryptData = [\r\n            {value: 'substitution', name: 'Substitution'},\r\n            {value: 'vigenere', name: 'Vigenere'},\r\n            {value: 'caesar', name: 'Caesar'},\r\n            {value: 'playfair', name: 'Playfair'},\r\n            {value: 'vernam', name: 'Vernam'},\r\n        ];\r\n        this.__selectEncrypt    = this.__selectEncrypt.bind(this);\r\n        this.__generateValue    = this.__generateValue.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.encryptData.type !== this.props.encryptData.type) {\r\n            if (this.props.encryptData.type === 'substitution') {\r\n                this.props.__SET_ENCRYPT_DATA([{type: 'key', value: ''}, {\r\n                    type: 'warning',\r\n                    value: false\r\n                }, {type: 'disabled', value: true}]);\r\n            } else if (this.props.encryptData.type === 'vernam') {\r\n                this.props.__SET_ENCRYPT_DATA([{type: 'key', value: ''}, {type: 'warning', value: false}, {type: 'disabled', value: true}]);\r\n            } else {\r\n                let value = this.props.encryptData.type === 'caesar' ? 3 : '';\r\n                this.props.__SET_ENCRYPT_DATA([{type: 'key', value: value}, {type: 'warning', value: false}, {type: 'disabled', value: false}]);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.props.__SET_ENCRYPT_DATA({type: 'type', value: 'substitution'})\r\n    }\r\n\r\n    __generateValue (value) {\r\n        this.props.__SET_ENCRYPT_DATA({type: 'key', value: ''});\r\n        if (this.props.encryptData.type  === 'caesar' && value === '') {\r\n            value = 3;\r\n        }\r\n        return value\r\n    }\r\n\r\n    __selectEncrypt (data) {\r\n        this.props.__SET_ENCRYPT_DATA({type: 'type', value: data})\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"chat-messages\">\r\n                <div className=\"select-bar\">\r\n                    <span className={`lnr lnr-menu d-none_sm ${this.props.mobileNotifyNewMsg ? 'new-mobile-msg' : ''}`} onClick={() => this.props.__CHANGE_MOBILE_LIST_OPEN(true)}></span>\r\n                    <UI_ELEMENTS.Select\r\n                        selectEncrypt={this.__selectEncrypt}\r\n                        placeholder=\"Please choose encrypt type\"\r\n                        style={{\r\n                            display: 'block',\r\n                            width: '70%',\r\n                            padding: '12px',\r\n                            border: 'none',\r\n                            borderBottom: '1px solid #e3dede',\r\n                            marginLeft: '1px',\r\n                            backgroundColor: 'transparent'\r\n                        }}\r\n                        dataOptions={this._encryptData}\r\n                    />\r\n                    <div style={{height: '100%'}} className={this.props.encryptData.warning ? 'warning-wrap' : ''}>\r\n                        <UI_ELEMENTS.Input\r\n                            name=\"key\"\r\n                            attr={this.props.encryptData.type === 'caesar' ? [{name: 'min', value: 1}] : []}\r\n                            type={this.props.encryptData.type === 'caesar' ? 'number' : 'text'}\r\n                            id=\"key\"\r\n                            disabled={this.props.encryptData.disabled}\r\n                            value={this.props.encryptData.key}\r\n                            refBind={React.createRef()}\r\n                            placeholder={this.props.encryptData.type  === 'caesar' ? \"Press 1-25 digits only\" : \"Key\"}\r\n                            events={['change', 'input']}\r\n                            onChange={(e) => {this.props.__SET_ENCRYPT_DATA({type: 'key', value: this.__generateValue(e.target.value)})}}\r\n                            onInput={() => this.props.__SET_ENCRYPT_DATA({type: 'warning', value: false})}\r\n                            size=\"md\" />\r\n                    </div>\r\n                    <span className={`show-modal-icon ${!this.props.isShowModal ? 'disable-modal' : ''}`} onClick={() => this.props.__CHANGE_STATUS_MODAL()}>\r\n                        <Icon name=\"modal\" />\r\n                    </span>\r\n                </div>\r\n                <Messages />\r\n                <style jsx global>{`\r\n                    .chat-messages .select-bar .disable-modal svg {\r\n                        opacity: 0.3;\r\n                        filter: blur(1px);\r\n                    }\r\n                    .chat-messages .select-bar .show-modal-icon {\r\n                        height: 100%;\r\n                        width: 61px;\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        border-left: 1px solid rgb(227, 222, 222);\r\n                        cursor: pointer;\r\n                    }\r\n                    .chat-messages .select-bar .input-wrap{\r\n                        height: 100%;\r\n                    }\r\n                    .chat-messages .select-bar .input-wrap input{\r\n                        margin-bottom: 0;\r\n                        height: 100%;\r\n                        background-color: #fff;\r\n                        border-left: 1px solid rgb(227, 222, 222) !important;\r\n                        border-top: 0;\r\n                        border-right: 0;\r\n                    }\r\n                    .chat-messages .select-bar {\r\n                        display: flex;\r\n                        align-items: center;\r\n                        height: 41.8px;\r\n                        border-bottom: 1px solid rgb(227, 222, 222);\r\n                    }\r\n                    .chat-messages .select-bar .lnr-menu {\r\n                        font-size: 26px;\r\n                        padding-left: 10px;\r\n                        cursor: pointer;\r\n                    }\r\n                    .chat-messages .select-bar .warning-wrap {\r\n                        box-shadow: 0 0 0 0 rgba(0, 0, 0, 1);\r\n                        animation: pulse 1.5s infinite;\r\n                    }\r\n                    @keyframes pulse {\r\n                        0% {\r\n                           box-shadow: 0 0 0 0 rgba(214, 20, 20, 0.7);\r\n                        }\r\n                        70% {\r\n                            box-shadow: 0 0 0 4px rgba(182, 13, 13, 0);\r\n                        }\r\n                        100% {\r\n                            box-shadow: 0 0 0 0 rgba(0,0,0,0);\r\n                        }\r\n                    }\r\n                    .chat-messages {\r\n                        width: 70%;\r\n                        box-shadow: 0 3px 1px -2px rgba(0,0,0,0.2), 0 2px 2px 0 rgba(0,0,0,0.14), 0 1px 5px 0 rgba(0,0,0,0.12);\r\n                    }\r\n                    .d-none_sm {\r\n                        display: none;\r\n                    }\r\n                    .new-mobile-msg {\r\n                        position: relative;\r\n                    }\r\n                    .new-mobile-msg:after {\r\n                        content: \"\";\r\n                        position: absolute;\r\n                        top: 0px;\r\n                        right: -3px;\r\n                        width: 10px;\r\n                        height: 10px;\r\n                        background: red;\r\n                        border-radius: 50%;\r\n                    }\r\n                    @media screen and (max-width: 767px) {\r\n                        .d-none_sm {\r\n                            display: block;\r\n                        }\r\n                        .chat-messages {\r\n                            opacity: ${!this.props.mobileUsersListOpen ? 1 : 0};\r\n                            transition: width .2s;\r\n                            overflow: hidden;\r\n                            width: ${!this.props.mobileUsersListOpen ? 100 : 0}%;\r\n                        }\r\n                    }\r\n                `}</style>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isShowModal: state.chat.isShowModal,\r\n    encryptData: state.chat.encryptData,\r\n    mobileUsersListOpen: state.chat.mobileUsersListOpen,\r\n    mobileNotifyNewMsg: state.chat.mobileNotifyNewMsg,\r\n});\r\nconst mapDispatchToProps = {\r\n    __CHANGE_STATUS_MODAL,\r\n    __SET_ENCRYPT_DATA,\r\n    __CHANGE_MOBILE_LIST_OPEN,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ChatMessages);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAZA;AAaA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApCA;AAAA;AAAA;AAAA;AA0HA;;;;AA3KA;AACA;AA6KA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAMA;;;;A","sourceRoot":""}