{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MY_USERS, ALL_USERS, ACTIVE_USER, MY_DATA, SET_USER_MESSAGES, LOAD_MORE_MESSAGES, STATUS_MODAL, SET_ENCRYPT_DATA, CHANGE_MOBILE_LIST_OPEN, SEND_MOBILE_MESSAGE_NOTIFY } from '../types';\n\nconst chat = (state = {}, action) => {\n  switch (action.type) {\n    case SET_ENCRYPT_DATA:\n      return _objectSpread({}, state, {\n        encryptData: _objectSpread({}, state.encryptData, {}, (() => {\n          let makeObj = {};\n\n          if (action.payload instanceof Array) {\n            action.payload.map(obj => makeObj[obj.type] = obj.value);\n          } else makeObj[action.payload.type] = action.payload.value;\n\n          return makeObj;\n        })())\n      });\n\n    case STATUS_MODAL:\n      return _objectSpread({}, state, {\n        isShowModal: !state.isShowModal\n      });\n\n    case LOAD_MORE_MESSAGES:\n      return _objectSpread({}, state, {\n        messagesPage: state.messagesPage += action.payload\n      });\n\n    case SET_USER_MESSAGES:\n      return _objectSpread({}, state, {\n        activeUserMessages: action.payload\n      });\n\n    case CHANGE_MOBILE_LIST_OPEN:\n      return _objectSpread({}, state, {\n        mobileUsersListOpen: action.payload\n      });\n\n    case MY_DATA:\n      return _objectSpread({}, state, {\n        loggedUser: action.payload\n      });\n\n    case MY_USERS:\n      return _objectSpread({}, state, {\n        myChatUsers: action.payload\n      });\n\n    case SEND_MOBILE_MESSAGE_NOTIFY:\n      return _objectSpread({}, state, {\n        mobileNotifyNewMsg: action.payload\n      });\n\n    case ALL_USERS:\n      action.payload && state.myChatUsers.map(item => {\n        action.payload.splice(action.payload.findIndex(el => el.id === item.id), 1);\n      });\n      return _objectSpread({}, state, {\n        allChatUsers: action.payload\n      });\n\n    case ACTIVE_USER:\n      return _objectSpread({}, state, {\n        activeUser: action.payload || {}\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default chat;","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/store/reducers/chat.js"],"names":["MY_USERS","ALL_USERS","ACTIVE_USER","MY_DATA","SET_USER_MESSAGES","LOAD_MORE_MESSAGES","STATUS_MODAL","SET_ENCRYPT_DATA","CHANGE_MOBILE_LIST_OPEN","SEND_MOBILE_MESSAGE_NOTIFY","chat","state","action","type","encryptData","makeObj","payload","Array","map","obj","value","isShowModal","messagesPage","activeUserMessages","mobileUsersListOpen","loggedUser","myChatUsers","mobileNotifyNewMsg","item","splice","findIndex","el","id","allChatUsers","activeUser"],"mappings":";;;;;;AAAA,SACIA,QADJ,EAEIC,SAFJ,EAGIC,WAHJ,EAIIC,OAJJ,EAKIC,iBALJ,EAMIC,kBANJ,EAOIC,YAPJ,EAQIC,gBARJ,EASIC,uBATJ,EAUIC,0BAVJ,QAWO,UAXP;;AAaA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,gBAAL;AACI,+BAAWI,KAAX;AAAkBG,QAAAA,WAAW,oBAAMH,KAAK,CAACG,WAAZ,MAClB,CAAC,MAAM;AACN,cAAIC,OAAO,GAAE,EAAb;;AACA,cAAIH,MAAM,CAACI,OAAP,YAA0BC,KAA9B,EAAqC;AACjCL,YAAAA,MAAM,CAACI,OAAP,CAAeE,GAAf,CAAmBC,GAAG,IAAIJ,OAAO,CAACI,GAAG,CAACN,IAAL,CAAP,GAAoBM,GAAG,CAACC,KAAlD;AACH,WAFD,MAEOL,OAAO,CAACH,MAAM,CAACI,OAAP,CAAeH,IAAhB,CAAP,GAA+BD,MAAM,CAACI,OAAP,CAAeI,KAA9C;;AACP,iBAAOL,OAAP;AACH,SANE,GADkB;AAA7B;;AASJ,SAAKT,YAAL;AACI,+BAAWK,KAAX;AAAkBU,QAAAA,WAAW,EAAE,CAACV,KAAK,CAACU;AAAtC;;AACJ,SAAKhB,kBAAL;AACI,+BAAWM,KAAX;AAAkBW,QAAAA,YAAY,EAAEX,KAAK,CAACW,YAAN,IAAsBV,MAAM,CAACI;AAA7D;;AACJ,SAAKZ,iBAAL;AACI,+BAAWO,KAAX;AAAkBY,QAAAA,kBAAkB,EAAEX,MAAM,CAACI;AAA7C;;AACJ,SAAKR,uBAAL;AACI,+BAAWG,KAAX;AAAkBa,QAAAA,mBAAmB,EAAEZ,MAAM,CAACI;AAA9C;;AACJ,SAAKb,OAAL;AACI,+BAAWQ,KAAX;AAAkBc,QAAAA,UAAU,EAAEb,MAAM,CAACI;AAArC;;AACJ,SAAKhB,QAAL;AACI,+BAAWW,KAAX;AAAkBe,QAAAA,WAAW,EAAEd,MAAM,CAACI;AAAtC;;AACJ,SAAKP,0BAAL;AACI,+BAAWE,KAAX;AAAkBgB,QAAAA,kBAAkB,EAAEf,MAAM,CAACI;AAA7C;;AACJ,SAAKf,SAAL;AACIW,MAAAA,MAAM,CAACI,OAAP,IAAkBL,KAAK,CAACe,WAAN,CAAkBR,GAAlB,CAAsBU,IAAI,IAAI;AAC5ChB,QAAAA,MAAM,CAACI,OAAP,CAAea,MAAf,CAAsBjB,MAAM,CAACI,OAAP,CAAec,SAAf,CAAyBC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUJ,IAAI,CAACI,EAA9C,CAAtB,EAAyE,CAAzE;AACH,OAFiB,CAAlB;AAGA,+BAAWrB,KAAX;AAAkBsB,QAAAA,YAAY,EAAErB,MAAM,CAACI;AAAvC;;AACJ,SAAKd,WAAL;AACI,+BAAWS,KAAX;AAAkBuB,QAAAA,UAAU,EAAEtB,MAAM,CAACI,OAAP,IAAkB;AAAhD;;AACJ;AACI,aAAOL,KAAP;AAjCR;AAmCH,CApCD;;AAqCA,eAAeD,IAAf","sourcesContent":["import {\r\n    MY_USERS,\r\n    ALL_USERS,\r\n    ACTIVE_USER,\r\n    MY_DATA,\r\n    SET_USER_MESSAGES,\r\n    LOAD_MORE_MESSAGES,\r\n    STATUS_MODAL,\r\n    SET_ENCRYPT_DATA,\r\n    CHANGE_MOBILE_LIST_OPEN,\r\n    SEND_MOBILE_MESSAGE_NOTIFY,\r\n} from '../types';\r\n\r\nconst chat = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SET_ENCRYPT_DATA:\r\n            return {...state, encryptData: {...state.encryptData,\r\n                    ...(() => {\r\n                        let makeObj ={};\r\n                        if (action.payload instanceof Array) {\r\n                            action.payload.map(obj => makeObj[obj.type] = obj.value)\r\n                        } else makeObj[action.payload.type] = action.payload.value;\r\n                        return makeObj;\r\n                    })(),\r\n            }};\r\n        case STATUS_MODAL:\r\n            return {...state, isShowModal: !state.isShowModal};\r\n        case LOAD_MORE_MESSAGES:\r\n            return {...state, messagesPage: state.messagesPage += action.payload};\r\n        case SET_USER_MESSAGES:\r\n            return {...state, activeUserMessages: action.payload};\r\n        case CHANGE_MOBILE_LIST_OPEN:\r\n            return {...state, mobileUsersListOpen: action.payload};\r\n        case MY_DATA:\r\n            return {...state, loggedUser: action.payload};\r\n        case MY_USERS:\r\n            return {...state, myChatUsers: action.payload};\r\n        case SEND_MOBILE_MESSAGE_NOTIFY:\r\n            return {...state, mobileNotifyNewMsg: action.payload};\r\n        case ALL_USERS:\r\n            action.payload && state.myChatUsers.map(item => {\r\n                action.payload.splice(action.payload.findIndex(el => el.id === item.id), 1);\r\n            });\r\n            return {...state, allChatUsers: action.payload};\r\n        case ACTIVE_USER:\r\n            return {...state, activeUser: action.payload || {}};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default chat;"]},"metadata":{},"sourceType":"module"}