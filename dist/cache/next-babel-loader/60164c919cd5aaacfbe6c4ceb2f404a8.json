{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar bigInt = require('big-integer');\n\nvar RSA = /*#__PURE__*/function () {\n  function RSA() {\n    _classCallCheck(this, RSA);\n  }\n\n  _createClass(RSA, null, [{\n    key: \"randomPrime\",\n    value: function randomPrime(bits) {\n      var min = bigInt.one.shiftLeft(bits - 1);\n      var max = bigInt.one.shiftLeft(bits).prev();\n\n      while (true) {\n        var p = bigInt.randBetween(min, max);\n\n        if (p.isProbablePrime(256)) {\n          return p;\n        }\n      }\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(keysize) {\n      var e = bigInt(65537);\n      var p;\n      var q;\n      var totient;\n\n      do {\n        p = this.randomPrime(keysize / 2);\n        q = this.randomPrime(keysize / 2);\n        totient = bigInt.lcm(p.prev(), q.prev());\n      } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\n\n      return {\n        e: e,\n        n: p.multiply(q),\n        d: e.modInv(totient)\n      };\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(encodedMsg, n, e) {\n      return bigInt(encodedMsg).modPow(e, n);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(encryptedMsg, d, n) {\n      return bigInt(encryptedMsg).modPow(d, n);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(str) {\n      var codes = str.split('').map(function (i) {\n        return i.charCodeAt();\n      }).join('');\n      return bigInt(codes);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(code) {\n      var stringified = code.toString();\n      var string = '';\n\n      for (var i = 0; i < stringified.length; i += 2) {\n        var num = Number(stringified.substr(i, 2));\n\n        if (num <= 30) {\n          string += String.fromCharCode(Number(stringified.substr(i, 3)));\n          i++;\n        } else {\n          string += String.fromCharCode(num);\n        }\n      }\n\n      return string;\n    }\n  }]);\n\n  return RSA;\n}();\n\nexport { RSA as default };","map":null,"metadata":{},"sourceType":"module"}