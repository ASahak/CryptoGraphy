{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_IS_LOGGED, SET_IS_LOADING } from '../types';\n\nconst auth = (state = {}, action) => {\n  switch (action.type) {\n    case SET_IS_LOGGED:\n      return _objectSpread({}, state, {\n        isLogged: action.payload\n      });\n\n    case SET_IS_LOADING:\n      return _objectSpread({}, state, {\n        isLoading: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/store/reducers/auth.js"],"names":["SET_IS_LOGGED","SET_IS_LOADING","auth","state","action","type","isLogged","payload","isLoading"],"mappings":";;;;;;AAAA,SACIA,aADJ,EAEIC,cAFJ,QAGO,UAHP;;AAKA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,aAAL;AACI,+BAAWG,KAAX;AAAkBG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAAnC;;AACJ,SAAKN,cAAL;AACI,+BAAWE,KAAX;AAAkBK,QAAAA,SAAS,EAAEJ,MAAM,CAACG;AAApC;;AACJ;AACI,aAAOJ,KAAP;AANR;AAQH,CATD;;AAUA,eAAeD,IAAf","sourcesContent":["import {\r\n    SET_IS_LOGGED,\r\n    SET_IS_LOADING\r\n} from '../types';\r\n\r\nconst auth = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SET_IS_LOGGED:\r\n            return {...state, isLogged: action.payload};\r\n        case SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default auth;"]},"metadata":{},"sourceType":"module"}