{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, put } from 'redux-saga/effects';\nimport { __CHANGE_IS_LOGGED, __SET_MY_USERS_CHAT, __SET_ALL_CHAT_USERS, __SET_ACTIVE_USER, __SET_ACTIVE_USER_MESSAGES } from '../actions';\nimport store from 'store';\nimport fire from \"config/fire\";\nexport function* __SET_LOGGED(action) {\n  yield put(store.dispatch(__CHANGE_IS_LOGGED(action)));\n}\nexport async function* __GET_ALL_USERS(data) {\n  if (data) {\n    yield put(store.dispatch(__SET_ALL_CHAT_USERS(null)));\n    return;\n  }\n\n  const db = fire.firestore();\n  const fakeObj = [];\n  await db.collection('users').get().then(querySnapshot => {\n    querySnapshot.forEach(doc => {\n      const _data = doc.data();\n\n      delete _data.messages;\n      fakeObj.push(_objectSpread({}, _data));\n    });\n  });\n  yield put(store.dispatch(__SET_ALL_CHAT_USERS(fakeObj)));\n}\nlet unsubscribeUsers;\nexport async function* __GET_CHAT_USERS(data) {\n  if (unsubscribeUsers) unsubscribeUsers();\n  const db = fire.firestore();\n  let usersData = [];\n\n  if (data) {\n    yield put(store.dispatch(__SET_MY_USERS_CHAT(data)));\n  } else {\n    unsubscribeUsers = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        var _store$getState$chat$, _usersData$;\n\n        usersData = doc.data().messages;\n        const userId = ((_store$getState$chat$ = store.getState().chat.activeUser) === null || _store$getState$chat$ === void 0 ? void 0 : _store$getState$chat$.id) || ((_usersData$ = usersData[0]) === null || _usersData$ === void 0 ? void 0 : _usersData$.id);\n        doc.data().messages.forEach((user, index) => {\n          if (user.id === userId) {\n            const _cloneActiveUser = JSON.parse(JSON.stringify(usersData[index]));\n\n            _cloneActiveUser.letters = _cloneActiveUser.letters.slice(-1).pop();\n            store.dispatch(__SET_ACTIVE_USER(_cloneActiveUser));\n          }\n\n          usersData[index].letters = user.letters.slice(-1).pop();\n        });\n        store.dispatch(__SET_MY_USERS_CHAT(usersData));\n      });\n    });\n    yield usersData;\n  }\n}\nexport async function* __CHANGE_IS_SEEN({\n  senderID,\n  myID\n}) {\n  // Change my seen\n  const db = fire.firestore();\n  await db.collection('users').doc(myID).get().then(res => {\n    var _res$data;\n\n    const myObj = db.doc(`users/${myID}`);\n\n    let _messagesMy = (_res$data = res.data()) === null || _res$data === void 0 ? void 0 : _res$data.messages;\n\n    if (!_messagesMy) return;\n\n    const _findIndex = res.data().messages.findIndex(item => item.id === senderID);\n\n    if (_findIndex !== -1) {\n      _messagesMy[_findIndex].isSeen = true;\n      _messagesMy[_findIndex].countMessagesDelivered = 0;\n    }\n\n    myObj.update('messages', _messagesMy);\n  });\n  await db.collection('users').doc(senderID).get().then(res => {\n    var _res$data2;\n\n    const senderObj = db.doc(`users/${senderID}`);\n\n    let _messagesMy = (_res$data2 = res.data()) === null || _res$data2 === void 0 ? void 0 : _res$data2.messages;\n\n    if (!_messagesMy) return;\n\n    const _findIndex = res.data().messages.findIndex(item => item.id === myID);\n\n    if (_findIndex !== -1) {\n      _messagesMy[_findIndex].isSeen = true;\n      _messagesMy[_findIndex].countMessagesDelivered = 0;\n    }\n\n    senderObj.update('messages', _messagesMy);\n  });\n  yield;\n}\nlet unsubscribe;\nexport async function* __GET_ACTIVE_USERS_MESSAGES(data) {\n  if (unsubscribe) {\n    unsubscribe();\n  }\n\n  let _messages = [];\n  const db = fire.firestore();\n  await new Promise(resolve => {\n    unsubscribe = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(res => {\n      res.forEach(doc => {\n        var _doc$data;\n\n        const _findIndex = (_doc$data = doc.data()) === null || _doc$data === void 0 ? void 0 : _doc$data.messages.findIndex(item => item.id === data);\n\n        if (_findIndex !== -1) {\n          _messages = doc.data().messages[_findIndex];\n          store.dispatch(__SET_ACTIVE_USER_MESSAGES([..._messages.letters]));\n          resolve();\n        }\n      });\n    });\n  });\n  yield _messages;\n}\nexport async function* __IS_TYPING_TO_ACTIVE_USER(hint, toUserId, myId) {\n  let friendUsers = null;\n  const db = fire.firestore();\n  await db.collection('users').doc(toUserId).get().then(res => {\n    const myObj = db.doc(`users/${toUserId}`);\n    friendUsers = res.data();\n    let _messagesMy = res.data().messages;\n\n    const _findIndex = res.data().messages.findIndex(item => item.id === myId);\n\n    if (_findIndex !== -1) {\n      _messagesMy[_findIndex].isTyping = hint;\n      myObj.update('messages', _messagesMy);\n    }\n  });\n}\nexport async function* __GO_PRIVATE_CHAT(idUser, loggedId) {\n  const usersData = store.getState().chat.myChatUsers;\n  const findActiveUser = usersData.find(user => user.id === idUser);\n\n  if (findActiveUser) {\n    store.dispatch(__SET_ACTIVE_USER(findActiveUser));\n  }\n\n  let friendChatMyObj = {};\n  await __CHANGE_IS_SEEN({\n    senderID: idUser,\n    myID: loggedId\n  }).next();\n  yield friendChatMyObj;\n}\nlet unsubscribeAddMessageMy;\nlet unsubscribeAddMessageFriend;\nexport async function* __ADD_MESSAGE({\n  friend,\n  my\n}) {\n  if (unsubscribeAddMessageMy) unsubscribeAddMessageMy();\n  if (unsubscribeAddMessageFriend) unsubscribeAddMessageFriend();\n  const db = fire.firestore();\n  const updateMyUsers = db.collection('users').doc(my.loggedUser.id);\n  let friendUsers = {};\n  await db.collection('users').doc(my.friendId).get().then(res => {\n    friendUsers = res.data();\n  });\n  unsubscribeAddMessageMy = updateMyUsers.onSnapshot(querySnapshot => {\n    const myUsers = querySnapshot.data();\n    if (!myUsers) return;\n\n    const _findIndex = myUsers.messages.findIndex(item => item.id === my.friendId);\n\n    if (_findIndex === -1) {\n      myUsers.messages.unshift({\n        id: my.friendId,\n        isSeen: true,\n        isTyping: false,\n        isSender: true,\n        countMessagesDelivered: 0,\n        color: friendUsers.color,\n        fullName: friendUsers.fullName,\n        letters: [my.msgData]\n      });\n      updateMyUsers.update('messages', myUsers.messages);\n    } else if (!myUsers.messages[_findIndex].letters.filter(msg => msg.time === my.msgData.time).length) {\n      const _saveData = myUsers.messages[_findIndex];\n\n      if (myUsers.messages[_findIndex].letters.length === 1 && myUsers.messages[_findIndex].letters[0].time === null) {\n        myUsers.messages[_findIndex].letters[0] = my.msgData;\n      } else {\n        myUsers.messages[_findIndex].letters.push(my.msgData);\n      }\n\n      myUsers.messages[_findIndex].isSeen = false;\n      myUsers.messages[_findIndex].isTyping = false;\n      myUsers.messages[_findIndex].isSender = true;\n      myUsers.messages.splice(_findIndex, 1);\n      myUsers.messages.unshift(_saveData);\n      updateMyUsers.update('messages', myUsers.messages);\n    }\n  });\n  if (!friend) return;\n  const updateFriendUsers = db.collection('users').doc(friend.friendId);\n  unsubscribeAddMessageFriend = updateFriendUsers.onSnapshot(querySnapshot => {\n    const friendUsers = querySnapshot.data();\n    if (!friendUsers) return;\n\n    const _findIndex = friendUsers.messages.findIndex(item => {\n      var _friend$loggedUser;\n\n      return item.id === ((_friend$loggedUser = friend.loggedUser) === null || _friend$loggedUser === void 0 ? void 0 : _friend$loggedUser.id);\n    });\n\n    if (_findIndex === -1) {\n      friendUsers.messages.push({\n        id: friend.loggedUser.id,\n        color: friend.loggedUser.color,\n        isSeen: false,\n        isSender: false,\n        isTyping: false,\n        countMessagesDelivered: 1,\n        fullName: friend.loggedUser.fullName,\n        letters: [friend.msgData]\n      });\n      updateFriendUsers.update('messages', friendUsers.messages);\n    } else if (!friendUsers.messages[_findIndex].letters.filter(msg => msg.time === friend.msgData.time).length) {\n      if (friendUsers.messages[_findIndex].letters.length === 1 && friendUsers.messages[_findIndex].letters[0].time === null) {\n        friendUsers.messages[_findIndex].letters[0] = friend.msgData;\n      } else {\n        friendUsers.messages[_findIndex].letters.push(friend.msgData);\n      }\n\n      friendUsers.messages[_findIndex].isSeen = false;\n      friendUsers.messages[_findIndex].countMessagesDelivered += 1;\n      friendUsers.messages[_findIndex].isSender = false;\n      friendUsers.messages[_findIndex].isTyping = false;\n      updateFriendUsers.update('messages', friendUsers.messages);\n    }\n  });\n  yield;\n}\nlet unsubscribeRemoveMy;\nlet unsubscribeRemoveFriend;\nexport async function* __REMOVE_MESSAGE(time, {\n  idUser,\n  myId\n}) {\n  if (unsubscribeRemoveMy) unsubscribeRemoveMy();\n  if (unsubscribeRemoveFriend) unsubscribeRemoveFriend();\n  const db = fire.firestore();\n  let updateFriendUsers = null,\n      friendUsers = null,\n      updateMyUsers = null,\n      myUsers = null;\n  unsubscribeRemoveFriend = await db.collection('users').doc(idUser).onSnapshot(snapshot => {\n    updateFriendUsers = db.doc(`users/${snapshot.data().id}`);\n    friendUsers = snapshot.data();\n    if (!friendUsers) return;\n\n    const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\n\n    const foundedItem = friendUsers.messages[_findIndexInFriend].letters.findIndex(msg => msg.time === time);\n\n    if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed) return;\n\n    if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem]) {\n      friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed = true;\n      friendUsers.messages[_findIndexInFriend].removedMessageIndex = foundedItem;\n    }\n\n    updateFriendUsers.update('messages', friendUsers.messages);\n  });\n  unsubscribeRemoveMy = db.collection('users').doc(myId).onSnapshot(snapshot => {\n    updateMyUsers = db.doc(`users/${snapshot.data().id}`);\n    myUsers = snapshot.data();\n    if (!myUsers) return;\n\n    const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\n\n    const foundedItem = myUsers.messages[_findIndexInMy].letters.findIndex(msg => msg.time === time);\n\n    if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem].removed) return;\n\n    if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem]) {\n      myUsers.messages[_findIndexInMy].letters[foundedItem].removed = true;\n      myUsers.messages[_findIndexInMy].removedMessageIndex = foundedItem;\n    }\n\n    updateMyUsers.update('messages', myUsers.messages);\n  });\n  yield;\n}\nexport async function* __EDIT_MESSAGE(msgData, index, {\n  idUser,\n  myId\n}) {\n  const db = fire.firestore();\n  let updateFriendUsers = null,\n      friendUsers = null,\n      updateMyUsers = null,\n      myUsers = null;\n  await db.collection('users').doc(idUser).get().then(async res => {\n    updateFriendUsers = db.doc(`users/${res.data().id}`);\n    friendUsers = res.data();\n    if (!friendUsers) return;\n\n    const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\n\n    if (!msgData) {\n      friendUsers.messages[_findIndexInFriend].editedMsgIndex = -1;\n      friendUsers.messages[_findIndexInFriend].countMessagesDelivered = 0;\n      friendUsers.messages[_findIndexInFriend].isSeen = true;\n      friendUsers.messages[_findIndexInFriend].isSender = true;\n      friendUsers.messages[_findIndexInFriend].isTyping = false;\n    } else if (_findIndexInFriend !== -1) {\n      friendUsers.messages[_findIndexInFriend].editedMsgIndex = index;\n      friendUsers.messages[_findIndexInFriend].letters[index] = _objectSpread({}, friendUsers.messages[_findIndexInFriend].letters[index], {\n        decryptedMsg: msgData.d,\n        encryptedMsg: msgData.e,\n        message: msgData.value,\n        edited: true\n      });\n    }\n\n    await updateFriendUsers.update('messages', friendUsers.messages);\n  });\n  await db.collection('users').doc(myId).get().then(async res => {\n    updateMyUsers = db.doc(`users/${res.data().id}`);\n    myUsers = res.data();\n    if (!myUsers) return;\n\n    const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\n\n    if (!msgData) {\n      myUsers.messages[_findIndexInMy].editedMsgIndex = -1;\n      myUsers.messages[_findIndexInMy].countMessagesDelivered = 0;\n      myUsers.messages[_findIndexInMy].isSeen = true;\n      myUsers.messages[_findIndexInMy].isSender = true;\n      myUsers.messages[_findIndexInMy].isTyping = false;\n    } else if (_findIndexInMy !== -1) {\n      myUsers.messages[_findIndexInMy].editedMsgIndex = index;\n      myUsers.messages[_findIndexInMy].letters[index] = _objectSpread({}, myUsers.messages[_findIndexInMy].letters[index], {\n        decryptedMsg: msgData.d,\n        encryptedMsg: msgData.e,\n        message: msgData.value,\n        edited: true\n      });\n    }\n\n    await updateMyUsers.update('messages', myUsers.messages);\n  });\n  yield;\n}\nexport function* _rootSaga() {\n  yield all([__SET_LOGGED, __GET_CHAT_USERS, __GET_ALL_USERS, __CHANGE_IS_SEEN, __GET_ACTIVE_USERS_MESSAGES, __IS_TYPING_TO_ACTIVE_USER, __GO_PRIVATE_CHAT, __EDIT_MESSAGE, __REMOVE_MESSAGE, __ADD_MESSAGE]);\n}","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/store/saga/index.js"],"names":["all","put","__CHANGE_IS_LOGGED","__SET_MY_USERS_CHAT","__SET_ALL_CHAT_USERS","__SET_ACTIVE_USER","__SET_ACTIVE_USER_MESSAGES","store","fire","__SET_LOGGED","action","dispatch","__GET_ALL_USERS","data","db","firestore","fakeObj","collection","get","then","querySnapshot","forEach","doc","_data","messages","push","unsubscribeUsers","__GET_CHAT_USERS","usersData","where","auth","currentUser","email","onSnapshot","userId","getState","chat","activeUser","id","user","index","_cloneActiveUser","JSON","parse","stringify","letters","slice","pop","__CHANGE_IS_SEEN","senderID","myID","res","myObj","_messagesMy","_findIndex","findIndex","item","isSeen","countMessagesDelivered","update","senderObj","unsubscribe","__GET_ACTIVE_USERS_MESSAGES","_messages","Promise","resolve","__IS_TYPING_TO_ACTIVE_USER","hint","toUserId","myId","friendUsers","isTyping","__GO_PRIVATE_CHAT","idUser","loggedId","myChatUsers","findActiveUser","find","friendChatMyObj","next","unsubscribeAddMessageMy","unsubscribeAddMessageFriend","__ADD_MESSAGE","friend","my","updateMyUsers","loggedUser","friendId","myUsers","unshift","isSender","color","fullName","msgData","filter","msg","time","length","_saveData","splice","updateFriendUsers","unsubscribeRemoveMy","unsubscribeRemoveFriend","__REMOVE_MESSAGE","snapshot","_findIndexInFriend","foundedItem","removed","removedMessageIndex","_findIndexInMy","__EDIT_MESSAGE","editedMsgIndex","decryptedMsg","d","encryptedMsg","e","message","value","edited","_rootSaga"],"mappings":"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","sourcesContent":["import { all, put } from 'redux-saga/effects';\r\nimport {\r\n    __CHANGE_IS_LOGGED,\r\n    __SET_MY_USERS_CHAT,\r\n    __SET_ALL_CHAT_USERS,\r\n    __SET_ACTIVE_USER,\r\n    __SET_ACTIVE_USER_MESSAGES\r\n} from '../actions';\r\nimport store from 'store';\r\nimport fire from \"config/fire\";\r\n\r\n\r\nexport function* __SET_LOGGED(action) {\r\n    yield put(store.dispatch(__CHANGE_IS_LOGGED(action)));\r\n}\r\n\r\nexport async function* __GET_ALL_USERS (data) {\r\n    if (data) {\r\n        yield put(store.dispatch(__SET_ALL_CHAT_USERS(null)));\r\n        return;\r\n    }\r\n    const db = fire.firestore();\r\n    const fakeObj = [];\r\n    await db.collection('users')\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                const _data = doc.data();\r\n                delete _data.messages;\r\n                fakeObj.push({..._data})\r\n            });\r\n        });\r\n    yield put(store.dispatch(__SET_ALL_CHAT_USERS(fakeObj)))\r\n}\r\nlet unsubscribeUsers;\r\nexport async function* __GET_CHAT_USERS(data) {\r\n    if (unsubscribeUsers) unsubscribeUsers();\r\n\r\n    const db = fire.firestore();\r\n    let usersData = [];\r\n    if (data) {\r\n        yield put(store.dispatch(__SET_MY_USERS_CHAT(data)));\r\n    } else {\r\n        unsubscribeUsers = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email)\r\n            .onSnapshot((querySnapshot) => {\r\n                querySnapshot.forEach((doc) => {\r\n                    usersData = doc.data().messages;\r\n\r\n                    const userId = store.getState().chat.activeUser?.id || usersData[0]?.id;\r\n\r\n                    doc.data().messages.forEach((user, index) => {\r\n                        if (user.id === userId) {\r\n                            const _cloneActiveUser = JSON.parse(JSON.stringify(usersData[index]));\r\n                            _cloneActiveUser.letters = _cloneActiveUser.letters.slice(-1).pop();\r\n                            store.dispatch(__SET_ACTIVE_USER(_cloneActiveUser));\r\n                        }\r\n                        usersData[index].letters = user.letters.slice(-1).pop();\r\n                    });\r\n                    store.dispatch(__SET_MY_USERS_CHAT(usersData));\r\n                });\r\n            });\r\n        yield usersData;\r\n    }\r\n}\r\n\r\nexport async function* __CHANGE_IS_SEEN ({senderID, myID}) {\r\n    // Change my seen\r\n\r\n    const db = fire.firestore();\r\n    await db.collection('users').doc(myID).get().then(res => {\r\n        const myObj = db.doc(`users/${myID}`);\r\n        let _messagesMy = res.data()?.messages;\r\n        if (!_messagesMy) return;\r\n        const _findIndex = res.data().messages.findIndex(item => item.id === senderID);\r\n        if (_findIndex !== -1) {\r\n            _messagesMy[_findIndex].isSeen = true;\r\n            _messagesMy[_findIndex].countMessagesDelivered = 0;\r\n        }\r\n        myObj.update('messages', _messagesMy);\r\n    });\r\n    await db.collection('users').doc(senderID).get().then(res => {\r\n        const senderObj = db.doc(`users/${senderID}`);\r\n        let _messagesMy = res.data()?.messages;\r\n        if (!_messagesMy) return;\r\n        const _findIndex = res.data().messages.findIndex(item => item.id === myID);\r\n        if (_findIndex !== -1) {\r\n            _messagesMy[_findIndex].isSeen = true;\r\n            _messagesMy[_findIndex].countMessagesDelivered = 0;\r\n        }\r\n        senderObj.update('messages', _messagesMy);\r\n    });\r\n    yield;\r\n}\r\n\r\nlet unsubscribe;\r\nexport async function* __GET_ACTIVE_USERS_MESSAGES (data) {\r\n    if (unsubscribe) {\r\n        unsubscribe();\r\n    }\r\n    let _messages = [];\r\n    const db = fire.firestore();\r\n    await new Promise (resolve => {\r\n        unsubscribe = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email)\r\n            .onSnapshot((res) => {\r\n                res.forEach(doc => {\r\n                    const _findIndex = doc.data()?.messages.findIndex(item => item.id === data);\r\n                    if (_findIndex !== -1) {\r\n                        _messages = doc.data().messages[_findIndex];\r\n                        store.dispatch(__SET_ACTIVE_USER_MESSAGES([..._messages.letters]));\r\n                        resolve();\r\n                    }\r\n                })\r\n            });\r\n    });\r\n    yield _messages;\r\n}\r\n\r\nexport async function* __IS_TYPING_TO_ACTIVE_USER (hint, toUserId, myId) {\r\n    let friendUsers = null;\r\n    const db        = fire.firestore();\r\n\r\n    await db.collection('users').doc(toUserId).get().then(res => {\r\n        const myObj = db.doc(`users/${toUserId}`);\r\n        friendUsers = res.data();\r\n        let _messagesMy = res.data().messages;\r\n        const _findIndex = res.data().messages.findIndex(item => item.id === myId);\r\n        if (_findIndex !== -1) {\r\n            _messagesMy[_findIndex].isTyping = hint;\r\n            myObj.update('messages', _messagesMy);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function* __GO_PRIVATE_CHAT (idUser, loggedId) {\r\n    const usersData      = store.getState().chat.myChatUsers;\r\n    const findActiveUser = usersData.find(user => user.id === idUser);\r\n    if (findActiveUser) {\r\n        store.dispatch(__SET_ACTIVE_USER( findActiveUser));\r\n    }\r\n\r\n    let friendChatMyObj = {};\r\n    await __CHANGE_IS_SEEN({senderID: idUser, myID: loggedId}).next();\r\n    yield friendChatMyObj\r\n}\r\n\r\nlet unsubscribeAddMessageMy;\r\nlet unsubscribeAddMessageFriend;\r\nexport async function* __ADD_MESSAGE({friend, my}) {\r\n    if (unsubscribeAddMessageMy) unsubscribeAddMessageMy();\r\n    if (unsubscribeAddMessageFriend) unsubscribeAddMessageFriend();\r\n\r\n    const db                = fire.firestore();\r\n    const updateMyUsers     = db.collection('users').doc(my.loggedUser.id);\r\n    let friendUsers = {};\r\n    await db.collection('users').doc(my.friendId).get().then(res => {\r\n        friendUsers = res.data();\r\n    });\r\n    unsubscribeAddMessageMy = updateMyUsers.onSnapshot((querySnapshot) => {\r\n        const myUsers = querySnapshot.data();\r\n        if(!myUsers) return;\r\n        const _findIndex = myUsers.messages.findIndex(item => item.id === my.friendId);\r\n\r\n        if (_findIndex === -1) {\r\n            myUsers.messages.unshift({\r\n                id: my.friendId,\r\n                isSeen: true,\r\n                isTyping: false,\r\n                isSender: true,\r\n                countMessagesDelivered: 0,\r\n                color: friendUsers.color,\r\n                fullName: friendUsers.fullName,\r\n                letters: [my.msgData]\r\n            });\r\n            updateMyUsers.update('messages', myUsers.messages);\r\n        } else if (!myUsers.messages[_findIndex].letters.filter(msg => msg.time === my.msgData.time).length) {\r\n            const _saveData = myUsers.messages[_findIndex];\r\n            if (myUsers.messages[_findIndex].letters.length === 1 && myUsers.messages[_findIndex].letters[0].time === null) {\r\n                myUsers.messages[_findIndex].letters[0] = my.msgData;\r\n            } else {\r\n                myUsers.messages[_findIndex].letters.push(my.msgData);\r\n            }\r\n            myUsers.messages[_findIndex].isSeen = false;\r\n            myUsers.messages[_findIndex].isTyping = false;\r\n            myUsers.messages[_findIndex].isSender = true;\r\n            myUsers.messages.splice(_findIndex, 1);\r\n            myUsers.messages.unshift(_saveData);\r\n            updateMyUsers.update('messages', myUsers.messages);\r\n        }\r\n    });\r\n    if(!friend) return;\r\n\r\n    const updateFriendUsers = db.collection('users').doc(friend.friendId);\r\n    unsubscribeAddMessageFriend = updateFriendUsers.onSnapshot((querySnapshot) => {\r\n        const friendUsers = querySnapshot.data();\r\n        if(!friendUsers) return;\r\n        const _findIndex = friendUsers.messages.findIndex(item => item.id === friend.loggedUser?.id);\r\n        if (_findIndex === -1) {\r\n            friendUsers.messages.push({\r\n                id: friend.loggedUser.id,\r\n                color: friend.loggedUser.color,\r\n                isSeen: false,\r\n                isSender: false,\r\n                isTyping: false,\r\n                countMessagesDelivered: 1,\r\n                fullName: friend.loggedUser.fullName,\r\n                letters: [friend.msgData]\r\n            });\r\n            updateFriendUsers.update('messages', friendUsers.messages);\r\n        } else if (!friendUsers.messages[_findIndex].letters.filter(msg => msg.time === friend.msgData.time).length) {\r\n            if (friendUsers.messages[_findIndex].letters.length === 1 && friendUsers.messages[_findIndex].letters[0].time === null) {\r\n                friendUsers.messages[_findIndex].letters[0] = friend.msgData;\r\n            } else {\r\n                friendUsers.messages[_findIndex].letters.push(friend.msgData);\r\n            }\r\n            friendUsers.messages[_findIndex].isSeen = false;\r\n            friendUsers.messages[_findIndex].countMessagesDelivered += 1;\r\n            friendUsers.messages[_findIndex].isSender = false;\r\n            friendUsers.messages[_findIndex].isTyping = false;\r\n            updateFriendUsers.update('messages', friendUsers.messages);\r\n        }\r\n    });\r\n    yield;\r\n}\r\n\r\nlet unsubscribeRemoveMy;\r\nlet unsubscribeRemoveFriend;\r\nexport async function* __REMOVE_MESSAGE (time, {idUser, myId}) {\r\n    if (unsubscribeRemoveMy) unsubscribeRemoveMy();\r\n    if (unsubscribeRemoveFriend) unsubscribeRemoveFriend();\r\n\r\n    const db                = fire.firestore();\r\n    let updateFriendUsers   = null,\r\n        friendUsers         = null,\r\n        updateMyUsers       = null,\r\n        myUsers             = null;\r\n\r\n    unsubscribeRemoveFriend = await db.collection('users').doc(idUser).onSnapshot(snapshot => {\r\n        updateFriendUsers = db.doc(`users/${snapshot.data().id}`);\r\n        friendUsers = snapshot.data();\r\n        if(!friendUsers) return;\r\n        const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\r\n        const foundedItem = friendUsers.messages[_findIndexInFriend].letters.findIndex(msg => msg.time === time);\r\n\r\n        if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed) return;\r\n\r\n        if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem]) {\r\n            friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed = true;\r\n            friendUsers.messages[_findIndexInFriend].removedMessageIndex = foundedItem\r\n        }\r\n        updateFriendUsers.update('messages',  friendUsers.messages);\r\n    });\r\n\r\n    unsubscribeRemoveMy = db.collection('users').doc(myId).onSnapshot(snapshot => {\r\n        updateMyUsers = db.doc(`users/${snapshot.data().id}`);\r\n        myUsers = snapshot.data();\r\n        if(!myUsers) return;\r\n        const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\r\n        const foundedItem = myUsers.messages[_findIndexInMy].letters.findIndex(msg => msg.time === time);\r\n\r\n        if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem].removed) return;\r\n\r\n        if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem]) {\r\n            myUsers.messages[_findIndexInMy].letters[foundedItem].removed = true;\r\n            myUsers.messages[_findIndexInMy].removedMessageIndex = foundedItem;\r\n        }\r\n        updateMyUsers.update('messages', myUsers.messages);\r\n    });\r\n    yield;\r\n}\r\n\r\nexport async function* __EDIT_MESSAGE (msgData, index, {idUser, myId}) {\r\n    const db                = fire.firestore();\r\n    let updateFriendUsers   = null,\r\n        friendUsers         = null,\r\n        updateMyUsers       = null,\r\n        myUsers             = null;\r\n\r\n    await db.collection('users').doc(idUser).get().then(async res => {\r\n        updateFriendUsers = db.doc(`users/${res.data().id}`);\r\n        friendUsers = res.data();\r\n        if(!friendUsers) return;\r\n        const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\r\n        if (!msgData) {\r\n            friendUsers.messages[_findIndexInFriend].editedMsgIndex = -1;\r\n            friendUsers.messages[_findIndexInFriend].countMessagesDelivered = 0;\r\n            friendUsers.messages[_findIndexInFriend].isSeen = true;\r\n            friendUsers.messages[_findIndexInFriend].isSender = true;\r\n            friendUsers.messages[_findIndexInFriend].isTyping = false;\r\n        } else if (_findIndexInFriend !== -1) {\r\n            friendUsers.messages[_findIndexInFriend].editedMsgIndex = index;\r\n            friendUsers.messages[_findIndexInFriend].letters[index] = {\r\n                ...friendUsers.messages[_findIndexInFriend].letters[index],\r\n                decryptedMsg: msgData.d,\r\n                encryptedMsg: msgData.e,\r\n                message: msgData.value,\r\n                edited: true,\r\n            }\r\n        }\r\n        await updateFriendUsers.update('messages', friendUsers.messages);\r\n    });\r\n    await db.collection('users').doc(myId).get().then( async res => {\r\n        updateMyUsers = db.doc(`users/${res.data().id}`);\r\n        myUsers = res.data();\r\n        if(!myUsers) return;\r\n        const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\r\n        if (!msgData) {\r\n            myUsers.messages[_findIndexInMy].editedMsgIndex = -1;\r\n            myUsers.messages[_findIndexInMy].countMessagesDelivered = 0;\r\n            myUsers.messages[_findIndexInMy].isSeen = true;\r\n            myUsers.messages[_findIndexInMy].isSender = true;\r\n            myUsers.messages[_findIndexInMy].isTyping = false;\r\n        } else if (_findIndexInMy !== -1) {\r\n            myUsers.messages[_findIndexInMy].editedMsgIndex = index;\r\n            myUsers.messages[_findIndexInMy].letters[index] = {\r\n                ...myUsers.messages[_findIndexInMy].letters[index],\r\n                decryptedMsg: msgData.d,\r\n                encryptedMsg: msgData.e,\r\n                message: msgData.value,\r\n                edited: true,\r\n            }\r\n        }\r\n        await updateMyUsers.update('messages', myUsers.messages);\r\n    });\r\n    yield;\r\n}\r\nexport function * _rootSaga () {\r\n    yield all([\r\n        __SET_LOGGED,\r\n        __GET_CHAT_USERS,\r\n        __GET_ALL_USERS,\r\n        __CHANGE_IS_SEEN,\r\n        __GET_ACTIVE_USERS_MESSAGES,\r\n        __IS_TYPING_TO_ACTIVE_USER,\r\n        __GO_PRIVATE_CHAT,\r\n        __EDIT_MESSAGE,\r\n        __REMOVE_MESSAGE,\r\n        __ADD_MESSAGE,\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}