{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar Vernam = /*#__PURE__*/function () {\n  function Vernam() {\n    _classCallCheck(this, Vernam);\n  }\n\n  _createClass(Vernam, null, [{\n    key: \"generateRandomStringByAmount\",\n    value: function generateRandomStringByAmount(length) {\n      var result = '';\n      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"doEncrypt\",\n    value: function doEncrypt(msg, callback) {\n      var sum = [];\n      var enc = [];\n      this.letters = new Array(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\");\n      var input = msg.toUpperCase();\n      var key = this.generateRandomStringByAmount(msg.length).toUpperCase();\n      var inputIndex;\n      callback(key);\n\n      for (var i = 0; i < msg.length; i++) {\n        inputIndex = this.letters.indexOf(input[i]);\n        var keyIndex = this.letters.indexOf(key[i]);\n        sum[i] = inputIndex + keyIndex;\n\n        if (sum[i] >= 26) {\n          sum[i] = sum[i] % 26;\n        }\n      }\n\n      for (var j = 0; j < msg.length; j++) {\n        enc[j] = this.letters[sum[j]];\n        this.abc[j] = sum[j];\n      }\n\n      var encr = enc.toString();\n      var encrypt = encr.split(\",\").join(\"\");\n      return encrypt;\n    }\n  }, {\n    key: \"doDecrypt\",\n    value: function doDecrypt(msg, key) {\n      var arr = [];\n      var dec = []; // const enter = msg.toUpperCase();\n\n      var keyD = key.toUpperCase();\n\n      for (var k = 0; k < keyD.length; k++) {\n        var xyz = this.letters.indexOf(keyD[k]);\n        arr[k] = this.abc[k] - xyz;\n\n        if (arr[k] < 0) {\n          arr[k] += 26;\n        }\n      }\n\n      for (var m = 0; m < keyD.length; m++) {\n        dec[m] = this.letters[arr[m]];\n      }\n\n      var decr = dec.toString();\n      var decrypt = decr.split(\",\").join(\"\");\n      return decrypt;\n    }\n  }]);\n\n  return Vernam;\n}();\n\n_defineProperty(Vernam, \"letters\", []);\n\n_defineProperty(Vernam, \"abc\", []);\n\nexport { Vernam as default };","map":null,"metadata":{},"sourceType":"module"}