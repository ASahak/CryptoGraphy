{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport Head from 'next/head';\nimport Icon from \"components/Icons/icon\";\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport Link from 'next/link';\nimport { useForm } from 'react-hook-form';\nimport fire from \"config/fire\";\nimport Alert from \"components/shared/UI/Alert\";\nimport Router from 'next/router';\nimport * as authService from \"utils/auth-service\";\nimport { __bodyLoading } from 'components/shared/helpers/global-functions';\nimport { connect } from 'react-redux';\nimport { __CHANGE_STATUS_IS_LOADING } from \"../store/actions\";\n\nfunction RegisterForm() {\n  const _timeout = 4000;\n  const {\n    0: loadingRegister,\n    1: setLoadingRegister\n  } = useState(false);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    const timeStart = new Date().getTime();\n    setLoadingRegister(true);\n    fire.auth().createUserWithEmailAndPassword(data.email, data.password).then(user => {\n      setLoadingRegister(false);\n      const db = fire.firestore();\n      db.collection('users').add({\n        id: '',\n        fullName: data.name,\n        email: data.email,\n        color: data.favorite_color,\n        messages: []\n      }).then(_ => {\n        const docUsers = db.doc(`users/${_.id}`);\n        docUsers.update({\n          'id': _.id\n        }).then(() => {\n          Router.replace('/');\n        });\n      });\n    }).catch(err => {\n      setErrorMessage(err.message);\n      setLoadingRegister(false);\n      reset();\n      const timeEnd = new Date().getTime();\n\n      if (timeEnd - timeStart > _timeout) {\n        setErrorMessage('');\n      } else {\n        setTimeout(() => {\n          setErrorMessage('');\n        }, _timeout - (timeEnd - timeStart));\n      }\n    });\n  };\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"jsx-3024337481\" + \" \" + \"login-form\"\n  }, errorMessage && __jsx(Alert, {\n    type: \"error\",\n    timeout: _timeout,\n    message: errorMessage\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"text\",\n    name: \"name\",\n    refBind: register({\n      required: 'Name is required',\n      pattern: {\n        value: /.*[A-Z]+.*/g,\n        message: \"Name must include at least one uppercase letter\"\n      }\n    }),\n    errors: errors.name && errors.name.message,\n    fullWidth: true,\n    placeholder: \"Name\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"email\",\n    name: \"email\",\n    refBind: register({\n      required: 'Email is required',\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: \"Invalid email address\"\n      }\n    }),\n    errors: errors.email && errors.email.message,\n    fullWidth: true,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      required: \"You must specify a password\",\n      minLength: {\n        value: 8,\n        message: \"Password must have at least 8 characters\"\n      }\n    }),\n    errors: errors.password && errors.password.message,\n    name: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Password\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      validate: value => value === password.current || \"The passwords do not match\"\n    }),\n    errors: errors.password_repeat && errors.password_repeat.message,\n    name: \"password_repeat\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Confirm Password\",\n    size: \"md\"\n  }), __jsx(\"div\", {\n    className: \"jsx-3024337481\" + \" \" + \"favorite-color-container\"\n  }, __jsx(\"label\", {\n    className: \"jsx-3024337481\"\n  }, \"Your Favorite Color\"), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      required: \"Favorite color is required\"\n    }),\n    errors: errors.favorite_color && errors.favorite_color.message,\n    name: \"favorite_color\",\n    type: \"color\",\n    fullWidth: true,\n    placeholder: \"Your favorite color\",\n    size: \"md\"\n  })), __jsx(UI_ELEMENTS.Button, {\n    icon: loadingRegister ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: \"Register\",\n    width: 190,\n    size: \"md\"\n  }), __jsx(Link, {\n    href: \"/login\",\n    prefetch: false\n  }, __jsx(\"a\", {\n    className: \"jsx-3024337481\" + \" \" + \"link-to-reset\"\n  }, \"I have an account already. Go to login\")), __jsx(_JSXStyle, {\n    id: \"3024337481\"\n  }, [\".favorite-color-container.jsx-3024337481{position:relative;}\", \".favorite-color-container.jsx-3024337481 label.jsx-3024337481{position:absolute;color:#000;z-index:22;top:10px;left:15px;}\"]));\n}\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: this.props.isLoading\n    };\n\n    __bodyLoading(this.state.isLoading);\n\n    authService.__isLogged().then(res => {\n      if (res) {\n        Router.push('/');\n      } else {\n        this.setState({\n          isLoading: false\n        }, () => __bodyLoading(this.state.isLoading, false));\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.__CHANGE_STATUS_IS_LOADING(false);\n  }\n\n  render() {\n    if (this.state.isLoading) return '';\n    return __jsx(\"div\", {\n      className: \"jsx-821308799\" + \" \" + \"container\"\n    }, __jsx(Head, null, __jsx(\"title\", {\n      className: \"jsx-821308799\"\n    }, \"Register\")), __jsx(\"main\", {\n      className: \"jsx-821308799\"\n    }, __jsx(\"div\", {\n      className: \"jsx-821308799\" + \" \" + \"register-form-container\"\n    }, __jsx(\"div\", {\n      className: \"jsx-821308799\" + \" \" + \"form-icon\"\n    }, __jsx(Icon, {\n      name: \"user\"\n    })), __jsx(\"h4\", {\n      className: \"jsx-821308799\" + \" \" + \"title-form\"\n    }, \"Member Register\"), __jsx(RegisterForm, null))), __jsx(_JSXStyle, {\n      id: \"821308799\"\n    }, [\".register-form-container{position:absolute;left:0;right:0;margin:auto;width:400px;padding:25px 20px;background:#ececec30;bottom:0;top:0;height:-webkit-max-content;height:-moz-max-content;height:max-content;border-radius:5px;-webkit-backdrop-filter:blur(6px);-webkit-backdrop-filter:blur(6px);backdrop-filter:blur(6px);border:1px solid #ffffff24;}\", \".register-form-container .title-form{margin-bottom:10px;text-align:center;text-transform:uppercase;-webkit-letter-spacing:2px;-moz-letter-spacing:2px;-ms-letter-spacing:2px;letter-spacing:2px;font-size:23px;margin:10px 10px 20px 10px;color:#fbfbfc;font-weight:400;}\", \".register-form-container .link-to-reset{text-align:center;display:block;margin:10px;font-size:13px;font-style:italic;color:#e5e6e8;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;}\", \".register-form-container .form-icon{width:40px;height:40px;margin:auto;}\", \".register-form-container .form-icon svg{width:100%;height:100%;}\"]));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isLoading: state.auth.isLoading\n});\n\nconst mapDispatchToProps = {\n  __CHANGE_STATUS_IS_LOADING\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Register));","map":null,"metadata":{},"sourceType":"module"}