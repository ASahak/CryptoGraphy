{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar Vigenere = /*#__PURE__*/function () {\n  function Vigenere() {\n    _classCallCheck(this, Vigenere);\n  }\n\n  _createClass(Vigenere, null, [{\n    key: \"doCryptVigenere\",\n    value: function doCryptVigenere(isDecrypt, value, key, callback) {\n      if (key.length === 0) {\n        callback(\"Key is empty\");\n        return;\n      }\n\n      var keyDouble = this.filterKey(key);\n\n      if (keyDouble.length === 0) {\n        callback(\"Key has no letters\");\n        return;\n      }\n\n      if (isDecrypt) {\n        for (var i = 0; i < keyDouble.length; i++) {\n          keyDouble[i] = (26 - keyDouble[i]) % 26;\n        }\n      }\n\n      return this.crypt(value, keyDouble);\n    }\n    /*\r\n     * Returns the result the Vigenere encryption on the given text with the given key.\r\n     */\n\n  }, {\n    key: \"crypt\",\n    value: function crypt(input, key) {\n      var output = \"\";\n\n      for (var i = 0, j = 0; i < input.length; i++) {\n        var c = input.charCodeAt(i);\n\n        if (this.isUppercase(c)) {\n          output += String.fromCharCode((c - 65 + key[j % key.length]) % 26 + 65);\n          j++;\n        } else if (this.isLowercase(c)) {\n          output += String.fromCharCode((c - 97 + key[j % key.length]) % 26 + 97);\n          j++;\n        } else {\n          output += input.charAt(i);\n        }\n      }\n\n      return output;\n    }\n    /*\r\n     * Returns an array of numbers, each in the range [0, 26), representing the given key.\r\n     * The key is case-insensitive, and non-letters are ignored.\r\n     * Examples:\r\n     * - filterKey(\"AAA\") = [0, 0, 0].\r\n     * - filterKey(\"abc\") = [0, 1, 2].\r\n     * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\r\n     */\n\n  }, {\n    key: \"filterKey\",\n    value: function filterKey(key) {\n      var result = [];\n\n      for (var i = 0; i < key.length; i++) {\n        var c = key.charCodeAt(i);\n        if (this.isLetter(c)) result.push((c - 65) % 32);\n      }\n\n      return result;\n    } // Tests whether the specified character code is a letter.\n\n  }, {\n    key: \"isLetter\",\n    value: function isLetter(c) {\n      return this.isUppercase(c) || this.isLowercase(c);\n    } // Tests whether the specified character code is an uppercase letter.\n\n  }, {\n    key: \"isUppercase\",\n    value: function isUppercase(c) {\n      return 65 <= c && c <= 90; // 65 is character code for 'A'. 90 is 'Z'.\n    } // Tests whether the specified character code is a lowercase letter.\n\n  }, {\n    key: \"isLowercase\",\n    value: function isLowercase(c) {\n      return 97 <= c && c <= 122; // 97 is character code for 'a'. 122 is 'z'.\n    }\n  }]);\n\n  return Vigenere;\n}();\n\nexport { Vigenere as default };","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/Vigenere.js"],"names":["Vigenere","isDecrypt","value","key","callback","length","keyDouble","filterKey","i","crypt","input","output","j","c","charCodeAt","isUppercase","String","fromCharCode","isLowercase","charAt","result","isLetter","push"],"mappings":"AAAA;;;;;IACqBA,Q;;;;;;;oCAEOC,S,EAAWC,K,EAAOC,G,EAAKC,Q,EAAU;AACrD,UAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AAClBD,QAAAA,QAAQ,CAAC,cAAD,CAAR;AACA;AACH;;AACD,UAAIE,SAAS,GAAG,KAAKC,SAAL,CAAeJ,GAAf,CAAhB;;AACA,UAAIG,SAAS,CAACD,MAAV,KAAqB,CAAzB,EAA4B;AACxBD,QAAAA,QAAQ,CAAC,oBAAD,CAAR;AACA;AACH;;AACD,UAAIH,SAAJ,EAAe;AACX,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACD,MAA9B,EAAsCG,CAAC,EAAvC;AACIF,UAAAA,SAAS,CAACE,CAAD,CAAT,GAAe,CAAC,KAAKF,SAAS,CAACE,CAAD,CAAf,IAAsB,EAArC;AADJ;AAEH;;AACD,aAAO,KAAKC,KAAL,CAAWP,KAAX,EAAkBI,SAAlB,CAAP;AACH;AACD;;;;;;0BAGaI,K,EAAOP,G,EAAK;AACrB,UAAIQ,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAR,EAAWI,CAAC,GAAG,CAApB,EAAuBJ,CAAC,GAAGE,KAAK,CAACL,MAAjC,EAAyCG,CAAC,EAA1C,EAA8C;AAC1C,YAAIK,CAAC,GAAGH,KAAK,CAACI,UAAN,CAAiBN,CAAjB,CAAR;;AACA,YAAI,KAAKO,WAAL,CAAiBF,CAAjB,CAAJ,EAAyB;AACrBF,UAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACJ,CAAC,GAAG,EAAJ,GAASV,GAAG,CAACS,CAAC,GAAGT,GAAG,CAACE,MAAT,CAAb,IAAiC,EAAjC,GAAsC,EAA1D,CAAV;AACAO,UAAAA,CAAC;AACJ,SAHD,MAGO,IAAI,KAAKM,WAAL,CAAiBL,CAAjB,CAAJ,EAAyB;AAC5BF,UAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACJ,CAAC,GAAG,EAAJ,GAASV,GAAG,CAACS,CAAC,GAAGT,GAAG,CAACE,MAAT,CAAb,IAAiC,EAAjC,GAAsC,EAA1D,CAAV;AACAO,UAAAA,CAAC;AACJ,SAHM,MAGA;AACHD,UAAAA,MAAM,IAAID,KAAK,CAACS,MAAN,CAAaX,CAAb,CAAV;AACH;AACJ;;AACD,aAAOG,MAAP;AACH;AACD;;;;;;;;;;;8BAQiBR,G,EAAK;AAClB,UAAIiB,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACE,MAAxB,EAAgCG,CAAC,EAAjC,EAAqC;AACjC,YAAIK,CAAC,GAAGV,GAAG,CAACW,UAAJ,CAAeN,CAAf,CAAR;AACA,YAAI,KAAKa,QAAL,CAAcR,CAAd,CAAJ,EACIO,MAAM,CAACE,IAAP,CAAY,CAACT,CAAC,GAAG,EAAL,IAAW,EAAvB;AACP;;AACD,aAAOO,MAAP;AACH,K,CAED;;;;6BACgBP,C,EAAG;AACf,aAAO,KAAKE,WAAL,CAAiBF,CAAjB,KAAuB,KAAKK,WAAL,CAAiBL,CAAjB,CAA9B;AACH,K,CAED;;;;gCACmBA,C,EAAG;AAClB,aAAO,MAAMA,CAAN,IAAWA,CAAC,IAAI,EAAvB,CADkB,CACU;AAC/B,K,CAED;;;;gCACmBA,C,EAAG;AAClB,aAAO,MAAMA,CAAN,IAAWA,CAAC,IAAI,GAAvB,CADkB,CACW;AAChC;;;;;;SApEgBb,Q","sourcesContent":["\"use strict\";\r\nexport default class Vigenere {\r\n\r\n    static doCryptVigenere (isDecrypt, value, key, callback) {\r\n        if (key.length === 0) {\r\n            callback(\"Key is empty\");\r\n            return;\r\n        }\r\n        let keyDouble = this.filterKey(key);\r\n        if (keyDouble.length === 0) {\r\n            callback(\"Key has no letters\");\r\n            return;\r\n        }\r\n        if (isDecrypt) {\r\n            for (let i = 0; i < keyDouble.length; i++)\r\n                keyDouble[i] = (26 - keyDouble[i]) % 26;\r\n        }\r\n        return this.crypt(value, keyDouble);\r\n    }\r\n    /*\r\n     * Returns the result the Vigenere encryption on the given text with the given key.\r\n     */\r\n    static crypt(input, key) {\r\n        let output = \"\";\r\n        for (let i = 0, j = 0; i < input.length; i++) {\r\n            let c = input.charCodeAt(i);\r\n            if (this.isUppercase(c)) {\r\n                output += String.fromCharCode((c - 65 + key[j % key.length]) % 26 + 65);\r\n                j++;\r\n            } else if (this.isLowercase(c)) {\r\n                output += String.fromCharCode((c - 97 + key[j % key.length]) % 26 + 97);\r\n                j++;\r\n            } else {\r\n                output += input.charAt(i);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    /*\r\n     * Returns an array of numbers, each in the range [0, 26), representing the given key.\r\n     * The key is case-insensitive, and non-letters are ignored.\r\n     * Examples:\r\n     * - filterKey(\"AAA\") = [0, 0, 0].\r\n     * - filterKey(\"abc\") = [0, 1, 2].\r\n     * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\r\n     */\r\n    static filterKey(key) {\r\n        let result = [];\r\n        for (let i = 0; i < key.length; i++) {\r\n            let c = key.charCodeAt(i);\r\n            if (this.isLetter(c))\r\n                result.push((c - 65) % 32);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Tests whether the specified character code is a letter.\r\n    static isLetter(c) {\r\n        return this.isUppercase(c) || this.isLowercase(c);\r\n    }\r\n\r\n    // Tests whether the specified character code is an uppercase letter.\r\n    static isUppercase(c) {\r\n        return 65 <= c && c <= 90;  // 65 is character code for 'A'. 90 is 'Z'.\r\n    }\r\n\r\n    // Tests whether the specified character code is a lowercase letter.\r\n    static isLowercase(c) {\r\n        return 97 <= c && c <= 122;  // 97 is character code for 'a'. 122 is 'z'.\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}