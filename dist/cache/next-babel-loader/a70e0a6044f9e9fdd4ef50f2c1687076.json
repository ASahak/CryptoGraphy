{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { __GET_ACTIVE_USERS_MESSAGES, __ADD_MESSAGE, __GET_CHAT_USERS, __IS_TYPING_TO_ACTIVE_USER, __EDIT_MESSAGE } from 'store/saga';\nimport { __SET_ENCRYPT_DATA } from 'store/actions';\nimport TextAreaMessage from 'components/elements/TextAreaMessage';\nimport Skeleton from \"./Skeleton\";\nimport PrivateMessageContent from \"components/elements/PrivateMessageContent\";\nimport { Modal } from 'components/shared/UI/Modal';\nimport UI_ELEMENTS from \"./shared/UI\";\nimport { Bus } from \"components/shared/helpers/Bus\";\nimport { Vigenere, RSA, Caesar, Playfair, Vernam, Substitution } from 'libraries';\n\nvar Messages = /*#__PURE__*/function (_React$Component) {\n  _inherits(Messages, _React$Component);\n\n  var _super = _createSuper(Messages);\n\n  function Messages(props) {\n    var _this;\n\n    _classCallCheck(this, Messages);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      startMessageNotify: '',\n      skeletonLoading: true,\n      noChatUser: false,\n      activeUserData: {},\n      showModal: false,\n      beforeClose: false,\n      sendMessage: '',\n      modalData: {\n        yourMessage: '',\n        encryptText: '',\n        warningMsg: ''\n      }\n    };\n    _this.__sendMessage = _this.__sendMessage.bind(_assertThisInitialized(_this));\n    _this.__isTyping = _this.__isTyping.bind(_assertThisInitialized(_this));\n    _this.__handleSuccess = _this.__handleSuccess.bind(_assertThisInitialized(_this));\n    _this.__closeModal = _this.__closeModal.bind(_assertThisInitialized(_this));\n    _this.__handleSubmitMessage = _this.__handleSubmitMessage.bind(_assertThisInitialized(_this));\n    _this.__updateStateContent = _this.__updateStateContent.bind(_assertThisInitialized(_this));\n    _this.__messagesHaveBeenDeleted = _this.__messagesHaveBeenDeleted.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Messages, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _prevProps$activeUser, _this$props$activeUse, _prevProps$activeUser2, _this$props$activeUse2, _prevProps$activeUser3, _this$props$activeUse4, _this$props$activeUse5;\n\n      var _this$props$activeUse3, startTime, genMessages, endTime, _this$props$activeUse6, _startTime, _genMessages, _endTime;\n\n      return _regeneratorRuntime.async(function componentDidUpdate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Working when my chat list is empty\n              if (!this.state.noChatUser && this.props.usersList && this.props.usersList.length === 0) {\n                this.setState({\n                  noChatUser: true\n                });\n              } else if (this.state.noChatUser && this.props.usersList && this.props.usersList.length !== 0) {\n                this.setState({\n                  noChatUser: false\n                });\n              }\n\n              if (!(!((_prevProps$activeUser = prevProps.activeUser) === null || _prevProps$activeUser === void 0 ? void 0 : _prevProps$activeUser.id) && ((_this$props$activeUse = this.props.activeUser) === null || _this$props$activeUse === void 0 ? void 0 : _this$props$activeUse.id) && ((_prevProps$activeUser2 = prevProps.activeUser) === null || _prevProps$activeUser2 === void 0 ? void 0 : _prevProps$activeUser2.id) !== ((_this$props$activeUse2 = this.props.activeUser) === null || _this$props$activeUse2 === void 0 ? void 0 : _this$props$activeUse2.id))) {\n                _context.next = 11;\n                break;\n              }\n\n              this.setState({\n                startMessageNotify: '',\n                skeletonLoading: true\n              });\n              startTime = new Date().getTime();\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(__GET_ACTIVE_USERS_MESSAGES((_this$props$activeUse3 = this.props.activeUser) === null || _this$props$activeUse3 === void 0 ? void 0 : _this$props$activeUse3.id).next());\n\n            case 6:\n              genMessages = _context.sent;\n              endTime = new Date().getTime();\n\n              this.__updateStateContent(genMessages.value.letters[0].message, endTime, startTime);\n\n              _context.next = 22;\n              break;\n\n            case 11:\n              if (!(((_prevProps$activeUser3 = prevProps.activeUser) === null || _prevProps$activeUser3 === void 0 ? void 0 : _prevProps$activeUser3.id) !== ((_this$props$activeUse4 = this.props.activeUser) === null || _this$props$activeUse4 === void 0 ? void 0 : _this$props$activeUse4.id) && ((_this$props$activeUse5 = this.props.activeUser) === null || _this$props$activeUse5 === void 0 ? void 0 : _this$props$activeUse5.id))) {\n                _context.next = 21;\n                break;\n              }\n\n              this.setState({\n                startMessageNotify: '',\n                skeletonLoading: true\n              });\n              _startTime = new Date().getTime();\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(__GET_ACTIVE_USERS_MESSAGES((_this$props$activeUse6 = this.props.activeUser) === null || _this$props$activeUse6 === void 0 ? void 0 : _this$props$activeUse6.id).next());\n\n            case 16:\n              _genMessages = _context.sent;\n              _endTime = new Date().getTime();\n\n              this.__updateStateContent(_genMessages.value.letters[0].message, _endTime, _startTime);\n\n              _context.next = 22;\n              break;\n\n            case 21:\n              if (prevProps.messages.length === 1 && prevProps.messages[0].message === '' && this.props.messages.length === 1 && this.props.messages[0].message !== '') {\n                this.setState({\n                  startMessageNotify: ''\n                });\n              }\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"__messagesHaveBeenDeleted\",\n    value: function __messagesHaveBeenDeleted() {\n      this.setState({\n        startMessageNotify: 'Send the first letter'\n      });\n    }\n  }, {\n    key: \"__updateStateContent\",\n    value: function __updateStateContent(message, endTime, startTime) {\n      var _this2 = this;\n\n      this.setState(_objectSpread({}, message === '' && {\n        startMessageNotify: 'Send the first letter'\n      }));\n\n      if (endTime - startTime < 1000) {\n        setTimeout(function () {\n          _this2.setState({\n            noChatUser: false,\n            skeletonLoading: false\n          });\n        }, 1000);\n      } else {\n        this.setState({\n          noChatUser: false,\n          skeletonLoading: false\n        });\n      }\n    }\n  }, {\n    key: \"__isTyping\",\n    value: function __isTyping(hint) {\n      var _this$props$activeUse7;\n\n      __IS_TYPING_TO_ACTIVE_USER(hint, (_this$props$activeUse7 = this.props.activeUser) === null || _this$props$activeUse7 === void 0 ? void 0 : _this$props$activeUse7.id, this.props.loggedUser.id).next();\n    }\n  }, {\n    key: \"__handleSuccess\",\n    value: function __handleSuccess() {\n      this.setState({\n        beforeClose: true\n      });\n    }\n  }, {\n    key: \"__closeModal\",\n    value: function __closeModal() {\n      var _this3 = this;\n\n      this.setState({\n        beforeClose: false,\n        showModal: false\n      }, function () {\n        if (_this3.state.modalData.encryptText) _this3.__handleSubmitMessage(_this3.state.sendMessage, _this3.state.modalData.encryptText, _this3.state.modalData.decryptText);\n      });\n    }\n  }, {\n    key: \"__handleSubmitMessage\",\n    value: function __handleSubmitMessage(value, encryptedMsg, decryptMsg) {\n      var _this$props$encryptDa, _this$props$activeUse8, _this$props$activeUse9;\n\n      var isKey, messageData;\n      return _regeneratorRuntime.async(function __handleSubmitMessage$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              isKey = value === 'crypt' && value === encryptedMsg && value === decryptMsg && isNaN(decryptMsg);\n              messageData = {\n                time: new Date().getTime(),\n                message: value,\n                encryptedMsg: encryptedMsg,\n                decryptedMsg: decryptMsg,\n                key: isKey ? 'crypt' : (_this$props$encryptDa = this.props.encryptData) === null || _this$props$encryptDa === void 0 ? void 0 : _this$props$encryptDa.key,\n                encryptType: isKey ? 'crypt' : this.props.encryptData.type\n              };\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(__ADD_MESSAGE({\n                friend: {\n                  friendId: (_this$props$activeUse8 = this.props.activeUser) === null || _this$props$activeUse8 === void 0 ? void 0 : _this$props$activeUse8.id,\n                  loggedUser: this.props.loggedUser,\n                  msgData: _objectSpread({}, messageData, {\n                    owner: this.props.loggedUser.id\n                  })\n                },\n                my: {\n                  friendId: (_this$props$activeUse9 = this.props.activeUser) === null || _this$props$activeUse9 === void 0 ? void 0 : _this$props$activeUse9.id,\n                  loggedUser: this.props.loggedUser,\n                  msgData: _objectSpread({}, messageData, {\n                    owner: 'Me'\n                  })\n                }\n              }).next());\n\n            case 4:\n              __GET_CHAT_USERS().next();\n\n              this.setState({\n                startMessageNotify: ''\n              });\n              Bus.dispatch('messageSendingFinish');\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"__encryptCommon\",\n    value: function __encryptCommon(value, key, type) {\n      var _this4 = this;\n\n      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n      var sendMSG = {};\n\n      switch (type) {\n        case 'vigenere':\n          var encryptedMsgV = Vigenere.doCryptVigenere(false, value, key, function (msg) {\n            callback(msg);\n\n            _this4.props.__SET_ENCRYPT_DATA({\n              type: 'warning',\n              value: true\n            });\n          });\n          return sendMSG = {\n            encryptedMSG: encryptedMsgV,\n            decryptedMSG: Vigenere.doCryptVigenere(true, encryptedMsgV, key, function (msg) {\n              callback(msg);\n\n              _this4.props.__SET_ENCRYPT_DATA({\n                type: 'warning',\n                value: true\n              });\n            })\n          };\n\n        case 'substitution':\n          var encryptedMsgS = Substitution(value);\n          return sendMSG = {\n            encryptedMSG: encryptedMsgS.encrypt,\n            decryptedMSG: encryptedMsgS.decrypt\n          };\n\n        case 'rsa':\n          // Message\n          var message = value; // Generate RSA keys\n\n          var keys = RSA.generate(key);\n          var encoded_message = RSA.encode(message);\n          var encrypted_message = RSA.encrypt(encoded_message, keys.n, keys.e);\n          var decrypted_message = RSA.decrypt(encrypted_message, keys.d, keys.n);\n          var decoded_message = RSA.decode(decrypted_message);\n          return sendMSG = {\n            encryptedMSG: encoded_message.toString(),\n            decryptedMSG: decoded_message\n          };\n\n        case 'caesar':\n          var encryptedMsgC = Caesar.doCrypt(false, value, key, function (msg) {\n            callback(msg);\n          });\n          return sendMSG = {\n            encryptedMSG: encryptedMsgC,\n            decryptedMSG: Caesar.doCrypt(true, encryptedMsgC, key, function (msg) {\n              callback(msg);\n            })\n          };\n\n        case 'playfair':\n          return sendMSG = {\n            encryptedMSG: Playfair.doCipher(value, key, function (msg) {\n              callback(msg);\n            }),\n            decryptedMSG: Playfair.deCodeCipher(value, key)\n          };\n\n        case 'vernam':\n          var _keyE = '';\n          var encryptedMsgVer = Vernam.doEncrypt(value, function (_key) {\n            _keyE = _key;\n\n            _this4.props.__SET_ENCRYPT_DATA({\n              type: 'key',\n              value: _key\n            });\n          });\n          return sendMSG = {\n            encryptedMSG: encryptedMsgVer,\n            decryptedMSG: Vernam.doDecrypt(value, _keyE)\n          };\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"__sendMessage\",\n    value: function __sendMessage(value, isKey) {\n      var _this5 = this;\n\n      var _isKey$mainObj, _isKey$mainObj2, _this$props$activeUse10, _this$props$loggedUse, encryptedMsg, warning;\n\n      return _regeneratorRuntime.async(function __sendMessage$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(isKey instanceof Object)) {\n                _context3.next = 9;\n                break;\n              }\n\n              encryptedMsg = this.__encryptCommon.call(this, value, (_isKey$mainObj = isKey.mainObj) === null || _isKey$mainObj === void 0 ? void 0 : _isKey$mainObj.key, (_isKey$mainObj2 = isKey.mainObj) === null || _isKey$mainObj2 === void 0 ? void 0 : _isKey$mainObj2.encryptType);\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(__EDIT_MESSAGE({\n                value: value,\n                e: encryptedMsg.encryptedMSG,\n                d: encryptedMsg.decryptedMSG\n              }, isKey === null || isKey === void 0 ? void 0 : isKey.index, {\n                idUser: (_this$props$activeUse10 = this.props.activeUser) === null || _this$props$activeUse10 === void 0 ? void 0 : _this$props$activeUse10.id,\n                myId: (_this$props$loggedUse = this.props.loggedUser) === null || _this$props$loggedUse === void 0 ? void 0 : _this$props$loggedUse.id\n              }).next());\n\n            case 4:\n              Bus.dispatch('endEditing');\n              Bus.dispatch('messageSendingFinish');\n              return _context3.abrupt(\"return\");\n\n            case 9:\n              if (!isKey) {\n                _context3.next = 12;\n                break;\n              }\n\n              this.__handleSubmitMessage('crypt', 'crypt', 'crypt');\n\n              return _context3.abrupt(\"return\");\n\n            case 12:\n              warning = '';\n              this.setState({\n                sendMessage: value\n              }, function () {\n                var _this5$props$encryptD;\n\n                var encryptMsg = _this5.__encryptCommon.call(_this5, value, (_this5$props$encryptD = _this5.props.encryptData) === null || _this5$props$encryptD === void 0 ? void 0 : _this5$props$encryptD.key, _this5.props.encryptData.type, function (msg) {\n                  warning = msg;\n                });\n\n                if (_this5.props.isShowModal) {\n                  _this5.setState({\n                    modalData: _objectSpread({\n                      yourMessage: value\n                    }, warning && {\n                      warningMsg: warning\n                    }, {}, encryptMsg.encryptedMSG && {\n                      encryptText: encryptMsg.encryptedMSG\n                    }, {}, encryptMsg.decryptedMSG && {\n                      decryptText: encryptMsg.decryptedMSG\n                    }),\n                    showModal: true\n                  });\n                } else if (encryptMsg.encryptedMSG && encryptMsg.decryptedMSG) _this5.__handleSubmitMessage(value, encryptMsg.encryptedMSG, encryptMsg.decryptedMSG);\n              });\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$loggedUse2;\n\n      return __jsx(\"div\", {\n        className: \"jsx-610849184\" + \" \" + \"message-content-right \\n                \".concat(this.state.skeletonLoading ? 'skeleton-loading-content' : '', \" \\n                \").concat(!this.state.noChatUser ? 'hidden-overlay' : '', \" \\n                \").concat(this.state.startMessageNotify ? 'empty-message-content' : '', \"\\n                \").concat(this.state.noChatUser ? 'no-chat-user' : '', \"\\n                \")\n      }, this.state.skeletonLoading && !this.state.noChatUser ? new Array(6).fill('').map(function (_, i) {\n        return __jsx(\"div\", {\n          key: i + Math.random().toString(16).slice(2, 6),\n          style: {\n            opacity: (6 - i) * 0.10\n          },\n          className: \"jsx-610849184\" + \" \" + \"skeleton-container-messages \".concat(i % 2 !== 0 ? 'odd-container-skeleton' : '')\n        }, __jsx(Skeleton, {\n          width: \"35px\",\n          height: \"35px\",\n          margin: ['5px', '10px', '0px', '10px'],\n          radius: \"50%\"\n        }), __jsx(\"div\", {\n          className: \"jsx-610849184\" + \" \" + \"line-wrap\"\n        }, __jsx(Skeleton, {\n          width: \"55%\",\n          height: \"52px\",\n          margin: ['5px', '0px', '0px', i % 2 !== 0 ? 'auto' : '0px'],\n          radius: \"0%\"\n        }), i % 2 !== 0 ? __jsx(Skeleton, {\n          width: \"55%\",\n          height: \"52px\",\n          margin: ['5px', '0px', '0px', 'auto'],\n          radius: \"0%\"\n        }) : ''));\n      }) : this.state.startMessageNotify ? __jsx(\"div\", {\n        className: \"jsx-610849184\" + \" \" + \"send-first-message\"\n      }, this.state.startMessageNotify) : !this.state.noChatUser && __jsx(PrivateMessageContent, {\n        messagesHaveBeenDeleted: this.__messagesHaveBeenDeleted\n      }), !this.state.skeletonLoading && __jsx(TextAreaMessage, {\n        activeUser: this.props.activeUser,\n        loggedUserId: (_this$props$loggedUse2 = this.props.loggedUser) === null || _this$props$loggedUse2 === void 0 ? void 0 : _this$props$loggedUse2.id,\n        isTyping: this.__isTyping,\n        sendMessage: this.__sendMessage\n      }), __jsx(Modal, {\n        show: this.state.showModal,\n        beforeClose: this.state.beforeClose,\n        close: this.__closeModal\n      }, __jsx(\"div\", {\n        className: \"jsx-610849184\" + \" \" + \"scroll-content\"\n      }, __jsx(\"h2\", {\n        className: \"jsx-610849184\"\n      }, \"Please confirm message\"), __jsx(\"h4\", {\n        className: \"jsx-610849184\"\n      }, \"Your included text\"), __jsx(\"p\", {\n        className: \"jsx-610849184\" + \" \" + \"message-p\"\n      }, this.state.modalData.yourMessage), __jsx(\"h4\", {\n        className: \"jsx-610849184\"\n      }, \"Encrypted text\"), this.state.modalData.warningMsg ? __jsx(\"p\", {\n        className: \"jsx-610849184\" + \" \" + \"warning-message\"\n      }, this.state.modalData.warningMsg) : __jsx(\"p\", {\n        className: \"jsx-610849184\" + \" \" + \"message-p\"\n      }, this.state.modalData.encryptText)), __jsx(UI_ELEMENTS.Button, {\n        background: \"#37415c\",\n        color: \"#fff\",\n        fontSize: 11,\n        type: \"button\",\n        text: 'Send',\n        width: 100,\n        margin: ['20px', '0', '0', 'auto'],\n        onClick: this.__handleSuccess,\n        size: \"sm\"\n      })), __jsx(_JSXStyle, {\n        id: \"610849184\"\n      }, [\".scroll-content.jsx-610849184{max-height:70vh;overflow-x:hidden;}\", \".message-p.jsx-610849184{word-break:break-all;}\", \".warning-message.jsx-610849184{color:#ffa100;}\", \".skeleton-container-messages.jsx-610849184 .line-wrap.jsx-610849184{width:calc(100% - 70px);margin-bottom:10px;}\", \".odd-container-skeleton.jsx-610849184{-webkit-flex-direction:row-reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;}\", \".skeleton-container-messages.jsx-610849184{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\", \".message-content-right.hidden-overlay.jsx-610849184{overflow:hidden;}\", \".message-content-right.skeleton-loading-content.jsx-610849184{overflow:hidden;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}\", \".message-content-right.jsx-610849184{height:calc(100% - 42px);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\", \".empty-message-content.jsx-610849184{-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}\", \".send-first-message.jsx-610849184{text-align:center;font-size:20px;margin-bottom:16px;}\", \".no-chat-user.jsx-610849184{background-image:url('./assets/images/nochat.png');background-position:center;background-repeat:no-repeat;opacity:.2;}\"]));\n    }\n  }]);\n\n  return Messages;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loggedUser: state.chat.loggedUser,\n    activeUser: state.chat.activeUser,\n    usersList: state.chat.myChatUsers,\n    isShowModal: state.chat.isShowModal,\n    encryptData: state.chat.encryptData,\n    messages: state.chat.activeUserMessages\n  };\n};\n\nvar mapDispatchToProps = {\n  __SET_ENCRYPT_DATA: __SET_ENCRYPT_DATA\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);","map":null,"metadata":{},"sourceType":"module"}