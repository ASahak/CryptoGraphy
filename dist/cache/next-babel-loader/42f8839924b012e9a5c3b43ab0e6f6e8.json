{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar Caesar = /*#__PURE__*/function () {\n  function Caesar() {\n    _classCallCheck(this, Caesar);\n  }\n\n  _createClass(Caesar, null, [{\n    key: \"doCrypt\",\n    value: function doCrypt(isDecrypt, msg, shift, callback) {\n      if (!/^-?\\d+$/.test(shift)) {\n        callback(\"Shift is not an integer\");\n        return;\n      }\n\n      var _shift = parseInt(shift, 10);\n\n      if (_shift < 0 || _shift >= 26) {\n        callback(\"Shift is out of range! (please include 1 - 25 digits only)\");\n        return;\n      }\n\n      if (isDecrypt) {\n        _shift = (26 - _shift) % 26;\n      }\n\n      return this.caesarShift(msg, _shift);\n    }\n    /*\r\n     * Returns the result of having each alphabetic letter of the given text string shifted forward\r\n     * by the given amount, with wraparound. Case is preserved, and non-letters are unchanged.\r\n     * Examples:\r\n     * - caesarShift(\"abz\",  0) = \"abz\".\r\n     * - caesarShift(\"abz\",  1) = \"bca\".\r\n     * - caesarShift(\"abz\", 25) = \"zay\".\r\n     * - caesarShift(\"THe 123 !@#$\", 13) = \"GUr 123 !@#$\".\r\n     */\n\n  }, {\n    key: \"caesarShift\",\n    value: function caesarShift(text, shift) {\n      var result = \"\";\n\n      for (var i = 0; i < text.length; i++) {\n        var c = text.charCodeAt(i);\n        if (65 <= c && c <= 90) result += String.fromCharCode((c - 65 + shift) % 26 + 65); // Uppercase\n        else if (97 <= c && c <= 122) result += String.fromCharCode((c - 97 + shift) % 26 + 97); // Lowercase\n          else result += text.charAt(i); // Copy\n      }\n\n      return result;\n    }\n  }]);\n\n  return Caesar;\n}();\n\nexport { Caesar as default };","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/Caesar.js"],"names":["Caesar","isDecrypt","msg","shift","callback","test","_shift","parseInt","caesarShift","text","result","i","length","c","charCodeAt","String","fromCharCode","charAt"],"mappings":";;;IAAqBA,M;;;;;;;4BACDC,S,EAAWC,G,EAAKC,K,EAAOC,Q,EAAU;AAC7C,UAAI,CAAC,UAAUC,IAAV,CAAeF,KAAf,CAAL,EAA4B;AACxBC,QAAAA,QAAQ,CAAC,yBAAD,CAAR;AACA;AACH;;AACD,UAAIE,MAAM,GAAGC,QAAQ,CAACJ,KAAD,EAAQ,EAAR,CAArB;;AACA,UAAIG,MAAM,GAAG,CAAT,IAAcA,MAAM,IAAI,EAA5B,EAAgC;AAC5BF,QAAAA,QAAQ,CAAC,4DAAD,CAAR;AACA;AACH;;AACD,UAAIH,SAAJ,EAAe;AACXK,QAAAA,MAAM,GAAG,CAAC,KAAKA,MAAN,IAAgB,EAAzB;AACH;;AACD,aAAQ,KAAKE,WAAL,CAAiBN,GAAjB,EAAsBI,MAAtB,CAAR;AACH;AAED;;;;;;;;;;;;gCASoBG,I,EAAMN,K,EAAO;AAC7B,UAAIO,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAIE,CAAC,GAAGJ,IAAI,CAACK,UAAL,CAAgBH,CAAhB,CAAR;AACA,YAAS,MAAME,CAAN,IAAWA,CAAC,IAAK,EAA1B,EAA8BH,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACH,CAAC,GAAG,EAAJ,GAASV,KAAV,IAAmB,EAAnB,GAAwB,EAA5C,CAAV,CAA9B,CAA0F;AAA1F,aACK,IAAI,MAAMU,CAAN,IAAWA,CAAC,IAAI,GAApB,EAAyBH,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACH,CAAC,GAAG,EAAJ,GAASV,KAAV,IAAmB,EAAnB,GAAwB,EAA5C,CAAV,CAAzB,CAAqF;AAArF,eACyBO,MAAM,IAAID,IAAI,CAACQ,MAAL,CAAYN,CAAZ,CAAV,CAJI,CAIuB;AAC5D;;AACD,aAAOD,MAAP;AACH;;;;;;SAnCgBV,M","sourcesContent":["export default class Caesar {\r\n    static doCrypt (isDecrypt, msg, shift, callback) {\r\n        if (!/^-?\\d+$/.test(shift)) {\r\n            callback(\"Shift is not an integer\");\r\n            return;\r\n        }\r\n        let _shift = parseInt(shift, 10);\r\n        if (_shift < 0 || _shift >= 26) {\r\n            callback(\"Shift is out of range! (please include 1 - 25 digits only)\");\r\n            return;\r\n        }\r\n        if (isDecrypt) {\r\n            _shift = (26 - _shift) % 26;\r\n        }\r\n        return  this.caesarShift(msg, _shift);\r\n    }\r\n\r\n    /*\r\n     * Returns the result of having each alphabetic letter of the given text string shifted forward\r\n     * by the given amount, with wraparound. Case is preserved, and non-letters are unchanged.\r\n     * Examples:\r\n     * - caesarShift(\"abz\",  0) = \"abz\".\r\n     * - caesarShift(\"abz\",  1) = \"bca\".\r\n     * - caesarShift(\"abz\", 25) = \"zay\".\r\n     * - caesarShift(\"THe 123 !@#$\", 13) = \"GUr 123 !@#$\".\r\n     */\r\n    static caesarShift (text, shift) {\r\n        let result = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            let c = text.charCodeAt(i);\r\n            if      (65 <= c && c <=  90) result += String.fromCharCode((c - 65 + shift) % 26 + 65);  // Uppercase\r\n            else if (97 <= c && c <= 122) result += String.fromCharCode((c - 97 + shift) % 26 + 97);  // Lowercase\r\n            else                          result += text.charAt(i);  // Copy\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}