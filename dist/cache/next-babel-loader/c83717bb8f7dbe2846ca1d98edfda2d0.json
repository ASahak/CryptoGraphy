{"ast":null,"code":"\"use strict\";\n\nexport default class Vigenere {\n  static doCryptVigenere(isDecrypt, value, key, callback) {\n    if (key.length === 0) {\n      callback(\"Key is empty\");\n      return;\n    }\n\n    let keyDouble = this.filterKey(key);\n\n    if (keyDouble.length === 0) {\n      callback(\"Key has no letters\");\n      return;\n    }\n\n    if (isDecrypt) {\n      for (let i = 0; i < keyDouble.length; i++) keyDouble[i] = (26 - keyDouble[i]) % 26;\n    }\n\n    return this.crypt(value, keyDouble);\n  }\n  /*\r\n   * Returns the result the Vigenere encryption on the given text with the given key.\r\n   */\n\n\n  static crypt(input, key) {\n    let output = \"\";\n\n    for (let i = 0, j = 0; i < input.length; i++) {\n      let c = input.charCodeAt(i);\n\n      if (this.isUppercase(c)) {\n        output += String.fromCharCode((c - 65 + key[j % key.length]) % 26 + 65);\n        j++;\n      } else if (this.isLowercase(c)) {\n        output += String.fromCharCode((c - 97 + key[j % key.length]) % 26 + 97);\n        j++;\n      } else {\n        output += input.charAt(i);\n      }\n    }\n\n    return output;\n  }\n  /*\r\n   * Returns an array of numbers, each in the range [0, 26), representing the given key.\r\n   * The key is case-insensitive, and non-letters are ignored.\r\n   * Examples:\r\n   * - filterKey(\"AAA\") = [0, 0, 0].\r\n   * - filterKey(\"abc\") = [0, 1, 2].\r\n   * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\r\n   */\n\n\n  static filterKey(key) {\n    let result = [];\n\n    for (let i = 0; i < key.length; i++) {\n      let c = key.charCodeAt(i);\n      if (this.isLetter(c)) result.push((c - 65) % 32);\n    }\n\n    return result;\n  } // Tests whether the specified character code is a letter.\n\n\n  static isLetter(c) {\n    return this.isUppercase(c) || this.isLowercase(c);\n  } // Tests whether the specified character code is an uppercase letter.\n\n\n  static isUppercase(c) {\n    return 65 <= c && c <= 90; // 65 is character code for 'A'. 90 is 'Z'.\n  } // Tests whether the specified character code is a lowercase letter.\n\n\n  static isLowercase(c) {\n    return 97 <= c && c <= 122; // 97 is character code for 'a'. 122 is 'z'.\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}