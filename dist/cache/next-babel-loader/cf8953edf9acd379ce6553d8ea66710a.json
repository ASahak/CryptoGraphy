{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar bigInt = require('big-integer');\n\nvar RSA = /*#__PURE__*/function () {\n  function RSA() {\n    _classCallCheck(this, RSA);\n  }\n\n  _createClass(RSA, null, [{\n    key: \"randomPrime\",\n    value: function randomPrime(bits) {\n      var min = bigInt.one.shiftLeft(bits - 1);\n      var max = bigInt.one.shiftLeft(bits).prev();\n\n      while (true) {\n        var p = bigInt.randBetween(min, max);\n\n        if (p.isProbablePrime(256)) {\n          return p;\n        }\n      }\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(keysize) {\n      var e = bigInt(65537);\n      var p;\n      var q;\n      var totient;\n\n      do {\n        p = this.randomPrime(keysize / 2);\n        q = this.randomPrime(keysize / 2);\n        totient = bigInt.lcm(p.prev(), q.prev());\n      } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\n\n      return {\n        e: e,\n        n: p.multiply(q),\n        d: e.modInv(totient)\n      };\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(encodedMsg, n, e) {\n      return bigInt(encodedMsg).modPow(e, n);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(encryptedMsg, d, n) {\n      return bigInt(encryptedMsg).modPow(d, n);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(str) {\n      var codes = str.split('').map(function (i) {\n        return i.charCodeAt();\n      }).join('');\n      return bigInt(codes);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(code) {\n      var stringified = code.toString();\n      var string = '';\n\n      for (var i = 0; i < stringified.length; i += 2) {\n        var num = Number(stringified.substr(i, 2));\n\n        if (num <= 30) {\n          string += String.fromCharCode(Number(stringified.substr(i, 3)));\n          i++;\n        } else {\n          string += String.fromCharCode(num);\n        }\n      }\n\n      return string;\n    }\n  }]);\n\n  return RSA;\n}();\n\nexport { RSA as default };","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/RSA.js"],"names":["bigInt","require","RSA","bits","min","one","shiftLeft","max","prev","p","randBetween","isProbablePrime","keysize","e","q","totient","randomPrime","lcm","gcd","notEquals","minus","abs","shiftRight","isZero","n","multiply","d","modInv","encodedMsg","modPow","encryptedMsg","str","codes","split","map","i","charCodeAt","join","code","stringified","toString","string","length","num","Number","substr","String","fromCharCode"],"mappings":"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","sourcesContent":["const bigInt = require('big-integer');\r\n\r\nexport default class RSA {\r\n\r\n    static randomPrime(bits) {\r\n        const min = bigInt.one.shiftLeft(bits - 1);\r\n        const max = bigInt.one.shiftLeft(bits).prev();\r\n\r\n        while (true) {\r\n            let p = bigInt.randBetween(min, max);\r\n            if (p.isProbablePrime(256)) {\r\n                return p;\r\n            }\r\n        }\r\n    }\r\n\r\n    static generate(keysize) {\r\n        const e = bigInt(65537);\r\n        let p;\r\n        let q;\r\n        let totient;\r\n\r\n        do {\r\n            p = this.randomPrime(keysize / 2);\r\n            q = this.randomPrime(keysize / 2);\r\n            totient = bigInt.lcm(\r\n                p.prev(),\r\n                q.prev()\r\n            );\r\n        } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\r\n\r\n        return {\r\n            e,\r\n            n: p.multiply(q),\r\n            d: e.modInv(totient),\r\n        };\r\n    }\r\n\r\n    static encrypt(encodedMsg, n, e) {\r\n        return bigInt(encodedMsg).modPow(e, n);\r\n    }\r\n\r\n    static decrypt(encryptedMsg, d, n) {\r\n        return bigInt(encryptedMsg).modPow(d, n);\r\n    }\r\n\r\n    static encode(str) {\r\n        const codes = str\r\n            .split('')\r\n            .map(i => i.charCodeAt())\r\n            .join('');\r\n\r\n        return bigInt(codes);\r\n    }\r\n\r\n    static decode(code) {\r\n        const stringified = code.toString();\r\n        let string = '';\r\n\r\n        for (let i = 0; i < stringified.length; i += 2) {\r\n            let num = Number(stringified.substr(i, 2));\r\n\r\n            if (num <= 30) {\r\n                string += String.fromCharCode(Number(stringified.substr(i, 3)));\r\n                i++;\r\n            } else {\r\n                string += String.fromCharCode(num);\r\n            }\r\n        }\r\n\r\n        return string;\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}