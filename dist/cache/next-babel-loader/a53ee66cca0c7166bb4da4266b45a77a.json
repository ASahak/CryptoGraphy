{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime-corejs2/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime-corejs2/helpers/esm/wrapAsyncGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(__SET_LOGGED),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(_rootSaga);\n\nimport { all, put } from 'redux-saga/effects';\nimport { __CHANGE_IS_LOGGED, __SET_MY_USERS_CHAT, __SET_ALL_CHAT_USERS, __SET_ACTIVE_USER, __SET_ACTIVE_USER_MESSAGES } from '../actions';\nimport store from 'store';\nimport fire from \"config/fire\";\nexport function __SET_LOGGED(action) {\n  return _regeneratorRuntime.wrap(function __SET_LOGGED$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(store.dispatch(__CHANGE_IS_LOGGED(action)));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function __GET_ALL_USERS(_x) {\n  return _GET_ALL_USERS.apply(this, arguments);\n}\n\nfunction _GET_ALL_USERS() {\n  _GET_ALL_USERS = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var db, fakeObj;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!data) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return put(store.dispatch(__SET_ALL_CHAT_USERS(null)));\n\n          case 3:\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            db = fire.firestore();\n            fakeObj = [];\n            _context2.next = 8;\n            return _awaitAsyncGenerator(db.collection('users').get().then(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                var _data = doc.data();\n\n                delete _data.messages;\n                fakeObj.push(_objectSpread({}, _data));\n              });\n            }));\n\n          case 8:\n            _context2.next = 10;\n            return put(store.dispatch(__SET_ALL_CHAT_USERS(fakeObj)));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GET_ALL_USERS.apply(this, arguments);\n}\n\nvar unsubscribeUsers;\nexport function __GET_CHAT_USERS(_x2) {\n  return _GET_CHAT_USERS.apply(this, arguments);\n}\n\nfunction _GET_CHAT_USERS() {\n  _GET_CHAT_USERS = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n    var db, usersData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (unsubscribeUsers) unsubscribeUsers();\n            db = fire.firestore();\n            usersData = [];\n\n            if (!data) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 6;\n            return put(store.dispatch(__SET_MY_USERS_CHAT(data)));\n\n          case 6:\n            _context3.next = 11;\n            break;\n\n          case 8:\n            unsubscribeUsers = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                var _store$getState$chat$, _usersData$;\n\n                usersData = doc.data().messages;\n                var userId = ((_store$getState$chat$ = store.getState().chat.activeUser) === null || _store$getState$chat$ === void 0 ? void 0 : _store$getState$chat$.id) || ((_usersData$ = usersData[0]) === null || _usersData$ === void 0 ? void 0 : _usersData$.id);\n                doc.data().messages.forEach(function (user, index) {\n                  if (user.id === userId) {\n                    var _cloneActiveUser = JSON.parse(_JSON$stringify(usersData[index]));\n\n                    _cloneActiveUser.letters = _cloneActiveUser.letters.slice(-1).pop();\n                    store.dispatch(__SET_ACTIVE_USER(_cloneActiveUser));\n                  }\n\n                  usersData[index].letters = user.letters.slice(-1).pop();\n                });\n                store.dispatch(__SET_MY_USERS_CHAT(usersData));\n              });\n            });\n            _context3.next = 11;\n            return usersData;\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _GET_CHAT_USERS.apply(this, arguments);\n}\n\nexport function __CHANGE_IS_SEEN(_x3) {\n  return _CHANGE_IS_SEEN.apply(this, arguments);\n}\n\nfunction _CHANGE_IS_SEEN() {\n  _CHANGE_IS_SEEN = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {\n    var senderID, myID, db;\n    return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            senderID = _ref.senderID, myID = _ref.myID;\n            // Change my seen\n            db = fire.firestore();\n            _context4.next = 4;\n            return _awaitAsyncGenerator(db.collection('users').doc(myID).get().then(function (res) {\n              var _res$data;\n\n              var myObj = db.doc(\"users/\".concat(myID));\n\n              var _messagesMy = (_res$data = res.data()) === null || _res$data === void 0 ? void 0 : _res$data.messages;\n\n              if (!_messagesMy) return;\n\n              var _findIndex = res.data().messages.findIndex(function (item) {\n                return item.id === senderID;\n              });\n\n              if (_findIndex !== -1) {\n                _messagesMy[_findIndex].isSeen = true;\n                _messagesMy[_findIndex].countMessagesDelivered = 0;\n              }\n\n              myObj.update('messages', _messagesMy);\n            }));\n\n          case 4:\n            _context4.next = 6;\n            return _awaitAsyncGenerator(db.collection('users').doc(senderID).get().then(function (res) {\n              var _res$data2;\n\n              var senderObj = db.doc(\"users/\".concat(senderID));\n\n              var _messagesMy = (_res$data2 = res.data()) === null || _res$data2 === void 0 ? void 0 : _res$data2.messages;\n\n              if (!_messagesMy) return;\n\n              var _findIndex = res.data().messages.findIndex(function (item) {\n                return item.id === myID;\n              });\n\n              if (_findIndex !== -1) {\n                _messagesMy[_findIndex].isSeen = true;\n                _messagesMy[_findIndex].countMessagesDelivered = 0;\n              }\n\n              senderObj.update('messages', _messagesMy);\n            }));\n\n          case 6:\n            _context4.next = 8;\n            return;\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _CHANGE_IS_SEEN.apply(this, arguments);\n}\n\nvar unsubscribe;\nexport function __GET_ACTIVE_USERS_MESSAGES(_x4) {\n  return _GET_ACTIVE_USERS_MESSAGES.apply(this, arguments);\n}\n\nfunction _GET_ACTIVE_USERS_MESSAGES() {\n  _GET_ACTIVE_USERS_MESSAGES = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n    var _messages, db;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (unsubscribe) {\n              unsubscribe();\n            }\n\n            _messages = [];\n            db = fire.firestore();\n            _context5.next = 5;\n            return _awaitAsyncGenerator(new _Promise(function (resolve) {\n              unsubscribe = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(function (res) {\n                res.forEach(function (doc) {\n                  var _doc$data;\n\n                  var _findIndex = (_doc$data = doc.data()) === null || _doc$data === void 0 ? void 0 : _doc$data.messages.findIndex(function (item) {\n                    return item.id === data;\n                  });\n\n                  if (_findIndex !== -1) {\n                    _messages = doc.data().messages[_findIndex];\n                    store.dispatch(__SET_ACTIVE_USER_MESSAGES(_toConsumableArray(_messages.letters)));\n                    resolve();\n                  }\n                });\n              });\n            }));\n\n          case 5:\n            _context5.next = 7;\n            return _messages;\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _GET_ACTIVE_USERS_MESSAGES.apply(this, arguments);\n}\n\nexport function __IS_TYPING_TO_ACTIVE_USER(_x5, _x6, _x7) {\n  return _IS_TYPING_TO_ACTIVE_USER.apply(this, arguments);\n}\n\nfunction _IS_TYPING_TO_ACTIVE_USER() {\n  _IS_TYPING_TO_ACTIVE_USER = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(hint, toUserId, myId) {\n    var friendUsers, db;\n    return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            friendUsers = null;\n            db = fire.firestore();\n            _context6.next = 4;\n            return _awaitAsyncGenerator(db.collection('users').doc(toUserId).get().then(function (res) {\n              var myObj = db.doc(\"users/\".concat(toUserId));\n              friendUsers = res.data();\n              var _messagesMy = res.data().messages;\n\n              var _findIndex = res.data().messages.findIndex(function (item) {\n                return item.id === myId;\n              });\n\n              if (_findIndex !== -1) {\n                _messagesMy[_findIndex].isTyping = hint;\n                myObj.update('messages', _messagesMy);\n              }\n            }));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _IS_TYPING_TO_ACTIVE_USER.apply(this, arguments);\n}\n\nexport function __GO_PRIVATE_CHAT(_x8, _x9) {\n  return _GO_PRIVATE_CHAT.apply(this, arguments);\n}\n\nfunction _GO_PRIVATE_CHAT() {\n  _GO_PRIVATE_CHAT = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(idUser, loggedId) {\n    var usersData, findActiveUser, friendChatMyObj;\n    return _regeneratorRuntime.wrap(function _callee6$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            usersData = store.getState().chat.myChatUsers;\n            findActiveUser = usersData.find(function (user) {\n              return user.id === idUser;\n            });\n\n            if (findActiveUser) {\n              store.dispatch(__SET_ACTIVE_USER(findActiveUser));\n            }\n\n            friendChatMyObj = {};\n            _context7.next = 6;\n            return _awaitAsyncGenerator(__CHANGE_IS_SEEN({\n              senderID: idUser,\n              myID: loggedId\n            }).next());\n\n          case 6:\n            _context7.next = 8;\n            return friendChatMyObj;\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _GO_PRIVATE_CHAT.apply(this, arguments);\n}\n\nvar unsubscribeAddMessageMy;\nvar unsubscribeAddMessageFriend;\nexport function __ADD_MESSAGE(_x10) {\n  return _ADD_MESSAGE.apply(this, arguments);\n}\n\nfunction _ADD_MESSAGE() {\n  _ADD_MESSAGE = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref2) {\n    var friend, my, db, updateMyUsers, friendUsers, updateFriendUsers;\n    return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            friend = _ref2.friend, my = _ref2.my;\n            if (unsubscribeAddMessageMy) unsubscribeAddMessageMy();\n            if (unsubscribeAddMessageFriend) unsubscribeAddMessageFriend();\n            db = fire.firestore();\n            updateMyUsers = db.collection('users').doc(my.loggedUser.id);\n            friendUsers = {};\n            _context8.next = 8;\n            return _awaitAsyncGenerator(db.collection('users').doc(my.friendId).get().then(function (res) {\n              friendUsers = res.data();\n            }));\n\n          case 8:\n            unsubscribeAddMessageMy = updateMyUsers.onSnapshot(function (querySnapshot) {\n              var myUsers = querySnapshot.data();\n              if (!myUsers) return;\n\n              var _findIndex = myUsers.messages.findIndex(function (item) {\n                return item.id === my.friendId;\n              });\n\n              if (_findIndex === -1) {\n                myUsers.messages.unshift({\n                  id: my.friendId,\n                  isSeen: true,\n                  isTyping: false,\n                  isSender: true,\n                  countMessagesDelivered: 0,\n                  color: friendUsers.color,\n                  fullName: friendUsers.fullName,\n                  letters: [my.msgData]\n                });\n                updateMyUsers.update('messages', myUsers.messages);\n              } else if (!myUsers.messages[_findIndex].letters.filter(function (msg) {\n                return msg.time === my.msgData.time;\n              }).length) {\n                var _saveData = myUsers.messages[_findIndex];\n\n                if (myUsers.messages[_findIndex].letters.length === 1 && myUsers.messages[_findIndex].letters[0].time === null) {\n                  myUsers.messages[_findIndex].letters[0] = my.msgData;\n                } else {\n                  myUsers.messages[_findIndex].letters.push(my.msgData);\n                }\n\n                myUsers.messages[_findIndex].isSeen = false;\n                myUsers.messages[_findIndex].isTyping = false;\n                myUsers.messages[_findIndex].isSender = true;\n                myUsers.messages.splice(_findIndex, 1);\n                myUsers.messages.unshift(_saveData);\n                updateMyUsers.update('messages', myUsers.messages);\n              }\n            });\n\n            if (friend) {\n              _context8.next = 11;\n              break;\n            }\n\n            return _context8.abrupt(\"return\");\n\n          case 11:\n            updateFriendUsers = db.collection('users').doc(friend.friendId);\n            unsubscribeAddMessageFriend = updateFriendUsers.onSnapshot(function (querySnapshot) {\n              var friendUsers = querySnapshot.data();\n              if (!friendUsers) return;\n\n              var _findIndex = friendUsers.messages.findIndex(function (item) {\n                var _friend$loggedUser;\n\n                return item.id === ((_friend$loggedUser = friend.loggedUser) === null || _friend$loggedUser === void 0 ? void 0 : _friend$loggedUser.id);\n              });\n\n              if (_findIndex === -1) {\n                friendUsers.messages.push({\n                  id: friend.loggedUser.id,\n                  color: friend.loggedUser.color,\n                  isSeen: false,\n                  isSender: false,\n                  isTyping: false,\n                  countMessagesDelivered: 1,\n                  fullName: friend.loggedUser.fullName,\n                  letters: [friend.msgData]\n                });\n                updateFriendUsers.update('messages', friendUsers.messages);\n              } else if (!friendUsers.messages[_findIndex].letters.filter(function (msg) {\n                return msg.time === friend.msgData.time;\n              }).length) {\n                if (friendUsers.messages[_findIndex].letters.length === 1 && friendUsers.messages[_findIndex].letters[0].time === null) {\n                  friendUsers.messages[_findIndex].letters[0] = friend.msgData;\n                } else {\n                  friendUsers.messages[_findIndex].letters.push(friend.msgData);\n                }\n\n                friendUsers.messages[_findIndex].isSeen = false;\n                friendUsers.messages[_findIndex].countMessagesDelivered += 1;\n                friendUsers.messages[_findIndex].isSender = false;\n                friendUsers.messages[_findIndex].isTyping = false;\n                updateFriendUsers.update('messages', friendUsers.messages);\n              }\n            });\n            _context8.next = 15;\n            return;\n\n          case 15:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _ADD_MESSAGE.apply(this, arguments);\n}\n\nvar unsubscribeRemoveMy;\nvar unsubscribeRemoveFriend;\nexport function __REMOVE_MESSAGE(_x11, _x12) {\n  return _REMOVE_MESSAGE.apply(this, arguments);\n}\n\nfunction _REMOVE_MESSAGE() {\n  _REMOVE_MESSAGE = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(time, _ref3) {\n    var idUser, myId, db, updateFriendUsers, friendUsers, updateMyUsers, myUsers;\n    return _regeneratorRuntime.wrap(function _callee8$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            idUser = _ref3.idUser, myId = _ref3.myId;\n            if (unsubscribeRemoveMy) unsubscribeRemoveMy();\n            if (unsubscribeRemoveFriend) unsubscribeRemoveFriend();\n            db = fire.firestore();\n            updateFriendUsers = null, friendUsers = null, updateMyUsers = null, myUsers = null;\n            _context9.next = 7;\n            return _awaitAsyncGenerator(db.collection('users').doc(idUser).onSnapshot(function (snapshot) {\n              updateFriendUsers = db.doc(\"users/\".concat(snapshot.data().id));\n              friendUsers = snapshot.data();\n              if (!friendUsers) return;\n\n              var _findIndexInFriend = friendUsers.messages.findIndex(function (item) {\n                return item.id === myId;\n              });\n\n              var foundedItem = friendUsers.messages[_findIndexInFriend].letters.findIndex(function (msg) {\n                return msg.time === time;\n              });\n\n              if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed) return;\n\n              if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem]) {\n                friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed = true;\n                friendUsers.messages[_findIndexInFriend].removedMessageIndex = foundedItem;\n              }\n\n              updateFriendUsers.update('messages', friendUsers.messages);\n            }));\n\n          case 7:\n            unsubscribeRemoveFriend = _context9.sent;\n            unsubscribeRemoveMy = db.collection('users').doc(myId).onSnapshot(function (snapshot) {\n              updateMyUsers = db.doc(\"users/\".concat(snapshot.data().id));\n              myUsers = snapshot.data();\n              if (!myUsers) return;\n\n              var _findIndexInMy = myUsers.messages.findIndex(function (item) {\n                return item.id === idUser;\n              });\n\n              var foundedItem = myUsers.messages[_findIndexInMy].letters.findIndex(function (msg) {\n                return msg.time === time;\n              });\n\n              if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem].removed) return;\n\n              if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem]) {\n                myUsers.messages[_findIndexInMy].letters[foundedItem].removed = true;\n                myUsers.messages[_findIndexInMy].removedMessageIndex = foundedItem;\n              }\n\n              updateMyUsers.update('messages', myUsers.messages);\n            });\n            _context9.next = 11;\n            return;\n\n          case 11:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _REMOVE_MESSAGE.apply(this, arguments);\n}\n\nexport function __EDIT_MESSAGE(_x13, _x14, _x15) {\n  return _EDIT_MESSAGE.apply(this, arguments);\n}\n\nfunction _EDIT_MESSAGE() {\n  _EDIT_MESSAGE = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(msgData, index, _ref4) {\n    var idUser, myId, db, updateFriendUsers, friendUsers, updateMyUsers, myUsers;\n    return _regeneratorRuntime.wrap(function _callee11$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            idUser = _ref4.idUser, myId = _ref4.myId;\n            db = fire.firestore();\n            updateFriendUsers = null, friendUsers = null, updateMyUsers = null, myUsers = null;\n            _context12.next = 5;\n            return _awaitAsyncGenerator(db.collection('users').doc(idUser).get().then(function _callee9(res) {\n              var _findIndexInFriend;\n\n              return _regeneratorRuntime.async(function _callee9$(_context10) {\n                while (1) {\n                  switch (_context10.prev = _context10.next) {\n                    case 0:\n                      updateFriendUsers = db.doc(\"users/\".concat(res.data().id));\n                      friendUsers = res.data();\n\n                      if (friendUsers) {\n                        _context10.next = 4;\n                        break;\n                      }\n\n                      return _context10.abrupt(\"return\");\n\n                    case 4:\n                      _findIndexInFriend = friendUsers.messages.findIndex(function (item) {\n                        return item.id === myId;\n                      });\n\n                      if (!msgData) {\n                        friendUsers.messages[_findIndexInFriend].editedMsgIndex = -1;\n                        friendUsers.messages[_findIndexInFriend].countMessagesDelivered = 0;\n                        friendUsers.messages[_findIndexInFriend].isSeen = true;\n                        friendUsers.messages[_findIndexInFriend].isSender = true;\n                        friendUsers.messages[_findIndexInFriend].isTyping = false;\n                      } else if (_findIndexInFriend !== -1) {\n                        friendUsers.messages[_findIndexInFriend].editedMsgIndex = index;\n                        friendUsers.messages[_findIndexInFriend].letters[index] = _objectSpread({}, friendUsers.messages[_findIndexInFriend].letters[index], {\n                          decryptedMsg: msgData.d,\n                          encryptedMsg: msgData.e,\n                          message: msgData.value,\n                          edited: true\n                        });\n                      }\n\n                      _context10.next = 8;\n                      return _regeneratorRuntime.awrap(updateFriendUsers.update('messages', friendUsers.messages));\n\n                    case 8:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }\n              }, null, null, null, _Promise);\n            }));\n\n          case 5:\n            _context12.next = 7;\n            return _awaitAsyncGenerator(db.collection('users').doc(myId).get().then(function _callee10(res) {\n              var _findIndexInMy;\n\n              return _regeneratorRuntime.async(function _callee10$(_context11) {\n                while (1) {\n                  switch (_context11.prev = _context11.next) {\n                    case 0:\n                      updateMyUsers = db.doc(\"users/\".concat(res.data().id));\n                      myUsers = res.data();\n\n                      if (myUsers) {\n                        _context11.next = 4;\n                        break;\n                      }\n\n                      return _context11.abrupt(\"return\");\n\n                    case 4:\n                      _findIndexInMy = myUsers.messages.findIndex(function (item) {\n                        return item.id === idUser;\n                      });\n\n                      if (!msgData) {\n                        myUsers.messages[_findIndexInMy].editedMsgIndex = -1;\n                        myUsers.messages[_findIndexInMy].countMessagesDelivered = 0;\n                        myUsers.messages[_findIndexInMy].isSeen = true;\n                        myUsers.messages[_findIndexInMy].isSender = true;\n                        myUsers.messages[_findIndexInMy].isTyping = false;\n                      } else if (_findIndexInMy !== -1) {\n                        myUsers.messages[_findIndexInMy].editedMsgIndex = index;\n                        myUsers.messages[_findIndexInMy].letters[index] = _objectSpread({}, myUsers.messages[_findIndexInMy].letters[index], {\n                          decryptedMsg: msgData.d,\n                          encryptedMsg: msgData.e,\n                          message: msgData.value,\n                          edited: true\n                        });\n                      }\n\n                      _context11.next = 8;\n                      return _regeneratorRuntime.awrap(updateMyUsers.update('messages', myUsers.messages));\n\n                    case 8:\n                    case \"end\":\n                      return _context11.stop();\n                  }\n                }\n              }, null, null, null, _Promise);\n            }));\n\n          case 7:\n            _context12.next = 9;\n            return;\n\n          case 9:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _EDIT_MESSAGE.apply(this, arguments);\n}\n\nexport function _rootSaga() {\n  return _regeneratorRuntime.wrap(function _rootSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([__SET_LOGGED, __GET_CHAT_USERS, __GET_ALL_USERS, __CHANGE_IS_SEEN, __GET_ACTIVE_USERS_MESSAGES, __IS_TYPING_TO_ACTIVE_USER, __GO_PRIVATE_CHAT, __EDIT_MESSAGE, __REMOVE_MESSAGE, __ADD_MESSAGE]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}