{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport function useDebounce(value, delay) {\n  // State and setters for debounced value\n  var _useState = useState(value),\n      debouncedValue = _useState[0],\n      setDebouncedValue = _useState[1];\n\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\nexport function classDebounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this,\n        args = arguments;\n\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}