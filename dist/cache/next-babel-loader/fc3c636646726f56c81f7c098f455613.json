{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class Vernam {\n  static generateRandomStringByAmount(length) {\n    let result = '';\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let charactersLength = characters.length;\n\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n  static doEncrypt(msg, callback) {\n    const sum = [];\n    const enc = [];\n    this.letters = new Array(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\");\n    let input = msg.toUpperCase();\n    let key = this.generateRandomStringByAmount(msg.length).toUpperCase();\n    let inputIndex;\n    callback(key);\n\n    for (let i = 0; i < msg.length; i++) {\n      inputIndex = this.letters.indexOf(input[i]);\n      let keyIndex = this.letters.indexOf(key[i]);\n      sum[i] = inputIndex + keyIndex;\n\n      if (sum[i] >= 26) {\n        sum[i] = sum[i] % 26;\n      }\n    }\n\n    for (let j = 0; j < msg.length; j++) {\n      enc[j] = this.letters[sum[j]];\n      this.abc[j] = sum[j];\n    }\n\n    const encr = enc.toString();\n    const encrypt = encr.split(\",\").join(\"\");\n    return encrypt;\n  }\n\n  static doDecrypt(msg, key) {\n    const arr = [];\n    const dec = []; // const enter = msg.toUpperCase();\n\n    const keyD = key.toUpperCase();\n\n    for (let k = 0; k < keyD.length; k++) {\n      let xyz = this.letters.indexOf(keyD[k]);\n      arr[k] = this.abc[k] - xyz;\n\n      if (arr[k] < 0) {\n        arr[k] += 26;\n      }\n    }\n\n    for (let m = 0; m < keyD.length; m++) {\n      dec[m] = this.letters[arr[m]];\n    }\n\n    const decr = dec.toString();\n    const decrypt = decr.split(\",\").join(\"\");\n    return decrypt;\n  }\n\n}\n\n_defineProperty(Vernam, \"letters\", []);\n\n_defineProperty(Vernam, \"abc\", []);","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/Vernam.js"],"names":["Vernam","generateRandomStringByAmount","length","result","characters","charactersLength","i","charAt","Math","floor","random","doEncrypt","msg","callback","sum","enc","letters","Array","input","toUpperCase","key","inputIndex","indexOf","keyIndex","j","abc","encr","toString","encrypt","split","join","doDecrypt","arr","dec","keyD","k","xyz","m","decr","decrypt"],"mappings":"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","sourcesContent":["export default class Vernam {\r\n    static letters = [];\r\n    static abc = [];\r\n\r\n    static generateRandomStringByAmount(length) {\r\n        let result           = '';\r\n        let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        let charactersLength = characters.length;\r\n        for ( let i = 0; i < length; i++ ) {\r\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static doEncrypt (msg, callback) {\r\n        const sum = [];\r\n        const enc = [];\r\n        this.letters = new Array(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\");\r\n\r\n        let input = msg.toUpperCase();\r\n        let key = this.generateRandomStringByAmount(msg.length).toUpperCase();\r\n        let inputIndex;\r\n        callback(key);\r\n        for(let i = 0;i < msg.length; i++)\r\n        {\r\n\r\n            inputIndex= this.letters.indexOf(input[i]);\r\n            let keyIndex = this.letters.indexOf(key[i]);\r\n            sum[i] = inputIndex+keyIndex;\r\n            if(sum[i]>=26)\r\n            {\r\n                sum[i]=sum[i]%26;\r\n            }\r\n\r\n        }\r\n        for(let j = 0; j < msg.length; j++){\r\n            enc[j] = this.letters[sum[j]];\r\n            this.abc[j] = sum[j];\r\n\r\n        }\r\n        const encr = enc.toString();\r\n        const encrypt = encr.split(\",\").join(\"\");\r\n        return encrypt\r\n    }\r\n    static doDecrypt (msg, key) {\r\n        const arr = [];\r\n        const dec = [];\r\n        // const enter = msg.toUpperCase();\r\n        const keyD = key.toUpperCase();\r\n        for(let k = 0; k < keyD.length; k++){\r\n            let xyz= this.letters.indexOf(keyD[k]);\r\n            arr[k] = this.abc[k]-xyz;\r\n            if(arr[k]<0)\r\n            {\r\n                arr[k]+=26;\r\n            }\r\n        }\r\n        for(let m = 0; m < keyD.length; m++)\r\n        {\r\n            dec[m] = this.letters[arr[m]];\r\n        }\r\n        const decr = dec.toString();\r\n        const decrypt = decr.split(\",\").join(\"\");\r\n        return decrypt;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}