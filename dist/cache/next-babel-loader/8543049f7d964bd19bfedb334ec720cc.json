{"ast":null,"code":"\"use strict\";\n\nexport default class Vigenere {\n  static doCryptVigenere(isDecrypt, value, key, callback) {\n    if (key.length === 0) {\n      callback(\"Key is empty\");\n      return;\n    }\n\n    let keyDouble = this.filterKey(key);\n\n    if (keyDouble.length === 0) {\n      callback(\"Key has no letters\");\n      return;\n    }\n\n    if (isDecrypt) {\n      for (let i = 0; i < keyDouble.length; i++) keyDouble[i] = (26 - keyDouble[i]) % 26;\n    }\n\n    return this.crypt(value, keyDouble);\n  }\n  /*\r\n   * Returns the result the Vigenere encryption on the given text with the given key.\r\n   */\n\n\n  static crypt(input, key) {\n    let output = \"\";\n\n    for (let i = 0, j = 0; i < input.length; i++) {\n      let c = input.charCodeAt(i);\n\n      if (this.isUppercase(c)) {\n        output += String.fromCharCode((c - 65 + key[j % key.length]) % 26 + 65);\n        j++;\n      } else if (this.isLowercase(c)) {\n        output += String.fromCharCode((c - 97 + key[j % key.length]) % 26 + 97);\n        j++;\n      } else {\n        output += input.charAt(i);\n      }\n    }\n\n    return output;\n  }\n  /*\r\n   * Returns an array of numbers, each in the range [0, 26), representing the given key.\r\n   * The key is case-insensitive, and non-letters are ignored.\r\n   * Examples:\r\n   * - filterKey(\"AAA\") = [0, 0, 0].\r\n   * - filterKey(\"abc\") = [0, 1, 2].\r\n   * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\r\n   */\n\n\n  static filterKey(key) {\n    let result = [];\n\n    for (let i = 0; i < key.length; i++) {\n      let c = key.charCodeAt(i);\n      if (this.isLetter(c)) result.push((c - 65) % 32);\n    }\n\n    return result;\n  } // Tests whether the specified character code is a letter.\n\n\n  static isLetter(c) {\n    return this.isUppercase(c) || this.isLowercase(c);\n  } // Tests whether the specified character code is an uppercase letter.\n\n\n  static isUppercase(c) {\n    return 65 <= c && c <= 90; // 65 is character code for 'A'. 90 is 'Z'.\n  } // Tests whether the specified character code is a lowercase letter.\n\n\n  static isLowercase(c) {\n    return 97 <= c && c <= 122; // 97 is character code for 'a'. 122 is 'z'.\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/Vigenere.js"],"names":["Vigenere","doCryptVigenere","isDecrypt","value","key","callback","length","keyDouble","filterKey","i","crypt","input","output","j","c","charCodeAt","isUppercase","String","fromCharCode","isLowercase","charAt","result","isLetter","push"],"mappings":"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","sourcesContent":["\"use strict\";\r\nexport default class Vigenere {\r\n\r\n    static doCryptVigenere (isDecrypt, value, key, callback) {\r\n        if (key.length === 0) {\r\n            callback(\"Key is empty\");\r\n            return;\r\n        }\r\n        let keyDouble = this.filterKey(key);\r\n        if (keyDouble.length === 0) {\r\n            callback(\"Key has no letters\");\r\n            return;\r\n        }\r\n        if (isDecrypt) {\r\n            for (let i = 0; i < keyDouble.length; i++)\r\n                keyDouble[i] = (26 - keyDouble[i]) % 26;\r\n        }\r\n        return this.crypt(value, keyDouble);\r\n    }\r\n    /*\r\n     * Returns the result the Vigenere encryption on the given text with the given key.\r\n     */\r\n    static crypt(input, key) {\r\n        let output = \"\";\r\n        for (let i = 0, j = 0; i < input.length; i++) {\r\n            let c = input.charCodeAt(i);\r\n            if (this.isUppercase(c)) {\r\n                output += String.fromCharCode((c - 65 + key[j % key.length]) % 26 + 65);\r\n                j++;\r\n            } else if (this.isLowercase(c)) {\r\n                output += String.fromCharCode((c - 97 + key[j % key.length]) % 26 + 97);\r\n                j++;\r\n            } else {\r\n                output += input.charAt(i);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    /*\r\n     * Returns an array of numbers, each in the range [0, 26), representing the given key.\r\n     * The key is case-insensitive, and non-letters are ignored.\r\n     * Examples:\r\n     * - filterKey(\"AAA\") = [0, 0, 0].\r\n     * - filterKey(\"abc\") = [0, 1, 2].\r\n     * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\r\n     */\r\n    static filterKey(key) {\r\n        let result = [];\r\n        for (let i = 0; i < key.length; i++) {\r\n            let c = key.charCodeAt(i);\r\n            if (this.isLetter(c))\r\n                result.push((c - 65) % 32);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Tests whether the specified character code is a letter.\r\n    static isLetter(c) {\r\n        return this.isUppercase(c) || this.isLowercase(c);\r\n    }\r\n\r\n    // Tests whether the specified character code is an uppercase letter.\r\n    static isUppercase(c) {\r\n        return 65 <= c && c <= 90;  // 65 is character code for 'A'. 90 is 'Z'.\r\n    }\r\n\r\n    // Tests whether the specified character code is a lowercase letter.\r\n    static isLowercase(c) {\r\n        return 97 <= c && c <= 122;  // 97 is character code for 'a'. 122 is 'z'.\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}