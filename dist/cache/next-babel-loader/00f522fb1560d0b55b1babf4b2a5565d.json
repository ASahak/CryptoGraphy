{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as moment from 'moment';\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport Skeleton from 'components/Skeleton';\nimport { __GET_CHAT_USERS, __ADD_MESSAGE, __GO_PRIVATE_CHAT } from 'store/saga';\nimport { __CHANGE_MOBILE_LIST_OPEN, __SET_ACTIVE_USER, __SEND_MOBILE_MESSAGE_NOTIFY } from 'store/actions';\nimport { __detectCryptIcon } from 'components/shared/helpers/global-functions';\nimport NoChatUsers from 'components/elements/NoChatUsers';\nimport CommonRoom from 'components/elements/CommonRoom';\nimport { connect } from 'react-redux';\nimport { Bus } from 'components/shared/helpers/Bus';\n\nvar EveryUser = function EveryUser(props) {\n  return __jsx(\"div\", {\n    onClick: function onClick() {\n      return props.goPrivateChat(props.id);\n    },\n    className: \"user-messages-container \".concat(props.isActiveUser === props.id ? 'active-user' : '', \" \\n          \").concat(props.dataMSG.letters.owner && props.dataMSG.letters.owner !== 'Me' && props.dataMSG.isSeen === false ? 'must-open-message' : '')\n  }, __jsx(UI_ELEMENTS.UserImage, {\n    firstName: props.dataMSG.fullName.split(' ')[0],\n    lastName: props.dataMSG.fullName.split(' ')[1] || '',\n    fill: props.dataMSG.color\n  }), __jsx(\"div\", {\n    className: \"user-message-info\"\n  }, __jsx(\"div\", {\n    className: \"user-message-info_left\"\n  }, __jsx(\"h4\", null, props.dataMSG.fullName + (props.dataMSG.letters.owner && props.dataMSG.letters.owner !== 'Me' && props.dataMSG.isSeen === false ? \" ( \".concat(props.dataMSG.countMessagesDelivered, \" )\") : '')), props.dataMSG.isTyping === true ? __jsx(\"div\", {\n    className: \"spinner\"\n  }, __jsx(\"div\", {\n    className: \"bounce1\"\n  }), __jsx(\"div\", {\n    className: \"bounce2\"\n  }), __jsx(\"div\", {\n    className: \"bounce3\"\n  })) : __jsx(\"p\", null, props.dataMSG.letters && props.dataMSG.letters.message ? __detectCryptIcon(props.dataMSG.letters) ? __jsx(\"img\", {\n    src: \"./assets/images/key.png\",\n    alt: \"iconKey\"\n  }) : props.dataMSG.letters.message : 'No messages yet')), __jsx(\"div\", {\n    className: \"user-message-info_right\"\n  }, __jsx(\"span\", null, props.dataMSG.letters && props.dataMSG.letters.time ? moment(props.dataMSG.letters.time).fromNow() : ''))));\n};\n\nvar ChatUsers = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChatUsers, _React$Component);\n\n  var _super = _createSuper(ChatUsers);\n\n  function ChatUsers(props) {\n    var _this;\n\n    _classCallCheck(this, ChatUsers);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      commonRoom: false,\n      startedNewChat: true\n    };\n    _this.__moveToCommonRoom = _this.__moveToCommonRoom.bind(_assertThisInitialized(_this));\n    _this.__goPrivateChat = _this.__goPrivateChat.bind(_assertThisInitialized(_this));\n    Bus.subscribe('startChat', function (data) {\n      return _this.__startPrivateChat(data);\n    });\n    return _this;\n  }\n\n  _createClass(ChatUsers, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      __GET_CHAT_USERS().next();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (this.props.usersList instanceof Array) {\n        if (this.props.usersList.some(function (user) {\n          return user.isSeen === false && user.isSender === false;\n        })) {\n          this.props.__SEND_MOBILE_MESSAGE_NOTIFY(true);\n        } else {\n          this.props.__SEND_MOBILE_MESSAGE_NOTIFY(false);\n        }\n      }\n\n      if (prevProps.usersList !== this.props.usersList) {\n        this.props.__SET_ACTIVE_USER(this.props.activeUser.id ? this.props.activeUser : this.props.usersList[0]);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Bus.unsubscribe('startChat');\n\n      __GET_CHAT_USERS({}).next();\n    }\n  }, {\n    key: \"__moveToCommonRoom\",\n    value: function __moveToCommonRoom() {\n      this.setState({\n        commonRoom: !this.state.commonRoom\n      });\n    }\n  }, {\n    key: \"__goPrivateChat\",\n    value: function __goPrivateChat(idUser) {\n      return _regeneratorRuntime.async(function __goPrivateChat$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.props.__CHANGE_MOBILE_LIST_OPEN(false);\n\n              this.setState({\n                startedNewChat: false\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(__GO_PRIVATE_CHAT(idUser, this.props.loggedUser.id).next());\n\n            case 4:\n              this.setState({\n                startedNewChat: true\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, _Promise);\n    }\n  }, {\n    key: \"__startPrivateChat\",\n    value: function __startPrivateChat(data) {\n      var _reverseArray;\n\n      return _regeneratorRuntime.async(function __startPrivateChat$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setState({\n                startedNewChat: false\n              });\n              _reverseArray = [_objectSpread({}, data)].concat(_toConsumableArray(this.props.usersList));\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(__ADD_MESSAGE({\n                my: {\n                  friendId: data.id,\n                  loggedUser: this.props.loggedUser,\n                  msgData: {\n                    time: null,\n                    message: ''\n                  }\n                }\n              }).next());\n\n            case 4:\n              __GET_CHAT_USERS(_reverseArray).next();\n\n              this.props.__SET_ACTIVE_USER(data);\n\n              this.__moveToCommonRoom();\n\n              this.setState({\n                startedNewChat: true\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, _Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"chat-users\"\n      }, __jsx(\"h4\", {\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]])\n      }, !this.state.commonRoom ? 'Your Messages' : __jsx(\"a\", {\n        onClick: this.__moveToCommonRoom,\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]])\n      }, __jsx(\"span\", {\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"lnr lnr-chevron-left\"\n      }), \" Back\"), __jsx(\"span\", {\n        onClick: function onClick() {\n          return _this2.props.__CHANGE_MOBILE_LIST_OPEN(false);\n        },\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"lnr lnr-arrow-left d-none_sm\"\n      })), __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"chat-room-wrapper \".concat(!this.state.startedNewChat ? 'until-load-allowing' : '')\n      }, !this.state.commonRoom ? __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"users-messages-container\"\n      }, this.props.usersList === null ? new Array(8).fill('').map(function (_, i) {\n        return __jsx(\"div\", {\n          key: i + Math.random().toString(16).slice(2, 6),\n          style: {\n            opacity: (8 - i) * 0.09\n          },\n          className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"skeleton-container\"\n        }, __jsx(Skeleton, {\n          width: \"35px\",\n          height: \"35px\",\n          margin: ['5px', '10px', '0px', '10px'],\n          radius: \"50%\"\n        }), __jsx(\"div\", {\n          className: _JSXStyle.dynamic([[\"756282593\", [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"line-wrap\"\n        }, __jsx(Skeleton, {\n          width: \"100%\",\n          height: \"12px\",\n          margin: ['5px', '0px', '10px', '0px'],\n          radius: \"0%\"\n        }), __jsx(Skeleton, {\n          width: \"100%\",\n          height: \"12px\",\n          margin: ['5px', '0px', '10px', '0px'],\n          radius: \"0%\"\n        })));\n      }) : this.props.usersList.length ? this.props.usersList.map(function (user) {\n        var _this2$props$activeUs, _this2$props$loggedUs;\n\n        return __jsx(EveryUser, {\n          isActiveUser: (_this2$props$activeUs = _this2.props.activeUser) === null || _this2$props$activeUs === void 0 ? void 0 : _this2$props$activeUs.id,\n          loggedUser: (_this2$props$loggedUs = _this2.props.loggedUser) === null || _this2$props$loggedUs === void 0 ? void 0 : _this2$props$loggedUs.id,\n          id: user.id,\n          dataMSG: user,\n          key: user.id,\n          goPrivateChat: _this2.__goPrivateChat\n        });\n      }) : __jsx(NoChatUsers, {\n        goToCommonRoom: function goToCommonRoom() {\n          return _this2.__moveToCommonRoom;\n        }\n      })) : __jsx(CommonRoom, {\n        startedNewChat: this.state.startedNewChat\n      }), !this.state.commonRoom && this.props.usersList !== null && this.props.usersList.length ? __jsx(UI_ELEMENTS.Button, {\n        background: \"transparent\",\n        color: \"#37415c\",\n        fontSize: 11,\n        hover: \"hover-from-transparent\",\n        type: \"button\",\n        text: 'Common Room',\n        width: 150,\n        margin: ['20px', 'auto', '0', 'auto'],\n        onClick: this.__moveToCommonRoom,\n        size: \"sm\"\n      }) : ''), __jsx(_JSXStyle, {\n        id: \"756282593\",\n        dynamic: [_this2.props.mobileUsersListOpen ? 1 : 0, !_this2.props.mobileUsersListOpen ? 'width' : '', _this2.props.mobileUsersListOpen ? 100 : 0]\n      }, [\".until-load-allowing{pointer-events:none;}\", \".skeleton-container{padding:10px 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\", \".skeleton-container .line-wrap{width:calc(100% - 70px);}\", \".chat-users{width:30%;box-shadow:0 3px 1px -2px rgba(0,0,0,0.2),0 2px 2px 0 rgba(0,0,0,0.14),0 1px 5px 0 rgba(0,0,0,0.12);}\", \".chat-users>h4{margin:0;padding:10px;border-bottom:1px solid #e3dede;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:41.5px;}\", \".chat-users>h4>a>span{font-size:12px;}\", \".chat-users>h4>a{cursor:pointer;color:#0000ffba;font-size:13px;}\", \".users-messages-container .user-messages-container{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:10px;border-bottom:1px solid #e3dede;-webkit-transition:.4s;transition:.4s;cursor:pointer;}\", \".users-messages-container .user-messages-container.active-user{border-right:2px solid #1ab898;background-color:#eeeeee;}\", \".users-messages-container .must-open-message{background-color:#eeeeee63;font-weight:900;}\", \".users-messages-container .user-messages-container:hover{background-color:#eeeeee;}\", \".user-messages-container .user-message-info{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-left:10px;width:calc(100% - 50px);-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\", \".user-messages-container .user-message-info .user-message-info_left{width:calc(100% - 90px);}\", \".user-messages-container .user-message-info .user-message-info_right{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;white-space:nowrap;}\", \".user-messages-container .user-message-info .user-message-info_right>span{font-size:13px;}\", \".user-messages-container .user-message-info .user-message-info_left h4{margin-top:2px;font-size:14px;margin-bottom:5px;}\", \".user-messages-container .user-message-info .user-message-info_left p{margin:0;height:16px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-size:12px;}\", \".user-messages-container .user-message-info .user-message-info_left p>img{height:15px;}\", \".chat-room-wrapper{height:calc(100% - 41.5px);}\", \".chat-room-wrapper .users-messages-container{overflow-x:hidden;max-height:calc(100% - 60px);}\", \".chat-room-wrapper .main-room-list{overflow-x:hidden;max-height:100%;}\", \".chat-room-wrapper .main-room-list::-webkit-scrollbar,.chat-room-wrapper .users-messages-container::-webkit-scrollbar{width:0px;height:10px;}\", \".chat-room-wrapper .main-room-list::-webkit-scrollbar-thumb,.chat-room-wrapper .users-messages-container::-webkit-scrollbar-thumb{background:transparent;}\", \".chat-room-wrapper .main-room-list::-webkit-scrollbar-track,.chat-room-wrapper .users-messages-container::-webkit-scrollbar-track{background:transparent;}\", \".d-none_sm{display:none;}\", \".chat-users>h4 .lnr-arrow-left{font-size:26px;cursor:pointer;}\", \"@media screen and (max-width:767px){.d-none_sm{display:block;}.chat-users{opacity:\".concat(_this2.props.mobileUsersListOpen ? 1 : 0, \";-webkit-transition:\").concat(!_this2.props.mobileUsersListOpen ? 'width' : '', \" .2s;transition:\").concat(!_this2.props.mobileUsersListOpen ? 'width' : '', \" .2s;overflow:hidden;width:\").concat(_this2.props.mobileUsersListOpen ? 100 : 0, \"%;}}\")]));\n    }\n  }]);\n\n  return ChatUsers;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loggedUser: state.chat.loggedUser,\n    usersList: state.chat.myChatUsers,\n    activeUser: state.chat.activeUser,\n    mobileUsersListOpen: state.chat.mobileUsersListOpen\n  };\n};\n\nvar mapDispatchToProps = {\n  __SET_ACTIVE_USER: __SET_ACTIVE_USER,\n  __CHANGE_MOBILE_LIST_OPEN: __CHANGE_MOBILE_LIST_OPEN,\n  __SEND_MOBILE_MESSAGE_NOTIFY: __SEND_MOBILE_MESSAGE_NOTIFY\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatUsers);","map":null,"metadata":{},"sourceType":"module"}