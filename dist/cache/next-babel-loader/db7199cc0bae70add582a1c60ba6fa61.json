{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, put } from 'redux-saga/effects';\nimport { __CHANGE_IS_LOGGED, __SET_MY_USERS_CHAT, __SET_ALL_CHAT_USERS, __SET_ACTIVE_USER, __SET_ACTIVE_USER_MESSAGES } from '../actions';\nimport store from 'store';\nimport fire from \"config/fire\";\nexport function* __SET_LOGGED(action) {\n  yield put(store.dispatch(__CHANGE_IS_LOGGED(action)));\n}\nexport async function* __GET_ALL_USERS(data) {\n  if (data) {\n    yield put(store.dispatch(__SET_ALL_CHAT_USERS(null)));\n    return;\n  }\n\n  const db = fire.firestore();\n  const fakeObj = [];\n  await db.collection('users').get().then(querySnapshot => {\n    querySnapshot.forEach(doc => {\n      const _data = doc.data();\n\n      delete _data.messages;\n      fakeObj.push(_objectSpread({}, _data));\n    });\n  });\n  yield put(store.dispatch(__SET_ALL_CHAT_USERS(fakeObj)));\n}\nlet unsubscribeUsers;\nexport async function* __GET_CHAT_USERS(data) {\n  if (unsubscribeUsers) unsubscribeUsers();\n  const db = fire.firestore();\n  let usersData = [];\n\n  if (data) {\n    yield put(store.dispatch(__SET_MY_USERS_CHAT(data)));\n  } else {\n    unsubscribeUsers = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        var _store$getState$chat$, _usersData$;\n\n        usersData = doc.data().messages;\n        const userId = ((_store$getState$chat$ = store.getState().chat.activeUser) === null || _store$getState$chat$ === void 0 ? void 0 : _store$getState$chat$.id) || ((_usersData$ = usersData[0]) === null || _usersData$ === void 0 ? void 0 : _usersData$.id);\n        doc.data().messages.forEach((user, index) => {\n          if (user.id === userId) {\n            const _cloneActiveUser = JSON.parse(JSON.stringify(usersData[index]));\n\n            _cloneActiveUser.letters = _cloneActiveUser.letters.slice(-1).pop();\n            store.dispatch(__SET_ACTIVE_USER(_cloneActiveUser));\n          }\n\n          usersData[index].letters = user.letters.slice(-1).pop();\n        });\n        store.dispatch(__SET_MY_USERS_CHAT(usersData));\n      });\n    });\n    yield usersData;\n  }\n}\nexport async function* __CHANGE_IS_SEEN({\n  senderID,\n  myID\n}) {\n  // Change my seen\n  const db = fire.firestore();\n  await db.collection('users').doc(myID).get().then(res => {\n    var _res$data;\n\n    const myObj = db.doc(`users/${myID}`);\n\n    let _messagesMy = (_res$data = res.data()) === null || _res$data === void 0 ? void 0 : _res$data.messages;\n\n    if (!_messagesMy) return;\n\n    const _findIndex = res.data().messages.findIndex(item => item.id === senderID);\n\n    if (_findIndex !== -1) {\n      _messagesMy[_findIndex].isSeen = true;\n      _messagesMy[_findIndex].countMessagesDelivered = 0;\n    }\n\n    myObj.update('messages', _messagesMy);\n  });\n  await db.collection('users').doc(senderID).get().then(res => {\n    var _res$data2;\n\n    const senderObj = db.doc(`users/${senderID}`);\n\n    let _messagesMy = (_res$data2 = res.data()) === null || _res$data2 === void 0 ? void 0 : _res$data2.messages;\n\n    if (!_messagesMy) return;\n\n    const _findIndex = res.data().messages.findIndex(item => item.id === myID);\n\n    if (_findIndex !== -1) {\n      _messagesMy[_findIndex].isSeen = true;\n      _messagesMy[_findIndex].countMessagesDelivered = 0;\n    }\n\n    senderObj.update('messages', _messagesMy);\n  });\n  yield;\n}\nlet unsubscribe;\nexport async function* __GET_ACTIVE_USERS_MESSAGES(data) {\n  if (unsubscribe) {\n    unsubscribe();\n  }\n\n  let _messages = [];\n  const db = fire.firestore();\n  await new Promise(resolve => {\n    unsubscribe = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(res => {\n      res.forEach(doc => {\n        var _doc$data;\n\n        const _findIndex = (_doc$data = doc.data()) === null || _doc$data === void 0 ? void 0 : _doc$data.messages.findIndex(item => item.id === data);\n\n        if (_findIndex !== -1) {\n          _messages = doc.data().messages[_findIndex];\n          store.dispatch(__SET_ACTIVE_USER_MESSAGES([..._messages.letters]));\n          resolve();\n        }\n      });\n    });\n  });\n  yield _messages;\n}\nexport async function* __IS_TYPING_TO_ACTIVE_USER(hint, toUserId, myId) {\n  let friendUsers = null;\n  const db = fire.firestore();\n  await db.collection('users').doc(toUserId).get().then(res => {\n    const myObj = db.doc(`users/${toUserId}`);\n    friendUsers = res.data();\n    let _messagesMy = res.data().messages;\n\n    const _findIndex = res.data().messages.findIndex(item => item.id === myId);\n\n    if (_findIndex !== -1) {\n      _messagesMy[_findIndex].isTyping = hint;\n      myObj.update('messages', _messagesMy);\n    }\n  });\n}\nexport async function* __GO_PRIVATE_CHAT(idUser, loggedId) {\n  const usersData = store.getState().chat.myChatUsers;\n  const findActiveUser = usersData.find(user => user.id === idUser);\n\n  if (findActiveUser) {\n    store.dispatch(__SET_ACTIVE_USER(findActiveUser));\n  }\n\n  let friendChatMyObj = {};\n  await __CHANGE_IS_SEEN({\n    senderID: idUser,\n    myID: loggedId\n  }).next();\n  yield friendChatMyObj;\n}\nlet unsubscribeAddMessageMy;\nlet unsubscribeAddMessageFriend;\nexport async function* __ADD_MESSAGE({\n  friend,\n  my\n}) {\n  if (unsubscribeAddMessageMy) unsubscribeAddMessageMy();\n  if (unsubscribeAddMessageFriend) unsubscribeAddMessageFriend();\n  const db = fire.firestore();\n  const updateMyUsers = db.collection('users').doc(my.loggedUser.id);\n  let friendUsers = {};\n  await db.collection('users').doc(my.friendId).get().then(res => {\n    friendUsers = res.data();\n  });\n  unsubscribeAddMessageMy = updateMyUsers.onSnapshot(querySnapshot => {\n    const myUsers = querySnapshot.data();\n    if (!myUsers) return;\n\n    const _findIndex = myUsers.messages.findIndex(item => item.id === my.friendId);\n\n    if (_findIndex === -1) {\n      myUsers.messages.unshift({\n        id: my.friendId,\n        isSeen: true,\n        isTyping: false,\n        isSender: true,\n        countMessagesDelivered: 0,\n        color: friendUsers.color,\n        fullName: friendUsers.fullName,\n        letters: [my.msgData]\n      });\n      updateMyUsers.update('messages', myUsers.messages);\n    } else if (!myUsers.messages[_findIndex].letters.filter(msg => msg.time === my.msgData.time).length) {\n      const _saveData = myUsers.messages[_findIndex];\n\n      if (myUsers.messages[_findIndex].letters.length === 1 && myUsers.messages[_findIndex].letters[0].time === null) {\n        myUsers.messages[_findIndex].letters[0] = my.msgData;\n      } else {\n        myUsers.messages[_findIndex].letters.push(my.msgData);\n      }\n\n      myUsers.messages[_findIndex].isSeen = false;\n      myUsers.messages[_findIndex].isTyping = false;\n      myUsers.messages[_findIndex].isSender = true;\n      myUsers.messages.splice(_findIndex, 1);\n      myUsers.messages.unshift(_saveData);\n      updateMyUsers.update('messages', myUsers.messages);\n    }\n  });\n  if (!friend) return;\n  const updateFriendUsers = db.collection('users').doc(friend.friendId);\n  unsubscribeAddMessageFriend = updateFriendUsers.onSnapshot(querySnapshot => {\n    const friendUsers = querySnapshot.data();\n    if (!friendUsers) return;\n\n    const _findIndex = friendUsers.messages.findIndex(item => {\n      var _friend$loggedUser;\n\n      return item.id === ((_friend$loggedUser = friend.loggedUser) === null || _friend$loggedUser === void 0 ? void 0 : _friend$loggedUser.id);\n    });\n\n    if (_findIndex === -1) {\n      friendUsers.messages.push({\n        id: friend.loggedUser.id,\n        color: friend.loggedUser.color,\n        isSeen: false,\n        isSender: false,\n        isTyping: false,\n        countMessagesDelivered: 1,\n        fullName: friend.loggedUser.fullName,\n        letters: [friend.msgData]\n      });\n      updateFriendUsers.update('messages', friendUsers.messages);\n    } else if (!friendUsers.messages[_findIndex].letters.filter(msg => msg.time === friend.msgData.time).length) {\n      if (friendUsers.messages[_findIndex].letters.length === 1 && friendUsers.messages[_findIndex].letters[0].time === null) {\n        friendUsers.messages[_findIndex].letters[0] = friend.msgData;\n      } else {\n        friendUsers.messages[_findIndex].letters.push(friend.msgData);\n      }\n\n      friendUsers.messages[_findIndex].isSeen = false;\n      friendUsers.messages[_findIndex].countMessagesDelivered += 1;\n      friendUsers.messages[_findIndex].isSender = false;\n      friendUsers.messages[_findIndex].isTyping = false;\n      updateFriendUsers.update('messages', friendUsers.messages);\n    }\n  });\n  yield;\n}\nlet unsubscribeRemoveMy;\nlet unsubscribeRemoveFriend;\nexport async function* __REMOVE_MESSAGE(time, {\n  idUser,\n  myId\n}) {\n  if (unsubscribeRemoveMy) unsubscribeRemoveMy();\n  if (unsubscribeRemoveFriend) unsubscribeRemoveFriend();\n  const db = fire.firestore();\n  let updateFriendUsers = null,\n      friendUsers = null,\n      updateMyUsers = null,\n      myUsers = null;\n  unsubscribeRemoveFriend = await db.collection('users').doc(idUser).onSnapshot(snapshot => {\n    updateFriendUsers = db.doc(`users/${snapshot.data().id}`);\n    friendUsers = snapshot.data();\n    if (!friendUsers) return;\n\n    const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\n\n    const foundedItem = friendUsers.messages[_findIndexInFriend].letters.findIndex(msg => msg.time === time);\n\n    if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed) return;\n\n    if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem]) {\n      friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed = true;\n      friendUsers.messages[_findIndexInFriend].removedMessageIndex = foundedItem;\n    }\n\n    updateFriendUsers.update('messages', friendUsers.messages);\n  });\n  unsubscribeRemoveMy = db.collection('users').doc(myId).onSnapshot(snapshot => {\n    updateMyUsers = db.doc(`users/${snapshot.data().id}`);\n    myUsers = snapshot.data();\n    if (!myUsers) return;\n\n    const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\n\n    const foundedItem = myUsers.messages[_findIndexInMy].letters.findIndex(msg => msg.time === time);\n\n    if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem].removed) return;\n\n    if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem]) {\n      myUsers.messages[_findIndexInMy].letters[foundedItem].removed = true;\n      myUsers.messages[_findIndexInMy].removedMessageIndex = foundedItem;\n    }\n\n    updateMyUsers.update('messages', myUsers.messages);\n  });\n  yield;\n}\nexport async function* __EDIT_MESSAGE(msgData, index, {\n  idUser,\n  myId\n}) {\n  const db = fire.firestore();\n  let updateFriendUsers = null,\n      friendUsers = null,\n      updateMyUsers = null,\n      myUsers = null;\n  await db.collection('users').doc(idUser).get().then(async res => {\n    updateFriendUsers = db.doc(`users/${res.data().id}`);\n    friendUsers = res.data();\n    if (!friendUsers) return;\n\n    const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\n\n    if (!msgData) {\n      friendUsers.messages[_findIndexInFriend].editedMsgIndex = -1;\n      friendUsers.messages[_findIndexInFriend].countMessagesDelivered = 0;\n      friendUsers.messages[_findIndexInFriend].isSeen = true;\n      friendUsers.messages[_findIndexInFriend].isSender = true;\n      friendUsers.messages[_findIndexInFriend].isTyping = false;\n    } else if (_findIndexInFriend !== -1) {\n      friendUsers.messages[_findIndexInFriend].editedMsgIndex = index;\n      friendUsers.messages[_findIndexInFriend].letters[index] = _objectSpread({}, friendUsers.messages[_findIndexInFriend].letters[index], {\n        decryptedMsg: msgData.d,\n        encryptedMsg: msgData.e,\n        message: msgData.value,\n        edited: true\n      });\n    }\n\n    await updateFriendUsers.update('messages', friendUsers.messages);\n  });\n  await db.collection('users').doc(myId).get().then(async res => {\n    updateMyUsers = db.doc(`users/${res.data().id}`);\n    myUsers = res.data();\n    if (!myUsers) return;\n\n    const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\n\n    if (!msgData) {\n      myUsers.messages[_findIndexInMy].editedMsgIndex = -1;\n      myUsers.messages[_findIndexInMy].countMessagesDelivered = 0;\n      myUsers.messages[_findIndexInMy].isSeen = true;\n      myUsers.messages[_findIndexInMy].isSender = true;\n      myUsers.messages[_findIndexInMy].isTyping = false;\n    } else if (_findIndexInMy !== -1) {\n      myUsers.messages[_findIndexInMy].editedMsgIndex = index;\n      myUsers.messages[_findIndexInMy].letters[index] = _objectSpread({}, myUsers.messages[_findIndexInMy].letters[index], {\n        decryptedMsg: msgData.d,\n        encryptedMsg: msgData.e,\n        message: msgData.value,\n        edited: true\n      });\n    }\n\n    await updateMyUsers.update('messages', myUsers.messages);\n  });\n  yield;\n}\nexport function* _rootSaga() {\n  yield all([__SET_LOGGED, __GET_CHAT_USERS, __GET_ALL_USERS, __CHANGE_IS_SEEN, __GET_ACTIVE_USERS_MESSAGES, __IS_TYPING_TO_ACTIVE_USER, __GO_PRIVATE_CHAT, __EDIT_MESSAGE, __REMOVE_MESSAGE, __ADD_MESSAGE]);\n}","map":null,"metadata":{},"sourceType":"module"}