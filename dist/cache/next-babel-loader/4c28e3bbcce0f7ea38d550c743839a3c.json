{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from \"next/dist/next-server/lib/head\";\nimport UI_ELEMENTS from 'components/shared/UI';\nimport { useForm } from 'react-hook-form';\nimport Alert from 'components/shared/UI/Alert';\nimport Router from \"next/router\";\nimport Icon from \"components/Icons/icon\";\nimport * as authService from \"utils/auth-service\";\nimport { __bodyLoading } from \"components/shared/helpers/global-functions\";\nimport Link from \"next/link\";\nimport { connect } from 'react-redux';\nimport { __CHANGE_STATUS_IS_LOADING } from \"../store/actions\";\n\nfunction ResetForm() {\n  const _timeout = 4000;\n  const {\n    0: loadingLogin,\n    1: setLoadingLogin\n  } = useState(false);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    0: successMessage,\n    1: setSuccessMessage\n  } = useState('');\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const onSubmit = data => {\n    setLoadingLogin(true);\n\n    authService.__resetPassword(data.email).then(_res => {\n      reset();\n      setLoadingLogin(false);\n      setSuccessMessage('Please check your email');\n      setTimeout(() => {\n        Router.replace('/login');\n      }, _timeout);\n    }).catch(err => {\n      reset();\n      setLoadingLogin(false);\n      setErrorMessage(err.message);\n    });\n  };\n\n  return __jsx(\"form\", {\n    className: \"login-form\",\n    onSubmit: handleSubmit(onSubmit)\n  }, errorMessage && __jsx(Alert, {\n    type: \"error\",\n    timeout: _timeout,\n    message: errorMessage\n  }), successMessage && __jsx(Alert, {\n    type: \"success\",\n    timeout: _timeout,\n    message: successMessage\n  }), __jsx(UI_ELEMENTS.Input, {\n    name: \"email\",\n    type: \"email\",\n    refBind: register({\n      required: 'Email is required',\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: \"Invalid email address\"\n      }\n    }),\n    fullWidth: true,\n    errors: errors.email && errors.email.message,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Button, {\n    type: \"submit\",\n    icon: loadingLogin ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    text: \"Reset Password\",\n    width: 230,\n    size: \"md\"\n  }), __jsx(Link, {\n    href: \"/login\",\n    prefetch: false\n  }, __jsx(\"a\", {\n    className: \"link-to-reset\"\n  }, \"I have changed my password already. Move to login\")));\n}\n\nclass ResetPassword extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: this.props.isLoading\n    };\n\n    __bodyLoading(this.state.isLoading);\n\n    authService.__isLogged().then(res => {\n      if (res) {\n        Router.push('/');\n      } else {\n        this.setState({\n          isLoading: false\n        }, () => __bodyLoading(this.state.isLoading, false));\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.__CHANGE_STATUS_IS_LOADING(false);\n  }\n\n  render() {\n    if (this.state.isLoading) return '';\n    return __jsx(\"div\", {\n      className: \"jsx-862192449\" + \" \" + \"container\"\n    }, __jsx(Head, null, __jsx(\"title\", {\n      className: \"jsx-862192449\"\n    }, \"Reset Password\")), __jsx(\"main\", {\n      className: \"jsx-862192449\"\n    }, __jsx(\"div\", {\n      className: \"jsx-862192449\" + \" \" + \"reset-form-container\"\n    }, __jsx(\"div\", {\n      className: \"jsx-862192449\" + \" \" + \"form-icon\"\n    }, __jsx(Icon, {\n      name: \"user\"\n    })), __jsx(\"h4\", {\n      className: \"jsx-862192449\" + \" \" + \"title-form\"\n    }, \"Reset Password\"), __jsx(ResetForm, null))), __jsx(_JSXStyle, {\n      id: \"862192449\"\n    }, [\".reset-form-container{position:absolute;left:0;right:0;margin:auto;width:400px;padding:25px 20px;background:#ececec30;bottom:0;top:0;height:-webkit-max-content;height:-moz-max-content;height:max-content;border-radius:5px;-webkit-backdrop-filter:blur(6px);-webkit-backdrop-filter:blur(6px);backdrop-filter:blur(6px);border:1px solid #ffffff24;}\", \".reset-form-container .title-form{margin-bottom:10px;text-align:center;text-transform:uppercase;-webkit-letter-spacing:2px;-moz-letter-spacing:2px;-ms-letter-spacing:2px;letter-spacing:2px;font-size:23px;margin:10px 10px 20px 10px;color:#fbfbfc;font-weight:400;}\", \".reset-form-container .link-to-reset{text-align:center;display:block;margin:10px;font-size:13px;font-style:italic;color:#e5e6e8;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;}\", \".reset-form-container .form-icon{width:40px;height:40px;margin:auto;}\", \".reset-form-container .form-icon svg{width:100%;height:100%;}\"]));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isLoading: state.auth.isLoading\n});\n\nconst mapDispatchToProps = {\n  __CHANGE_STATUS_IS_LOADING\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(ResetPassword));","map":null,"metadata":{},"sourceType":"module"}