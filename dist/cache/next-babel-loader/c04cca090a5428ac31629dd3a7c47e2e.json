{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(__SET_LOGGED),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(_rootSaga);\n\nimport { all, put } from 'redux-saga/effects';\nimport { __CHANGE_IS_LOGGED, __SET_MY_USERS_CHAT, __SET_ALL_CHAT_USERS, __SET_ACTIVE_USER, __SET_ACTIVE_USER_MESSAGES } from '../actions';\nimport store from 'store';\nimport fire from \"config/fire\";\nexport function __SET_LOGGED(action) {\n  return _regeneratorRuntime.wrap(function __SET_LOGGED$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(store.dispatch(__CHANGE_IS_LOGGED(action)));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function __GET_ALL_USERS(_x) {\n  return _GET_ALL_USERS.apply(this, arguments);\n}\n\nfunction _GET_ALL_USERS() {\n  _GET_ALL_USERS = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var db, fakeObj;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!data) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return put(store.dispatch(__SET_ALL_CHAT_USERS(null)));\n\n          case 3:\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            db = fire.firestore();\n            fakeObj = [];\n            _context2.next = 8;\n            return _awaitAsyncGenerator(db.collection('users').get().then(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                var _data = doc.data();\n\n                delete _data.messages;\n                fakeObj.push(_objectSpread({}, _data));\n              });\n            }));\n\n          case 8:\n            _context2.next = 10;\n            return put(store.dispatch(__SET_ALL_CHAT_USERS(fakeObj)));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GET_ALL_USERS.apply(this, arguments);\n}\n\nvar unsubscribeUsers;\nexport function __GET_CHAT_USERS(_x2) {\n  return _GET_CHAT_USERS.apply(this, arguments);\n}\n\nfunction _GET_CHAT_USERS() {\n  _GET_CHAT_USERS = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n    var db, usersData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (unsubscribeUsers) unsubscribeUsers();\n            db = fire.firestore();\n            usersData = [];\n\n            if (!data) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 6;\n            return put(store.dispatch(__SET_MY_USERS_CHAT(data)));\n\n          case 6:\n            _context3.next = 11;\n            break;\n\n          case 8:\n            unsubscribeUsers = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                var _store$getState$chat$, _usersData$;\n\n                usersData = doc.data().messages;\n                var userId = ((_store$getState$chat$ = store.getState().chat.activeUser) === null || _store$getState$chat$ === void 0 ? void 0 : _store$getState$chat$.id) || ((_usersData$ = usersData[0]) === null || _usersData$ === void 0 ? void 0 : _usersData$.id);\n                doc.data().messages.forEach(function (user, index) {\n                  if (user.id === userId) {\n                    var _cloneActiveUser = JSON.parse(JSON.stringify(usersData[index]));\n\n                    _cloneActiveUser.letters = _cloneActiveUser.letters.slice(-1).pop();\n                    store.dispatch(__SET_ACTIVE_USER(_cloneActiveUser));\n                  }\n\n                  usersData[index].letters = user.letters.slice(-1).pop();\n                });\n                store.dispatch(__SET_MY_USERS_CHAT(usersData));\n              });\n            });\n            _context3.next = 11;\n            return usersData;\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _GET_CHAT_USERS.apply(this, arguments);\n}\n\nexport function __CHANGE_IS_SEEN(_x3) {\n  return _CHANGE_IS_SEEN.apply(this, arguments);\n}\n\nfunction _CHANGE_IS_SEEN() {\n  _CHANGE_IS_SEEN = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {\n    var senderID, myID, db;\n    return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            senderID = _ref.senderID, myID = _ref.myID;\n            // Change my seen\n            db = fire.firestore();\n            _context4.next = 4;\n            return _awaitAsyncGenerator(db.collection('users').doc(myID).get().then(function (res) {\n              var _res$data;\n\n              var myObj = db.doc(\"users/\".concat(myID));\n\n              var _messagesMy = (_res$data = res.data()) === null || _res$data === void 0 ? void 0 : _res$data.messages;\n\n              if (!_messagesMy) return;\n\n              var _findIndex = res.data().messages.findIndex(function (item) {\n                return item.id === senderID;\n              });\n\n              if (_findIndex !== -1) {\n                _messagesMy[_findIndex].isSeen = true;\n                _messagesMy[_findIndex].countMessagesDelivered = 0;\n              }\n\n              myObj.update('messages', _messagesMy);\n            }));\n\n          case 4:\n            _context4.next = 6;\n            return _awaitAsyncGenerator(db.collection('users').doc(senderID).get().then(function (res) {\n              var _res$data2;\n\n              var senderObj = db.doc(\"users/\".concat(senderID));\n\n              var _messagesMy = (_res$data2 = res.data()) === null || _res$data2 === void 0 ? void 0 : _res$data2.messages;\n\n              if (!_messagesMy) return;\n\n              var _findIndex = res.data().messages.findIndex(function (item) {\n                return item.id === myID;\n              });\n\n              if (_findIndex !== -1) {\n                _messagesMy[_findIndex].isSeen = true;\n                _messagesMy[_findIndex].countMessagesDelivered = 0;\n              }\n\n              senderObj.update('messages', _messagesMy);\n            }));\n\n          case 6:\n            _context4.next = 8;\n            return;\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _CHANGE_IS_SEEN.apply(this, arguments);\n}\n\nvar unsubscribe;\nexport function __GET_ACTIVE_USERS_MESSAGES(_x4) {\n  return _GET_ACTIVE_USERS_MESSAGES.apply(this, arguments);\n}\n\nfunction _GET_ACTIVE_USERS_MESSAGES() {\n  _GET_ACTIVE_USERS_MESSAGES = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n    var _messages, db;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (unsubscribe) {\n              unsubscribe();\n            }\n\n            _messages = [];\n            db = fire.firestore();\n            _context5.next = 5;\n            return _awaitAsyncGenerator(new Promise(function (resolve) {\n              unsubscribe = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email).onSnapshot(function (res) {\n                res.forEach(function (doc) {\n                  var _doc$data;\n\n                  var _findIndex = (_doc$data = doc.data()) === null || _doc$data === void 0 ? void 0 : _doc$data.messages.findIndex(function (item) {\n                    return item.id === data;\n                  });\n\n                  if (_findIndex !== -1) {\n                    _messages = doc.data().messages[_findIndex];\n                    store.dispatch(__SET_ACTIVE_USER_MESSAGES(_toConsumableArray(_messages.letters)));\n                    resolve();\n                  }\n                });\n              });\n            }));\n\n          case 5:\n            _context5.next = 7;\n            return _messages;\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _GET_ACTIVE_USERS_MESSAGES.apply(this, arguments);\n}\n\nexport function __IS_TYPING_TO_ACTIVE_USER(_x5, _x6, _x7) {\n  return _IS_TYPING_TO_ACTIVE_USER.apply(this, arguments);\n}\n\nfunction _IS_TYPING_TO_ACTIVE_USER() {\n  _IS_TYPING_TO_ACTIVE_USER = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(hint, toUserId, myId) {\n    var friendUsers, db;\n    return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            friendUsers = null;\n            db = fire.firestore();\n            _context6.next = 4;\n            return _awaitAsyncGenerator(db.collection('users').doc(toUserId).get().then(function (res) {\n              var myObj = db.doc(\"users/\".concat(toUserId));\n              friendUsers = res.data();\n              var _messagesMy = res.data().messages;\n\n              var _findIndex = res.data().messages.findIndex(function (item) {\n                return item.id === myId;\n              });\n\n              if (_findIndex !== -1) {\n                _messagesMy[_findIndex].isTyping = hint;\n                myObj.update('messages', _messagesMy);\n              }\n            }));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _IS_TYPING_TO_ACTIVE_USER.apply(this, arguments);\n}\n\nexport function __GO_PRIVATE_CHAT(_x8, _x9) {\n  return _GO_PRIVATE_CHAT.apply(this, arguments);\n}\n\nfunction _GO_PRIVATE_CHAT() {\n  _GO_PRIVATE_CHAT = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(idUser, loggedId) {\n    var usersData, findActiveUser, friendChatMyObj;\n    return _regeneratorRuntime.wrap(function _callee6$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            usersData = store.getState().chat.myChatUsers;\n            findActiveUser = usersData.find(function (user) {\n              return user.id === idUser;\n            });\n\n            if (findActiveUser) {\n              store.dispatch(__SET_ACTIVE_USER(findActiveUser));\n            }\n\n            friendChatMyObj = {};\n            _context7.next = 6;\n            return _awaitAsyncGenerator(__CHANGE_IS_SEEN({\n              senderID: idUser,\n              myID: loggedId\n            }).next());\n\n          case 6:\n            _context7.next = 8;\n            return friendChatMyObj;\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _GO_PRIVATE_CHAT.apply(this, arguments);\n}\n\nvar unsubscribeAddMessageMy;\nvar unsubscribeAddMessageFriend;\nexport function __ADD_MESSAGE(_x10) {\n  return _ADD_MESSAGE.apply(this, arguments);\n}\n\nfunction _ADD_MESSAGE() {\n  _ADD_MESSAGE = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref2) {\n    var friend, my, db, updateMyUsers, friendUsers, updateFriendUsers;\n    return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            friend = _ref2.friend, my = _ref2.my;\n            if (unsubscribeAddMessageMy) unsubscribeAddMessageMy();\n            if (unsubscribeAddMessageFriend) unsubscribeAddMessageFriend();\n            db = fire.firestore();\n            updateMyUsers = db.collection('users').doc(my.loggedUser.id);\n            friendUsers = {};\n            _context8.next = 8;\n            return _awaitAsyncGenerator(db.collection('users').doc(my.friendId).get().then(function (res) {\n              friendUsers = res.data();\n            }));\n\n          case 8:\n            unsubscribeAddMessageMy = updateMyUsers.onSnapshot(function (querySnapshot) {\n              var myUsers = querySnapshot.data();\n              if (!myUsers) return;\n\n              var _findIndex = myUsers.messages.findIndex(function (item) {\n                return item.id === my.friendId;\n              });\n\n              if (_findIndex === -1) {\n                myUsers.messages.unshift({\n                  id: my.friendId,\n                  isSeen: true,\n                  isTyping: false,\n                  isSender: true,\n                  countMessagesDelivered: 0,\n                  color: friendUsers.color,\n                  fullName: friendUsers.fullName,\n                  letters: [my.msgData]\n                });\n                updateMyUsers.update('messages', myUsers.messages);\n              } else if (!myUsers.messages[_findIndex].letters.filter(function (msg) {\n                return msg.time === my.msgData.time;\n              }).length) {\n                var _saveData = myUsers.messages[_findIndex];\n\n                if (myUsers.messages[_findIndex].letters.length === 1 && myUsers.messages[_findIndex].letters[0].time === null) {\n                  myUsers.messages[_findIndex].letters[0] = my.msgData;\n                } else {\n                  myUsers.messages[_findIndex].letters.push(my.msgData);\n                }\n\n                myUsers.messages[_findIndex].isSeen = false;\n                myUsers.messages[_findIndex].isTyping = false;\n                myUsers.messages[_findIndex].isSender = true;\n                myUsers.messages.splice(_findIndex, 1);\n                myUsers.messages.unshift(_saveData);\n                updateMyUsers.update('messages', myUsers.messages);\n              }\n            });\n\n            if (friend) {\n              _context8.next = 11;\n              break;\n            }\n\n            return _context8.abrupt(\"return\");\n\n          case 11:\n            updateFriendUsers = db.collection('users').doc(friend.friendId);\n            unsubscribeAddMessageFriend = updateFriendUsers.onSnapshot(function (querySnapshot) {\n              var friendUsers = querySnapshot.data();\n              if (!friendUsers) return;\n\n              var _findIndex = friendUsers.messages.findIndex(function (item) {\n                var _friend$loggedUser;\n\n                return item.id === ((_friend$loggedUser = friend.loggedUser) === null || _friend$loggedUser === void 0 ? void 0 : _friend$loggedUser.id);\n              });\n\n              if (_findIndex === -1) {\n                friendUsers.messages.push({\n                  id: friend.loggedUser.id,\n                  color: friend.loggedUser.color,\n                  isSeen: false,\n                  isSender: false,\n                  isTyping: false,\n                  countMessagesDelivered: 1,\n                  fullName: friend.loggedUser.fullName,\n                  letters: [friend.msgData]\n                });\n                updateFriendUsers.update('messages', friendUsers.messages);\n              } else if (!friendUsers.messages[_findIndex].letters.filter(function (msg) {\n                return msg.time === friend.msgData.time;\n              }).length) {\n                if (friendUsers.messages[_findIndex].letters.length === 1 && friendUsers.messages[_findIndex].letters[0].time === null) {\n                  friendUsers.messages[_findIndex].letters[0] = friend.msgData;\n                } else {\n                  friendUsers.messages[_findIndex].letters.push(friend.msgData);\n                }\n\n                friendUsers.messages[_findIndex].isSeen = false;\n                friendUsers.messages[_findIndex].countMessagesDelivered += 1;\n                friendUsers.messages[_findIndex].isSender = false;\n                friendUsers.messages[_findIndex].isTyping = false;\n                updateFriendUsers.update('messages', friendUsers.messages);\n              }\n            });\n            _context8.next = 15;\n            return;\n\n          case 15:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _ADD_MESSAGE.apply(this, arguments);\n}\n\nvar unsubscribeRemoveMy;\nvar unsubscribeRemoveFriend;\nexport function __REMOVE_MESSAGE(_x11, _x12) {\n  return _REMOVE_MESSAGE.apply(this, arguments);\n}\n\nfunction _REMOVE_MESSAGE() {\n  _REMOVE_MESSAGE = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(time, _ref3) {\n    var idUser, myId, db, updateFriendUsers, friendUsers, updateMyUsers, myUsers;\n    return _regeneratorRuntime.wrap(function _callee8$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            idUser = _ref3.idUser, myId = _ref3.myId;\n            if (unsubscribeRemoveMy) unsubscribeRemoveMy();\n            if (unsubscribeRemoveFriend) unsubscribeRemoveFriend();\n            db = fire.firestore();\n            updateFriendUsers = null, friendUsers = null, updateMyUsers = null, myUsers = null;\n            _context9.next = 7;\n            return _awaitAsyncGenerator(db.collection('users').doc(idUser).onSnapshot(function (snapshot) {\n              updateFriendUsers = db.doc(\"users/\".concat(snapshot.data().id));\n              friendUsers = snapshot.data();\n              if (!friendUsers) return;\n\n              var _findIndexInFriend = friendUsers.messages.findIndex(function (item) {\n                return item.id === myId;\n              });\n\n              var foundedItem = friendUsers.messages[_findIndexInFriend].letters.findIndex(function (msg) {\n                return msg.time === time;\n              });\n\n              if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed) return;\n\n              if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem]) {\n                friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed = true;\n                friendUsers.messages[_findIndexInFriend].removedMessageIndex = foundedItem;\n              }\n\n              updateFriendUsers.update('messages', friendUsers.messages);\n            }));\n\n          case 7:\n            unsubscribeRemoveFriend = _context9.sent;\n            unsubscribeRemoveMy = db.collection('users').doc(myId).onSnapshot(function (snapshot) {\n              updateMyUsers = db.doc(\"users/\".concat(snapshot.data().id));\n              myUsers = snapshot.data();\n              if (!myUsers) return;\n\n              var _findIndexInMy = myUsers.messages.findIndex(function (item) {\n                return item.id === idUser;\n              });\n\n              var foundedItem = myUsers.messages[_findIndexInMy].letters.findIndex(function (msg) {\n                return msg.time === time;\n              });\n\n              if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem].removed) return;\n\n              if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem]) {\n                myUsers.messages[_findIndexInMy].letters[foundedItem].removed = true;\n                myUsers.messages[_findIndexInMy].removedMessageIndex = foundedItem;\n              }\n\n              updateMyUsers.update('messages', myUsers.messages);\n            });\n            _context9.next = 11;\n            return;\n\n          case 11:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _REMOVE_MESSAGE.apply(this, arguments);\n}\n\nexport function __EDIT_MESSAGE(_x13, _x14, _x15) {\n  return _EDIT_MESSAGE.apply(this, arguments);\n}\n\nfunction _EDIT_MESSAGE() {\n  _EDIT_MESSAGE = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(msgData, index, _ref4) {\n    var idUser, myId, db, updateFriendUsers, friendUsers, updateMyUsers, myUsers;\n    return _regeneratorRuntime.wrap(function _callee11$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            idUser = _ref4.idUser, myId = _ref4.myId;\n            db = fire.firestore();\n            updateFriendUsers = null, friendUsers = null, updateMyUsers = null, myUsers = null;\n            _context12.next = 5;\n            return _awaitAsyncGenerator(db.collection('users').doc(idUser).get().then(function _callee9(res) {\n              var _findIndexInFriend;\n\n              return _regeneratorRuntime.async(function _callee9$(_context10) {\n                while (1) {\n                  switch (_context10.prev = _context10.next) {\n                    case 0:\n                      updateFriendUsers = db.doc(\"users/\".concat(res.data().id));\n                      friendUsers = res.data();\n\n                      if (friendUsers) {\n                        _context10.next = 4;\n                        break;\n                      }\n\n                      return _context10.abrupt(\"return\");\n\n                    case 4:\n                      _findIndexInFriend = friendUsers.messages.findIndex(function (item) {\n                        return item.id === myId;\n                      });\n\n                      if (!msgData) {\n                        friendUsers.messages[_findIndexInFriend].editedMsgIndex = -1;\n                        friendUsers.messages[_findIndexInFriend].countMessagesDelivered = 0;\n                        friendUsers.messages[_findIndexInFriend].isSeen = true;\n                        friendUsers.messages[_findIndexInFriend].isSender = true;\n                        friendUsers.messages[_findIndexInFriend].isTyping = false;\n                      } else if (_findIndexInFriend !== -1) {\n                        friendUsers.messages[_findIndexInFriend].editedMsgIndex = index;\n                        friendUsers.messages[_findIndexInFriend].letters[index] = _objectSpread({}, friendUsers.messages[_findIndexInFriend].letters[index], {\n                          decryptedMsg: msgData.d,\n                          encryptedMsg: msgData.e,\n                          message: msgData.value,\n                          edited: true\n                        });\n                      }\n\n                      _context10.next = 8;\n                      return _regeneratorRuntime.awrap(updateFriendUsers.update('messages', friendUsers.messages));\n\n                    case 8:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 5:\n            _context12.next = 7;\n            return _awaitAsyncGenerator(db.collection('users').doc(myId).get().then(function _callee10(res) {\n              var _findIndexInMy;\n\n              return _regeneratorRuntime.async(function _callee10$(_context11) {\n                while (1) {\n                  switch (_context11.prev = _context11.next) {\n                    case 0:\n                      updateMyUsers = db.doc(\"users/\".concat(res.data().id));\n                      myUsers = res.data();\n\n                      if (myUsers) {\n                        _context11.next = 4;\n                        break;\n                      }\n\n                      return _context11.abrupt(\"return\");\n\n                    case 4:\n                      _findIndexInMy = myUsers.messages.findIndex(function (item) {\n                        return item.id === idUser;\n                      });\n\n                      if (!msgData) {\n                        myUsers.messages[_findIndexInMy].editedMsgIndex = -1;\n                        myUsers.messages[_findIndexInMy].countMessagesDelivered = 0;\n                        myUsers.messages[_findIndexInMy].isSeen = true;\n                        myUsers.messages[_findIndexInMy].isSender = true;\n                        myUsers.messages[_findIndexInMy].isTyping = false;\n                      } else if (_findIndexInMy !== -1) {\n                        myUsers.messages[_findIndexInMy].editedMsgIndex = index;\n                        myUsers.messages[_findIndexInMy].letters[index] = _objectSpread({}, myUsers.messages[_findIndexInMy].letters[index], {\n                          decryptedMsg: msgData.d,\n                          encryptedMsg: msgData.e,\n                          message: msgData.value,\n                          edited: true\n                        });\n                      }\n\n                      _context11.next = 8;\n                      return _regeneratorRuntime.awrap(updateMyUsers.update('messages', myUsers.messages));\n\n                    case 8:\n                    case \"end\":\n                      return _context11.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }));\n\n          case 7:\n            _context12.next = 9;\n            return;\n\n          case 9:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _EDIT_MESSAGE.apply(this, arguments);\n}\n\nexport function _rootSaga() {\n  return _regeneratorRuntime.wrap(function _rootSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([__SET_LOGGED, __GET_CHAT_USERS, __GET_ALL_USERS, __CHANGE_IS_SEEN, __GET_ACTIVE_USERS_MESSAGES, __IS_TYPING_TO_ACTIVE_USER, __GO_PRIVATE_CHAT, __EDIT_MESSAGE, __REMOVE_MESSAGE, __ADD_MESSAGE]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/store/saga/index.js"],"names":["__SET_LOGGED","_rootSaga","all","put","__CHANGE_IS_LOGGED","__SET_MY_USERS_CHAT","__SET_ALL_CHAT_USERS","__SET_ACTIVE_USER","__SET_ACTIVE_USER_MESSAGES","store","fire","action","dispatch","__GET_ALL_USERS","data","db","firestore","fakeObj","collection","get","then","querySnapshot","forEach","doc","_data","messages","push","unsubscribeUsers","__GET_CHAT_USERS","usersData","where","auth","currentUser","email","onSnapshot","userId","getState","chat","activeUser","id","user","index","_cloneActiveUser","JSON","parse","stringify","letters","slice","pop","__CHANGE_IS_SEEN","senderID","myID","res","myObj","_messagesMy","_findIndex","findIndex","item","isSeen","countMessagesDelivered","update","senderObj","unsubscribe","__GET_ACTIVE_USERS_MESSAGES","_messages","Promise","resolve","__IS_TYPING_TO_ACTIVE_USER","hint","toUserId","myId","friendUsers","isTyping","__GO_PRIVATE_CHAT","idUser","loggedId","myChatUsers","findActiveUser","find","friendChatMyObj","next","unsubscribeAddMessageMy","unsubscribeAddMessageFriend","__ADD_MESSAGE","friend","my","updateMyUsers","loggedUser","friendId","myUsers","unshift","isSender","color","fullName","msgData","filter","msg","time","length","_saveData","splice","updateFriendUsers","unsubscribeRemoveMy","unsubscribeRemoveFriend","__REMOVE_MESSAGE","snapshot","_findIndexInFriend","foundedItem","removed","removedMessageIndex","_findIndexInMy","__EDIT_MESSAGE","editedMsgIndex","decryptedMsg","d","encryptedMsg","e","message","value","edited"],"mappings":"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","sourcesContent":["import { all, put } from 'redux-saga/effects';\r\nimport {\r\n    __CHANGE_IS_LOGGED,\r\n    __SET_MY_USERS_CHAT,\r\n    __SET_ALL_CHAT_USERS,\r\n    __SET_ACTIVE_USER,\r\n    __SET_ACTIVE_USER_MESSAGES\r\n} from '../actions';\r\nimport store from 'store';\r\nimport fire from \"config/fire\";\r\n\r\n\r\nexport function* __SET_LOGGED(action) {\r\n    yield put(store.dispatch(__CHANGE_IS_LOGGED(action)));\r\n}\r\n\r\nexport async function* __GET_ALL_USERS (data) {\r\n    if (data) {\r\n        yield put(store.dispatch(__SET_ALL_CHAT_USERS(null)));\r\n        return;\r\n    }\r\n    const db = fire.firestore();\r\n    const fakeObj = [];\r\n    await db.collection('users')\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                const _data = doc.data();\r\n                delete _data.messages;\r\n                fakeObj.push({..._data})\r\n            });\r\n        });\r\n    yield put(store.dispatch(__SET_ALL_CHAT_USERS(fakeObj)))\r\n}\r\nlet unsubscribeUsers;\r\nexport async function* __GET_CHAT_USERS(data) {\r\n    if (unsubscribeUsers) unsubscribeUsers();\r\n\r\n    const db = fire.firestore();\r\n    let usersData = [];\r\n    if (data) {\r\n        yield put(store.dispatch(__SET_MY_USERS_CHAT(data)));\r\n    } else {\r\n        unsubscribeUsers = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email)\r\n            .onSnapshot((querySnapshot) => {\r\n                querySnapshot.forEach((doc) => {\r\n                    usersData = doc.data().messages;\r\n\r\n                    const userId = store.getState().chat.activeUser?.id || usersData[0]?.id;\r\n\r\n                    doc.data().messages.forEach((user, index) => {\r\n                        if (user.id === userId) {\r\n                            const _cloneActiveUser = JSON.parse(JSON.stringify(usersData[index]));\r\n                            _cloneActiveUser.letters = _cloneActiveUser.letters.slice(-1).pop();\r\n                            store.dispatch(__SET_ACTIVE_USER(_cloneActiveUser));\r\n                        }\r\n                        usersData[index].letters = user.letters.slice(-1).pop();\r\n                    });\r\n                    store.dispatch(__SET_MY_USERS_CHAT(usersData));\r\n                });\r\n            });\r\n        yield usersData;\r\n    }\r\n}\r\n\r\nexport async function* __CHANGE_IS_SEEN ({senderID, myID}) {\r\n    // Change my seen\r\n\r\n    const db = fire.firestore();\r\n    await db.collection('users').doc(myID).get().then(res => {\r\n        const myObj = db.doc(`users/${myID}`);\r\n        let _messagesMy = res.data()?.messages;\r\n        if (!_messagesMy) return;\r\n        const _findIndex = res.data().messages.findIndex(item => item.id === senderID);\r\n        if (_findIndex !== -1) {\r\n            _messagesMy[_findIndex].isSeen = true;\r\n            _messagesMy[_findIndex].countMessagesDelivered = 0;\r\n        }\r\n        myObj.update('messages', _messagesMy);\r\n    });\r\n    await db.collection('users').doc(senderID).get().then(res => {\r\n        const senderObj = db.doc(`users/${senderID}`);\r\n        let _messagesMy = res.data()?.messages;\r\n        if (!_messagesMy) return;\r\n        const _findIndex = res.data().messages.findIndex(item => item.id === myID);\r\n        if (_findIndex !== -1) {\r\n            _messagesMy[_findIndex].isSeen = true;\r\n            _messagesMy[_findIndex].countMessagesDelivered = 0;\r\n        }\r\n        senderObj.update('messages', _messagesMy);\r\n    });\r\n    yield;\r\n}\r\n\r\nlet unsubscribe;\r\nexport async function* __GET_ACTIVE_USERS_MESSAGES (data) {\r\n    if (unsubscribe) {\r\n        unsubscribe();\r\n    }\r\n    let _messages = [];\r\n    const db = fire.firestore();\r\n    await new Promise (resolve => {\r\n        unsubscribe = db.collection('users').where(\"email\", \"==\", fire.auth().currentUser.email)\r\n            .onSnapshot((res) => {\r\n                res.forEach(doc => {\r\n                    const _findIndex = doc.data()?.messages.findIndex(item => item.id === data);\r\n                    if (_findIndex !== -1) {\r\n                        _messages = doc.data().messages[_findIndex];\r\n                        store.dispatch(__SET_ACTIVE_USER_MESSAGES([..._messages.letters]));\r\n                        resolve();\r\n                    }\r\n                })\r\n            });\r\n    });\r\n    yield _messages;\r\n}\r\n\r\nexport async function* __IS_TYPING_TO_ACTIVE_USER (hint, toUserId, myId) {\r\n    let friendUsers = null;\r\n    const db        = fire.firestore();\r\n\r\n    await db.collection('users').doc(toUserId).get().then(res => {\r\n        const myObj = db.doc(`users/${toUserId}`);\r\n        friendUsers = res.data();\r\n        let _messagesMy = res.data().messages;\r\n        const _findIndex = res.data().messages.findIndex(item => item.id === myId);\r\n        if (_findIndex !== -1) {\r\n            _messagesMy[_findIndex].isTyping = hint;\r\n            myObj.update('messages', _messagesMy);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function* __GO_PRIVATE_CHAT (idUser, loggedId) {\r\n    const usersData      = store.getState().chat.myChatUsers;\r\n    const findActiveUser = usersData.find(user => user.id === idUser);\r\n    if (findActiveUser) {\r\n        store.dispatch(__SET_ACTIVE_USER( findActiveUser));\r\n    }\r\n\r\n    let friendChatMyObj = {};\r\n    await __CHANGE_IS_SEEN({senderID: idUser, myID: loggedId}).next();\r\n    yield friendChatMyObj\r\n}\r\n\r\nlet unsubscribeAddMessageMy;\r\nlet unsubscribeAddMessageFriend;\r\nexport async function* __ADD_MESSAGE({friend, my}) {\r\n    if (unsubscribeAddMessageMy) unsubscribeAddMessageMy();\r\n    if (unsubscribeAddMessageFriend) unsubscribeAddMessageFriend();\r\n\r\n    const db                = fire.firestore();\r\n    const updateMyUsers     = db.collection('users').doc(my.loggedUser.id);\r\n    let friendUsers = {};\r\n    await db.collection('users').doc(my.friendId).get().then(res => {\r\n        friendUsers = res.data();\r\n    });\r\n    unsubscribeAddMessageMy = updateMyUsers.onSnapshot((querySnapshot) => {\r\n        const myUsers = querySnapshot.data();\r\n        if(!myUsers) return;\r\n        const _findIndex = myUsers.messages.findIndex(item => item.id === my.friendId);\r\n\r\n        if (_findIndex === -1) {\r\n            myUsers.messages.unshift({\r\n                id: my.friendId,\r\n                isSeen: true,\r\n                isTyping: false,\r\n                isSender: true,\r\n                countMessagesDelivered: 0,\r\n                color: friendUsers.color,\r\n                fullName: friendUsers.fullName,\r\n                letters: [my.msgData]\r\n            });\r\n            updateMyUsers.update('messages', myUsers.messages);\r\n        } else if (!myUsers.messages[_findIndex].letters.filter(msg => msg.time === my.msgData.time).length) {\r\n            const _saveData = myUsers.messages[_findIndex];\r\n            if (myUsers.messages[_findIndex].letters.length === 1 && myUsers.messages[_findIndex].letters[0].time === null) {\r\n                myUsers.messages[_findIndex].letters[0] = my.msgData;\r\n            } else {\r\n                myUsers.messages[_findIndex].letters.push(my.msgData);\r\n            }\r\n            myUsers.messages[_findIndex].isSeen = false;\r\n            myUsers.messages[_findIndex].isTyping = false;\r\n            myUsers.messages[_findIndex].isSender = true;\r\n            myUsers.messages.splice(_findIndex, 1);\r\n            myUsers.messages.unshift(_saveData);\r\n            updateMyUsers.update('messages', myUsers.messages);\r\n        }\r\n    });\r\n    if(!friend) return;\r\n\r\n    const updateFriendUsers = db.collection('users').doc(friend.friendId);\r\n    unsubscribeAddMessageFriend = updateFriendUsers.onSnapshot((querySnapshot) => {\r\n        const friendUsers = querySnapshot.data();\r\n        if(!friendUsers) return;\r\n        const _findIndex = friendUsers.messages.findIndex(item => item.id === friend.loggedUser?.id);\r\n        if (_findIndex === -1) {\r\n            friendUsers.messages.push({\r\n                id: friend.loggedUser.id,\r\n                color: friend.loggedUser.color,\r\n                isSeen: false,\r\n                isSender: false,\r\n                isTyping: false,\r\n                countMessagesDelivered: 1,\r\n                fullName: friend.loggedUser.fullName,\r\n                letters: [friend.msgData]\r\n            });\r\n            updateFriendUsers.update('messages', friendUsers.messages);\r\n        } else if (!friendUsers.messages[_findIndex].letters.filter(msg => msg.time === friend.msgData.time).length) {\r\n            if (friendUsers.messages[_findIndex].letters.length === 1 && friendUsers.messages[_findIndex].letters[0].time === null) {\r\n                friendUsers.messages[_findIndex].letters[0] = friend.msgData;\r\n            } else {\r\n                friendUsers.messages[_findIndex].letters.push(friend.msgData);\r\n            }\r\n            friendUsers.messages[_findIndex].isSeen = false;\r\n            friendUsers.messages[_findIndex].countMessagesDelivered += 1;\r\n            friendUsers.messages[_findIndex].isSender = false;\r\n            friendUsers.messages[_findIndex].isTyping = false;\r\n            updateFriendUsers.update('messages', friendUsers.messages);\r\n        }\r\n    });\r\n    yield;\r\n}\r\n\r\nlet unsubscribeRemoveMy;\r\nlet unsubscribeRemoveFriend;\r\nexport async function* __REMOVE_MESSAGE (time, {idUser, myId}) {\r\n    if (unsubscribeRemoveMy) unsubscribeRemoveMy();\r\n    if (unsubscribeRemoveFriend) unsubscribeRemoveFriend();\r\n\r\n    const db                = fire.firestore();\r\n    let updateFriendUsers   = null,\r\n        friendUsers         = null,\r\n        updateMyUsers       = null,\r\n        myUsers             = null;\r\n\r\n    unsubscribeRemoveFriend = await db.collection('users').doc(idUser).onSnapshot(snapshot => {\r\n        updateFriendUsers = db.doc(`users/${snapshot.data().id}`);\r\n        friendUsers = snapshot.data();\r\n        if(!friendUsers) return;\r\n        const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\r\n        const foundedItem = friendUsers.messages[_findIndexInFriend].letters.findIndex(msg => msg.time === time);\r\n\r\n        if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed) return;\r\n\r\n        if (foundedItem !== -1 && friendUsers.messages[_findIndexInFriend].letters[foundedItem]) {\r\n            friendUsers.messages[_findIndexInFriend].letters[foundedItem].removed = true;\r\n            friendUsers.messages[_findIndexInFriend].removedMessageIndex = foundedItem\r\n        }\r\n        updateFriendUsers.update('messages',  friendUsers.messages);\r\n    });\r\n\r\n    unsubscribeRemoveMy = db.collection('users').doc(myId).onSnapshot(snapshot => {\r\n        updateMyUsers = db.doc(`users/${snapshot.data().id}`);\r\n        myUsers = snapshot.data();\r\n        if(!myUsers) return;\r\n        const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\r\n        const foundedItem = myUsers.messages[_findIndexInMy].letters.findIndex(msg => msg.time === time);\r\n\r\n        if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem].removed) return;\r\n\r\n        if (foundedItem !== -1 && myUsers.messages[_findIndexInMy].letters[foundedItem]) {\r\n            myUsers.messages[_findIndexInMy].letters[foundedItem].removed = true;\r\n            myUsers.messages[_findIndexInMy].removedMessageIndex = foundedItem;\r\n        }\r\n        updateMyUsers.update('messages', myUsers.messages);\r\n    });\r\n    yield;\r\n}\r\n\r\nexport async function* __EDIT_MESSAGE (msgData, index, {idUser, myId}) {\r\n    const db                = fire.firestore();\r\n    let updateFriendUsers   = null,\r\n        friendUsers         = null,\r\n        updateMyUsers       = null,\r\n        myUsers             = null;\r\n\r\n    await db.collection('users').doc(idUser).get().then(async res => {\r\n        updateFriendUsers = db.doc(`users/${res.data().id}`);\r\n        friendUsers = res.data();\r\n        if(!friendUsers) return;\r\n        const _findIndexInFriend = friendUsers.messages.findIndex(item => item.id === myId);\r\n        if (!msgData) {\r\n            friendUsers.messages[_findIndexInFriend].editedMsgIndex = -1;\r\n            friendUsers.messages[_findIndexInFriend].countMessagesDelivered = 0;\r\n            friendUsers.messages[_findIndexInFriend].isSeen = true;\r\n            friendUsers.messages[_findIndexInFriend].isSender = true;\r\n            friendUsers.messages[_findIndexInFriend].isTyping = false;\r\n        } else if (_findIndexInFriend !== -1) {\r\n            friendUsers.messages[_findIndexInFriend].editedMsgIndex = index;\r\n            friendUsers.messages[_findIndexInFriend].letters[index] = {\r\n                ...friendUsers.messages[_findIndexInFriend].letters[index],\r\n                decryptedMsg: msgData.d,\r\n                encryptedMsg: msgData.e,\r\n                message: msgData.value,\r\n                edited: true,\r\n            }\r\n        }\r\n        await updateFriendUsers.update('messages', friendUsers.messages);\r\n    });\r\n    await db.collection('users').doc(myId).get().then( async res => {\r\n        updateMyUsers = db.doc(`users/${res.data().id}`);\r\n        myUsers = res.data();\r\n        if(!myUsers) return;\r\n        const _findIndexInMy = myUsers.messages.findIndex(item => item.id === idUser);\r\n        if (!msgData) {\r\n            myUsers.messages[_findIndexInMy].editedMsgIndex = -1;\r\n            myUsers.messages[_findIndexInMy].countMessagesDelivered = 0;\r\n            myUsers.messages[_findIndexInMy].isSeen = true;\r\n            myUsers.messages[_findIndexInMy].isSender = true;\r\n            myUsers.messages[_findIndexInMy].isTyping = false;\r\n        } else if (_findIndexInMy !== -1) {\r\n            myUsers.messages[_findIndexInMy].editedMsgIndex = index;\r\n            myUsers.messages[_findIndexInMy].letters[index] = {\r\n                ...myUsers.messages[_findIndexInMy].letters[index],\r\n                decryptedMsg: msgData.d,\r\n                encryptedMsg: msgData.e,\r\n                message: msgData.value,\r\n                edited: true,\r\n            }\r\n        }\r\n        await updateMyUsers.update('messages', myUsers.messages);\r\n    });\r\n    yield;\r\n}\r\nexport function * _rootSaga () {\r\n    yield all([\r\n        __SET_LOGGED,\r\n        __GET_CHAT_USERS,\r\n        __GET_ALL_USERS,\r\n        __CHANGE_IS_SEEN,\r\n        __GET_ACTIVE_USERS_MESSAGES,\r\n        __IS_TYPING_TO_ACTIVE_USER,\r\n        __GO_PRIVATE_CHAT,\r\n        __EDIT_MESSAGE,\r\n        __REMOVE_MESSAGE,\r\n        __ADD_MESSAGE,\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}