{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar Caesar = /*#__PURE__*/function () {\n  function Caesar() {\n    _classCallCheck(this, Caesar);\n  }\n\n  _createClass(Caesar, null, [{\n    key: \"doCrypt\",\n    value: function doCrypt(isDecrypt, msg, shift, callback) {\n      if (!/^-?\\d+$/.test(shift)) {\n        callback(\"Shift is not an integer\");\n        return;\n      }\n\n      var _shift = parseInt(shift, 10);\n\n      if (_shift < 0 || _shift >= 26) {\n        callback(\"Shift is out of range! (please include 1 - 25 digits only)\");\n        return;\n      }\n\n      if (isDecrypt) {\n        _shift = (26 - _shift) % 26;\n      }\n\n      return this.caesarShift(msg, _shift);\n    }\n    /*\r\n     * Returns the result of having each alphabetic letter of the given text string shifted forward\r\n     * by the given amount, with wraparound. Case is preserved, and non-letters are unchanged.\r\n     * Examples:\r\n     * - caesarShift(\"abz\",  0) = \"abz\".\r\n     * - caesarShift(\"abz\",  1) = \"bca\".\r\n     * - caesarShift(\"abz\", 25) = \"zay\".\r\n     * - caesarShift(\"THe 123 !@#$\", 13) = \"GUr 123 !@#$\".\r\n     */\n\n  }, {\n    key: \"caesarShift\",\n    value: function caesarShift(text, shift) {\n      var result = \"\";\n\n      for (var i = 0; i < text.length; i++) {\n        var c = text.charCodeAt(i);\n        if (65 <= c && c <= 90) result += String.fromCharCode((c - 65 + shift) % 26 + 65); // Uppercase\n        else if (97 <= c && c <= 122) result += String.fromCharCode((c - 97 + shift) % 26 + 97); // Lowercase\n          else result += text.charAt(i); // Copy\n      }\n\n      return result;\n    }\n  }]);\n\n  return Caesar;\n}();\n\nexport { Caesar as default };","map":null,"metadata":{},"sourceType":"module"}