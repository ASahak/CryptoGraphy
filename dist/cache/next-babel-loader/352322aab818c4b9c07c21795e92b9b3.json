{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as moment from 'moment';\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport Skeleton from 'components/Skeleton';\nimport { __GET_CHAT_USERS, __ADD_MESSAGE, __GO_PRIVATE_CHAT } from 'store/saga';\nimport { __CHANGE_MOBILE_LIST_OPEN, __SET_ACTIVE_USER, __SEND_MOBILE_MESSAGE_NOTIFY } from 'store/actions';\nimport { __detectCryptIcon } from 'components/shared/helpers/global-functions';\nimport NoChatUsers from 'components/elements/NoChatUsers';\nimport CommonRoom from 'components/elements/CommonRoom';\nimport { connect } from 'react-redux';\nimport { Bus } from 'components/shared/helpers/Bus';\n\nconst EveryUser = props => {\n  return __jsx(\"div\", {\n    onClick: () => props.goPrivateChat(props.id),\n    className: `user-messages-container ${props.isActiveUser === props.id ? 'active-user' : ''} \n          ${props.dataMSG.letters.owner && props.dataMSG.letters.owner !== 'Me' && props.dataMSG.isSeen === false ? 'must-open-message' : ''}`\n  }, __jsx(UI_ELEMENTS.UserImage, {\n    firstName: props.dataMSG.fullName.split(' ')[0],\n    lastName: props.dataMSG.fullName.split(' ')[1] || '',\n    fill: props.dataMSG.color\n  }), __jsx(\"div\", {\n    className: \"user-message-info\"\n  }, __jsx(\"div\", {\n    className: \"user-message-info_left\"\n  }, __jsx(\"h4\", null, props.dataMSG.fullName + (props.dataMSG.letters.owner && props.dataMSG.letters.owner !== 'Me' && props.dataMSG.isSeen === false ? ` ( ${props.dataMSG.countMessagesDelivered} )` : '')), props.dataMSG.isTyping === true ? __jsx(\"div\", {\n    className: \"spinner\"\n  }, __jsx(\"div\", {\n    className: \"bounce1\"\n  }), __jsx(\"div\", {\n    className: \"bounce2\"\n  }), __jsx(\"div\", {\n    className: \"bounce3\"\n  })) : __jsx(\"p\", null, props.dataMSG.letters && props.dataMSG.letters.message ? __detectCryptIcon(props.dataMSG.letters) ? __jsx(\"img\", {\n    src: \"./assets/images/key.png\",\n    alt: \"iconKey\"\n  }) : props.dataMSG.letters.message : 'No messages yet')), __jsx(\"div\", {\n    className: \"user-message-info_right\"\n  }, __jsx(\"span\", null, props.dataMSG.letters && props.dataMSG.letters.time ? moment(props.dataMSG.letters.time).fromNow() : ''))));\n};\n\nclass ChatUsers extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      commonRoom: false,\n      startedNewChat: true\n    };\n    this.__moveToCommonRoom = this.__moveToCommonRoom.bind(this);\n    this.__goPrivateChat = this.__goPrivateChat.bind(this);\n    Bus.subscribe('startChat', data => this.__startPrivateChat(data));\n  }\n\n  componentDidMount() {\n    __GET_CHAT_USERS().next();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.usersList instanceof Array) {\n      if (this.props.usersList.some(user => user.isSeen === false && user.isSender === false)) {\n        this.props.__SEND_MOBILE_MESSAGE_NOTIFY(true);\n      } else {\n        this.props.__SEND_MOBILE_MESSAGE_NOTIFY(false);\n      }\n    }\n\n    if (prevProps.usersList !== this.props.usersList) {\n      this.props.__SET_ACTIVE_USER(this.props.activeUser.id ? this.props.activeUser : this.props.usersList[0]);\n    }\n  }\n\n  componentWillUnmount() {\n    Bus.unsubscribe('startChat');\n\n    __GET_CHAT_USERS({}).next();\n  }\n\n  __moveToCommonRoom() {\n    this.setState({\n      commonRoom: !this.state.commonRoom\n    });\n  }\n\n  async __goPrivateChat(idUser) {\n    this.props.__CHANGE_MOBILE_LIST_OPEN(false);\n\n    this.setState({\n      startedNewChat: false\n    });\n    await __GO_PRIVATE_CHAT(idUser, this.props.loggedUser.id).next();\n    this.setState({\n      startedNewChat: true\n    });\n  }\n\n  async __startPrivateChat(data) {\n    this.setState({\n      startedNewChat: false\n    });\n    const _reverseArray = [_objectSpread({}, data), ...this.props.usersList];\n    await __ADD_MESSAGE({\n      my: {\n        friendId: data.id,\n        loggedUser: this.props.loggedUser,\n        msgData: {\n          time: null,\n          message: ''\n        }\n      }\n    }).next();\n\n    __GET_CHAT_USERS(_reverseArray).next();\n\n    this.props.__SET_ACTIVE_USER(data);\n\n    this.__moveToCommonRoom();\n\n    this.setState({\n      startedNewChat: true\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"chat-users\"\n    }, __jsx(\"h4\", {\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]])\n    }, !this.state.commonRoom ? 'Your Messages' : __jsx(\"a\", {\n      onClick: this.__moveToCommonRoom,\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]])\n    }, __jsx(\"span\", {\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"lnr lnr-chevron-left\"\n    }), \" Back\"), __jsx(\"span\", {\n      onClick: () => this.props.__CHANGE_MOBILE_LIST_OPEN(false),\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"lnr lnr-arrow-left d-none_sm\"\n    })), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + `chat-room-wrapper ${!this.state.startedNewChat ? 'until-load-allowing' : ''}`\n    }, !this.state.commonRoom ? __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"users-messages-container\"\n    }, this.props.usersList === null ? new Array(8).fill('').map((_, i) => {\n      return __jsx(\"div\", {\n        key: i + Math.random().toString(16).slice(2, 6),\n        style: {\n          opacity: (8 - i) * 0.09\n        },\n        className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"skeleton-container\"\n      }, __jsx(Skeleton, {\n        width: \"35px\",\n        height: \"35px\",\n        margin: ['5px', '10px', '0px', '10px'],\n        radius: \"50%\"\n      }), __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"756282593\", [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]]]) + \" \" + \"line-wrap\"\n      }, __jsx(Skeleton, {\n        width: \"100%\",\n        height: \"12px\",\n        margin: ['5px', '0px', '10px', '0px'],\n        radius: \"0%\"\n      }), __jsx(Skeleton, {\n        width: \"100%\",\n        height: \"12px\",\n        margin: ['5px', '0px', '10px', '0px'],\n        radius: \"0%\"\n      })));\n    }) : this.props.usersList.length ? this.props.usersList.map(user => {\n      var _this$props$activeUse, _this$props$loggedUse;\n\n      return __jsx(EveryUser, {\n        isActiveUser: (_this$props$activeUse = this.props.activeUser) === null || _this$props$activeUse === void 0 ? void 0 : _this$props$activeUse.id,\n        loggedUser: (_this$props$loggedUse = this.props.loggedUser) === null || _this$props$loggedUse === void 0 ? void 0 : _this$props$loggedUse.id,\n        id: user.id,\n        dataMSG: user,\n        key: user.id,\n        goPrivateChat: this.__goPrivateChat\n      });\n    }) : __jsx(NoChatUsers, {\n      goToCommonRoom: () => this.__moveToCommonRoom\n    })) : __jsx(CommonRoom, {\n      startedNewChat: this.state.startedNewChat\n    }), !this.state.commonRoom && this.props.usersList !== null && this.props.usersList.length ? __jsx(UI_ELEMENTS.Button, {\n      background: \"transparent\",\n      color: \"#37415c\",\n      fontSize: 11,\n      hover: \"hover-from-transparent\",\n      type: \"button\",\n      text: 'Common Room',\n      width: 150,\n      margin: ['20px', 'auto', '0', 'auto'],\n      onClick: this.__moveToCommonRoom,\n      size: \"sm\"\n    }) : ''), __jsx(_JSXStyle, {\n      id: \"756282593\",\n      dynamic: [this.props.mobileUsersListOpen ? 1 : 0, !this.props.mobileUsersListOpen ? 'width' : '', this.props.mobileUsersListOpen ? 100 : 0]\n    }, [\".until-load-allowing{pointer-events:none;}\", \".skeleton-container{padding:10px 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\", \".skeleton-container .line-wrap{width:calc(100% - 70px);}\", \".chat-users{width:30%;box-shadow:0 3px 1px -2px rgba(0,0,0,0.2),0 2px 2px 0 rgba(0,0,0,0.14),0 1px 5px 0 rgba(0,0,0,0.12);}\", \".chat-users>h4{margin:0;padding:10px;border-bottom:1px solid #e3dede;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:41.5px;}\", \".chat-users>h4>a>span{font-size:12px;}\", \".chat-users>h4>a{cursor:pointer;color:#0000ffba;font-size:13px;}\", \".users-messages-container .user-messages-container{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:10px;border-bottom:1px solid #e3dede;-webkit-transition:.4s;transition:.4s;cursor:pointer;}\", \".users-messages-container .user-messages-container.active-user{border-right:2px solid #1ab898;background-color:#eeeeee;}\", \".users-messages-container .must-open-message{background-color:#eeeeee63;font-weight:900;}\", \".users-messages-container .user-messages-container:hover{background-color:#eeeeee;}\", \".user-messages-container .user-message-info{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-left:10px;width:calc(100% - 50px);-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\", \".user-messages-container .user-message-info .user-message-info_left{width:calc(100% - 90px);}\", \".user-messages-container .user-message-info .user-message-info_right{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;white-space:nowrap;}\", \".user-messages-container .user-message-info .user-message-info_right>span{font-size:13px;}\", \".user-messages-container .user-message-info .user-message-info_left h4{margin-top:2px;font-size:14px;margin-bottom:5px;}\", \".user-messages-container .user-message-info .user-message-info_left p{margin:0;height:16px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-size:12px;}\", \".user-messages-container .user-message-info .user-message-info_left p>img{height:15px;}\", \".chat-room-wrapper{height:calc(100% - 41.5px);}\", \".chat-room-wrapper .users-messages-container{overflow-x:hidden;max-height:calc(100% - 60px);}\", \".chat-room-wrapper .main-room-list{overflow-x:hidden;max-height:100%;}\", \".chat-room-wrapper .main-room-list::-webkit-scrollbar,.chat-room-wrapper .users-messages-container::-webkit-scrollbar{width:0px;height:10px;}\", \".chat-room-wrapper .main-room-list::-webkit-scrollbar-thumb,.chat-room-wrapper .users-messages-container::-webkit-scrollbar-thumb{background:transparent;}\", \".chat-room-wrapper .main-room-list::-webkit-scrollbar-track,.chat-room-wrapper .users-messages-container::-webkit-scrollbar-track{background:transparent;}\", \".d-none_sm{display:none;}\", \".chat-users>h4 .lnr-arrow-left{font-size:26px;cursor:pointer;}\", `@media screen and (max-width:767px){.d-none_sm{display:block;}.chat-users{opacity:${this.props.mobileUsersListOpen ? 1 : 0};-webkit-transition:${!this.props.mobileUsersListOpen ? 'width' : ''} .2s;transition:${!this.props.mobileUsersListOpen ? 'width' : ''} .2s;overflow:hidden;width:${this.props.mobileUsersListOpen ? 100 : 0}%;}}`]));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  loggedUser: state.chat.loggedUser,\n  usersList: state.chat.myChatUsers,\n  activeUser: state.chat.activeUser,\n  mobileUsersListOpen: state.chat.mobileUsersListOpen\n});\n\nconst mapDispatchToProps = {\n  __SET_ACTIVE_USER,\n  __CHANGE_MOBILE_LIST_OPEN,\n  __SEND_MOBILE_MESSAGE_NOTIFY\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatUsers);","map":null,"metadata":{},"sourceType":"module"}