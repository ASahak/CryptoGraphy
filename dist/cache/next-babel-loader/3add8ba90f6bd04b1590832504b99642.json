{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport * as moment from 'moment';\nimport Icon from 'components/Icons/icon';\nimport debounce from \"lodash.debounce\";\nimport { __LOAD_MORE_MESSAGES } from 'store/actions';\nimport { Bus } from 'components/shared/helpers/Bus';\nimport { _EVERY_PAGE_LIMIT_MESSAGES } from 'components/shared/helpers/constants';\nimport { __getUserMessages } from 'store/reselect';\nimport { __detectCryptIcon } from 'components/shared/helpers/global-functions';\nimport { __EDIT_MESSAGE, __REMOVE_MESSAGE } from \"store/saga\";\n\nclass PrivateMessageContent extends React.PureComponent {\n  constructor(props) {\n    var _this$props$activeUse, _this$props$loggedUse;\n\n    super(props);\n    this.state = {\n      leftColor: this.props.activeUser && ((_this$props$activeUse = this.props.activeUser) === null || _this$props$activeUse === void 0 ? void 0 : _this$props$activeUse.color) || '#0C4651',\n      rightColor: this.props.activeUser && ((_this$props$loggedUse = this.props.loggedUser) === null || _this$props$loggedUse === void 0 ? void 0 : _this$props$loggedUse.color) || '#1BBC9B',\n      scrollLoadingAllow: true,\n      messagesSelector: [],\n      encryptIcon: true,\n      scrollPosition: null,\n      previousScrollHeight: 0,\n      previousScrollTop: 0,\n      loadingMessages: false,\n      isEditing: false,\n      isRemoving: false,\n      editingMsgIndex: null\n    };\n    this._messagesEnd = null;\n    this._handleDomClick = null;\n    this._handleClickRemove = null;\n    this.__scrollToBottom = this.__scrollToBottom.bind(this);\n    this.__handleScrollTop = this.__handleScrollTop.bind(this);\n    this.__showEncryptPopUp = this.__showEncryptPopUp.bind(this);\n    this.__doEncryptType = this.__doEncryptType.bind(this);\n    this.__hidePopUpEncrypt = this.__hidePopUpEncrypt.bind(this);\n    this.__editMessage = this.__editMessage.bind(this);\n    this.__removeMessageConfirm = this.__removeMessageConfirm.bind(this);\n    this.__removeMessage = this.__removeMessage.bind(this);\n    this.__clickRemovePopUp = this.__clickRemovePopUp.bind(this);\n    this._scrollContent = React.createRef();\n    Bus.subscribe('cancelEditing', () => {\n      this.setState({\n        isEditing: false\n      });\n    });\n    Bus.subscribe('endEditing', () => {\n      this.setState({\n        isEditing: false,\n        isRemoving: false,\n        editingMsgIndex: null\n      });\n    });\n  }\n\n  __scrollToBottom(behavior) {\n    setTimeout(() => {\n      var _this$_messagesEnd;\n\n      (_this$_messagesEnd = this._messagesEnd) === null || _this$_messagesEnd === void 0 ? void 0 : _this$_messagesEnd.scrollIntoView({\n        behavior: behavior ? 'smooth' : 'auto'\n      });\n    }, 0);\n  }\n\n  __handleScrollTop(e) {\n    if (this.state.scrollLoadingAllow && e.target.scrollTop < 50) {\n      var _this$_scrollContent, _this$_scrollContent2;\n\n      this.setState({\n        previousScrollTop: (_this$_scrollContent = this._scrollContent) === null || _this$_scrollContent === void 0 ? void 0 : _this$_scrollContent.scrollTop,\n        previousScrollHeight: (_this$_scrollContent2 = this._scrollContent) === null || _this$_scrollContent2 === void 0 ? void 0 : _this$_scrollContent2.scrollHeight,\n        scrollLoadingAllow: false,\n        loadingMessages: true\n      }, () => {\n        setTimeout(() => {\n          this.props.__LOAD_MORE_MESSAGES(1);\n        }, 1000);\n      });\n    } else {\n      this.setState({\n        scrollLoadingAllow: true\n      });\n    }\n  }\n\n  __showEncryptPopUp(evt, index, isKey) {\n    if (evt.target.closest('.remove-confirm-container')) return;\n\n    const _currentSrc = evt.target.closest('.separate-p');\n\n    if (document.body.querySelector('.opened-encryptPopUp') && document.body.querySelector('.opened-encryptPopUp') !== _currentSrc) {\n      document.body.querySelector('.opened-encryptPopUp').setAttribute('data-hint-encrypt', false);\n      document.body.querySelector('.opened-encryptPopUp').classList.remove('opened-encryptPopUp');\n    }\n\n    if (isKey) return;\n\n    if (_currentSrc) {\n      const dataIcon = _currentSrc.getAttribute('data-hint-encrypt');\n\n      this.state.messagesSelector = [...this.state.messagesSelector];\n      this.state.messagesSelector[index].isEncrypt = false;\n      this.setState({\n        encryptIcon: JSON.parse(dataIcon),\n        messagesSelector: this.state.messagesSelector\n      }, () => this.forceUpdate());\n\n      _currentSrc.classList.toggle('opened-encryptPopUp');\n    }\n\n    setTimeout(() => {\n      addEventListener('click', this._handleDomClick = this.__hidePopUpEncrypt.bind(this, index));\n    }, 0);\n  }\n\n  __hidePopUpEncrypt(index, e) {\n    this.state.messagesSelector = [...this.state.messagesSelector];\n    delete this.state.messagesSelector[index].isEncrypt;\n    this.setState({\n      messagesSelector: this.state.messagesSelector\n    }, () => this.forceUpdate());\n    removeEventListener('click', this._handleDomClick);\n\n    if (!e.target.closest('div[data-hint-encrypt]') && document.body.querySelector('.opened-encryptPopUp')) {\n      document.body.querySelector('.opened-encryptPopUp').setAttribute('data-hint-encrypt', false);\n      document.body.querySelector('.opened-encryptPopUp').classList.remove('opened-encryptPopUp');\n    }\n  }\n\n  __doEncryptType(e, index) {\n    const _currentSrc = e.target.closest('.separate-p');\n\n    e.stopPropagation();\n    this.setState({\n      encryptIcon: !this.state.encryptIcon\n    }, () => {\n      _currentSrc.setAttribute('data-hint-encrypt', this.state.encryptIcon);\n\n      const newEncryption = [...this.state.messagesSelector];\n      newEncryption[index].isEncrypt = this.state.encryptIcon;\n      this.setState({\n        messagesSelector: newEncryption\n      });\n    });\n  }\n\n  __editMessage(evt, msg, time) {\n    var _this$props$activeUse2, _this$props$loggedUse2;\n\n    const index = this.props.messages.findIndex(msg => msg.time === time);\n\n    __EDIT_MESSAGE(null, index, {\n      idUser: (_this$props$activeUse2 = this.props.activeUser) === null || _this$props$activeUse2 === void 0 ? void 0 : _this$props$activeUse2.id,\n      myId: (_this$props$loggedUse2 = this.props.loggedUser) === null || _this$props$loggedUse2 === void 0 ? void 0 : _this$props$loggedUse2.id\n    }).next();\n\n    evt.stopPropagation();\n    this.setState({\n      isEditing: true,\n      editingMsgIndex: index\n    }, () => {\n      Bus.dispatch('editMessage', {\n        msg,\n        index\n      });\n    });\n  }\n\n  __removeMessageConfirm(evt) {\n    var _evt$target$closest;\n\n    evt.stopPropagation();\n\n    const _currentSrc = evt.target.closest('.separate-p');\n\n    const alreadyDeclared = (_evt$target$closest = evt.target.closest('.messages-content')) === null || _evt$target$closest === void 0 ? void 0 : _evt$target$closest.querySelector('.opened-pop-confirm-remove');\n\n    if (alreadyDeclared) {\n      alreadyDeclared.classList.remove('opened-pop-confirm-remove');\n    }\n\n    _currentSrc.classList.add('opened-pop-confirm-remove');\n\n    setTimeout(() => {\n      addEventListener('click', this._handleClickRemove = this.__clickRemovePopUp.bind(this));\n    }, 0);\n  }\n\n  __removeMessage(time) {\n    var _this$props$activeUse3, _this$props$loggedUse3;\n\n    __REMOVE_MESSAGE(time, {\n      idUser: (_this$props$activeUse3 = this.props.activeUser) === null || _this$props$activeUse3 === void 0 ? void 0 : _this$props$activeUse3.id,\n      myId: (_this$props$loggedUse3 = this.props.loggedUser) === null || _this$props$loggedUse3 === void 0 ? void 0 : _this$props$loggedUse3.id\n    }).next();\n  }\n\n  __clickRemovePopUp(evt) {\n    var _evt$target$closest2;\n\n    const alreadyDeclared = (_evt$target$closest2 = evt.target.closest('.messages-content')) === null || _evt$target$closest2 === void 0 ? void 0 : _evt$target$closest2.querySelector('.opened-pop-confirm-remove');\n\n    if (alreadyDeclared && !evt.target.closest('.remove-confirm-container') || evt.target.closest('.trigger-close-dialog')) {\n      alreadyDeclared.classList.remove('opened-pop-confirm-remove');\n      removeEventListener('click', this._handleClickRemove);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    var _this$props$activeUse4, _prevProps$messages$t, _this$props$messages$, _this$props$activeUse5, _this$props$activeUse6, _this$props$activeUse7;\n\n    // if (prevProps.activeUser.isTyping !== this.props.activeUser.isTyping) { todo\n    //     this.props.activeUser.isTyping && this.__scrollToBottom('behavior');\n    // }\n    // Detect if there are removed message\n    if (((_this$props$activeUse4 = this.props.activeUser) === null || _this$props$activeUse4 === void 0 ? void 0 : _this$props$activeUse4.removedMessageIndex) >= 0 && (((_prevProps$messages$t = prevProps.messages[this.props.activeUser.removedMessageIndex]) === null || _prevProps$messages$t === void 0 ? void 0 : _prevProps$messages$t.removed) !== ((_this$props$messages$ = this.props.messages[this.props.activeUser.removedMessageIndex]) === null || _this$props$messages$ === void 0 ? void 0 : _this$props$messages$.removed) || !(() => {\n      var _this$state$messagesS;\n\n      const currentIndex = this.state.messagesSelector.length - (this.props.messages.length - this.props.activeUser.removedMessageIndex);\n      if (currentIndex < 0) return false;\n      return (_this$state$messagesS = this.state.messagesSelector[currentIndex]) === null || _this$state$messagesS === void 0 ? void 0 : _this$state$messagesS.removed;\n    })())) {\n      const currentIndex = this.state.messagesSelector.length - (this.props.messages.length - this.props.activeUser.removedMessageIndex);\n\n      if (currentIndex >= 0) {\n        const newEncryption = [...this.state.messagesSelector];\n\n        if (newEncryption[currentIndex]) {\n          newEncryption[currentIndex].removed = true;\n          this.setState({\n            messagesSelector: newEncryption\n          });\n        }\n      }\n    } // when editing have been finished\n\n\n    if (((_this$props$activeUse5 = this.props.activeUser) === null || _this$props$activeUse5 === void 0 ? void 0 : _this$props$activeUse5.editedMsgIndex) >= 0 && (this.props.messages[(_this$props$activeUse6 = this.props.activeUser) === null || _this$props$activeUse6 === void 0 ? void 0 : _this$props$activeUse6.editedMsgIndex].message !== prevProps.messages[(_this$props$activeUse7 = this.props.activeUser) === null || _this$props$activeUse7 === void 0 ? void 0 : _this$props$activeUse7.editedMsgIndex].message || (() => {\n      var _this$props$activeUse8, _this$props$activeUse9;\n\n      const currentIndex = this.state.messagesSelector.length - (this.props.messages.length - ((_this$props$activeUse8 = this.props.activeUser) === null || _this$props$activeUse8 === void 0 ? void 0 : _this$props$activeUse8.editedMsgIndex));\n      if (currentIndex < 0) return false;\n      return this.state.messagesSelector[currentIndex].message !== this.props.messages[(_this$props$activeUse9 = this.props.activeUser) === null || _this$props$activeUse9 === void 0 ? void 0 : _this$props$activeUse9.editedMsgIndex].message;\n    })())) {\n      var _this$props$activeUse10;\n\n      const currentIndex = this.state.messagesSelector.length - (this.props.messages.length - ((_this$props$activeUse10 = this.props.activeUser) === null || _this$props$activeUse10 === void 0 ? void 0 : _this$props$activeUse10.editedMsgIndex));\n\n      if (currentIndex >= 0) {\n        var _this$props$activeUse11;\n\n        const editedArray = [...this.state.messagesSelector];\n        editedArray[currentIndex] = this.props.messages[(_this$props$activeUse11 = this.props.activeUser) === null || _this$props$activeUse11 === void 0 ? void 0 : _this$props$activeUse11.editedMsgIndex];\n        this.setState({\n          isEditing: false,\n          isRemoving: false,\n          editingMsgIndex: null,\n          messagesSelector: editedArray\n        });\n      }\n    } // Sending notification when there was not any messages\n\n\n    if (this.props.messages.length === 1 && this.props.messages[0].message === '' || prevProps.messages.length === 1 && prevProps.messages[0].message === '') {\n      this.props.messagesHaveBeenDeleted();\n    } // Update message list\n\n\n    if (prevProps.messagesPage !== this.props.messagesPage || prevProps.messages.length !== this.props.messages.length) {\n      if ((this.props.messagesPage - 1) * _EVERY_PAGE_LIMIT_MESSAGES <= this.props.messages.length) {\n        this.setState({\n          scrollLoadingAllow: true,\n          loadingMessages: false,\n          messagesSelector: __getUserMessages({\n            data: this.props.messages,\n            page: this.props.messagesPage\n          })\n        }, () => {\n          if (prevProps.messages.length !== this.props.messages.length) {\n            this.__scrollToBottom('behavior');\n          } else {\n            this._scrollContent.scrollTo(0, this._scrollContent.scrollHeight - this.state.previousScrollHeight + this.state.previousScrollTop - 45);\n          }\n        });\n      } else {\n        this.props.__LOAD_MORE_MESSAGES(-1);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      messagesSelector: __getUserMessages({\n        data: this.props.messages,\n        page: this.props.messagesPage\n      })\n    }, () => {\n      this._scrollContent.onscroll = debounce(e => {\n        if (this.props.messages.length > _EVERY_PAGE_LIMIT_MESSAGES) {\n          this.__handleScrollTop(e);\n        }\n      }, 100);\n\n      this.__scrollToBottom();\n    });\n  }\n\n  componentWillUnmount() {\n    removeEventListener('click', this._handleClickRemove);\n    removeEventListener('click', this._handleDomClick);\n    Bus.unsubscribe('cancelEditing');\n    Bus.unsubscribe('endEditing');\n  }\n\n  get FN() {\n    return this.props.activeUser ? this.props.activeUser.fullName.split(' ')[0].slice(0, 1).toUpperCase() : '';\n  }\n\n  get LN() {\n    return this.props.activeUser ? this.props.activeUser.fullName.split(' ')[1].slice(0, 1) || ''.toUpperCase() : '';\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      ref: el => this._scrollContent = el,\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + `messages-content ${this.state.loadingMessages ? 'scroll-disable' : ''}`\n    }, this.state.loadingMessages && __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"sbl-circ\"\n    }), this.state.messagesSelector.map((message, index) => {\n      const _isOwner = message.owner === 'Me';\n\n      const _dataMSG = _isOwner ? this.props.loggedUser : this.props.activeUser;\n\n      if (!_dataMSG) return '';\n      return __jsx(\"div\", {\n        key: message.time + index,\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + ((_isOwner ? 'content-right_owner' : 'content-left_owner') || \"\")\n      }, __jsx(UI_ELEMENTS.UserImage, {\n        firstName: _dataMSG.fullName.split(' ')[0],\n        lastName: _dataMSG.fullName.split(' ')[1] || '',\n        fill: _dataMSG.color\n      }), message.removed ? __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"removed-message\"\n      }, \"Removed message\") : __jsx(\"div\", {\n        \"data-message-type\": message.encryptType,\n        \"data-message-key\": message.key,\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + `message-time ${__detectCryptIcon(message) ? 'crypt-message' : ''}`\n      }, __jsx(\"div\", {\n        onClick: e => this.__showEncryptPopUp(e, index, __detectCryptIcon(message)),\n        \"data-hint-encrypt\": false,\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"separate-p\"\n      }, _isOwner && !__detectCryptIcon(message) && !this.state.isEditing && !this.state.isRemoving && __jsx(\"span\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"edit-remove\"\n      }, __jsx(\"i\", {\n        onClick: e => this.__editMessage(e, message, message.time),\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"lnr lnr-pencil\"\n      }), __jsx(\"i\", {\n        onClick: e => this.__removeMessageConfirm(e),\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"lnr lnr-cross\"\n      }), __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"remove-confirm-container\"\n      }, \"Are you sure?\", __jsx(\"p\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]])\n      }, __jsx(\"a\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"trigger-close-dialog\"\n      }, \"No\"), __jsx(\"a\", {\n        onClick: () => this.__removeMessage(message.time),\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]])\n      }, \"Yes\")))), __jsx(\"span\", {\n        onClick: e => this.__doEncryptType(e, index),\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"encryptPopUp\"\n      }, this.state.encryptIcon ? __jsx(Icon, {\n        name: \"unlocked\"\n      }) : __jsx(Icon, {\n        name: \"locked\"\n      })), __detectCryptIcon(message) ? __jsx(\"img\", {\n        src: \"./assets/images/key.png\",\n        alt: \"iconSend\",\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]])\n      }) : __jsx(\"span\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]])\n      }, message.isEncrypt === false ? message.decryptedMsg : //there will be some case which is equal undefined\n      message.isEncrypt === true ? message.encryptedMsg : message.message, \" \"), \" \", message.edited && __jsx(\"span\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"edited-msg\"\n      }, \"(edited)\")), __jsx(\"span\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"time-wrap\"\n      }, moment(+message.time).format('lll')), _isOwner ? index === this.state.messagesSelector.length - 1 ? this.props.activeUser.isSeen ? __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"status-message\"\n      }, \"Seen\") : __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"status-message\"\n      }, \"Delivered\") : '' : ''));\n    }), __jsx(\"div\", {\n      ref: el => {\n        this._messagesEnd = el;\n      },\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]])\n    })), this.props.activeUser.isTyping && __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + \"is-typing-wrap\"\n    }, this.FN + this.LN + ' is typing ', __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + 'spinner'\n    }, __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + 'bounce1'\n    }), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + 'bounce2'\n    }), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"2020876622\", [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]]]) + \" \" + 'bounce3'\n    }))), __jsx(_JSXStyle, {\n      id: \"2020876622\",\n      dynamic: [this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.rightColor, this.state.leftColor, this.state.rightColor, this.state.leftColor]\n    }, [\".sbl-circ{height:35px;width:35px;color:#5a5a5a;position:relative;display:block;border:2px solid;border-radius:50%;border-top-color:transparent;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite;margin:5px auto;}\", \"@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}\", \"@keyframes rotate{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}\", \".messages-content{height:100%;overflow-x:hidden;position:relative;padding-top:10px;}\", \".scroll-disable{overflow:hidden;}\", \".messages-content::-webkit-scrollbar{width:0px;height:10px;}\", \".messages-content::-webkit-scrollbar-thumb{background:transparent;}\", \".messages-content::-webkit-scrollbar-track{background:transparent;}\", \".content-right_owner{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-flow:row-reverse;-ms-flex-flow:row-reverse;flex-flow:row-reverse;text-align:right;padding:0 10px;margin:7px;}\", \".content-left_owner{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:end;-ms-flex-pack:end;justify-content:end;text-align:left;padding:0 10px;margin:7px;}\", \".content-left_owner .message-time{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:5px 10px;max-width:50%;position:relative;}\", \".content-left_owner .removed-message,.content-right_owner .removed-message{padding:5px 10px;max-width:50%;position:relative;background-color:#d9d7d7;border-radius:6px;font-size:14px;height:27px;font-style:italic;color:#767575;margin-top:5px;margin-bottom:10px;}\", \".content-left_owner .removed-message{margin-left:10px;}\", \".content-right_owner .removed-message{margin-right:10px;}\", \".content-right_owner .message-time{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;padding:5px 10px;max-width:50%;position:relative;}\", \".content-left_owner .message-time>div.separate-p .edited-msg,.content-right_owner .message-time>div.separate-p .edited-msg{font-size:10px;font-family:sans-serif;font-style:italic;}\", \".content-left_owner .crypt-message>div.separate-p,.content-right_owner .crypt-message>div.separate-p{background-color:transparent !important;padding:0 !important;height:27px;}\", \".content-left_owner .crypt-message>div.separate-p img,.content-right_owner .crypt-message>div.separate-p img{width:30px;}\", \".content-left_owner .crypt-message>div.separate-p:before,.content-right_owner .crypt-message>div.separate-p:before{border-color:transparent !important;}\", \".message-time .status-message{font-size:12px;color:#424242;}\", \".message-time:hover>span{opacity:1 !important;visibility:visible !important;}\", \".content-right_owner .message-time>span,.content-left_owner .message-time>span{opacity:0;-webkit-transition:.4s;transition:.4s;font-size:9px;font-family:sans-serif;position:absolute;top:-13px;text-align:center;min-width:-webkit-fit-content;min-width:-moz-fit-content;min-width:fit-content;background-color:red;padding:3px 5px;color:#fff;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;white-space:nowrap;border-radius:4px;visibility:hidden;}\", \".content-right_owner .message-time>div.separate-p .edit-remove i{padding:2px 4px;position:relative;}\", `.content-right_owner .message-time>div.separate-p .edit-remove i.lnr-pencil:after{content:'';position:absolute;width:5px;height:5px;background:${this.state.rightColor};top:0;right:-5px;}`, `.content-right_owner .message-time>div.separate-p .edit-remove i.lnr-cross:after{content:'';position:absolute;width:5px;height:5px;background:${this.state.rightColor};bottom:0;right:-5px;}`, \".content-right_owner .message-time>div.separate-p .edit-remove .remove-confirm-container p{margin:4px 0 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}\", `.content-right_owner .message-time>div.separate-p .edit-remove .remove-confirm-container p>a:first-child{height:19px;display:inline-block;border:1px solid #ccc;width:25px;border-radius:2px;text-align:center;font-size:12px;vertical-align:middle;margin-right:7px;background-color:${this.state.rightColor};color:#fff;cursor:pointer;}`, \".opened-pop-confirm-remove .edit-remove{opacity:1 !important;visibility:visible !important;left:-18px !important;}\", \".content-right_owner .message-time>div.separate-p .edit-remove .remove-confirm-container p>a:last-child{height:19px;display:inline-block;border:1px solid #ccc;width:25px;border-radius:2px;text-align:center;font-size:12px;vertical-align:middle;background-color:#c5cbca;color:#fff;cursor:pointer;}\", \".content-right_owner .message-time>div.separate-p .edit-remove .remove-confirm-container{position:absolute;width:120px;right:24px;padding:6px;color:#000;font-size:13px;border:1px solid #ccc;border-radius:3px;top:14px;bottom:0;margin:auto;height:55px;opacity:0;z-index:22;background:#fff;-webkit-transition:.4s;transition:.4s;visibility:hidden;cursor:default;}\", \".content-right_owner .message-time>div.separate-p .edit-remove .remove-confirm-container:after{content:'';width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:4px solid #dcdcdc;position:absolute;right:-4px;-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);top:21px;}\", \".content-right_owner .message-time>div.separate-p .edit-remove .remove-confirm-container:before{content:'';width:0;height:0;border-top:3px solid transparent;border-bottom:3px solid transparent;border-left:3px solid #fff;position:absolute;right:-3px;-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);top:22px;z-index:22;}\", \".opened-pop-confirm-remove .remove-confirm-container{opacity:1 !important;visibility:visible !important;}\", \".opened-pop-confirm-remove+.time-wrap{display:none;}\", `.content-right_owner .message-time>div.separate-p .edit-remove{position:absolute;left:-15px;background:${this.state.rightColor};display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;top:0;width:18px;font-size:9px;height:27px;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;border-right:1px solid;opacity:0;-webkit-transition:.2s;transition:.2s;visibility:hidden;}`, \".content-right_owner .message-time>div.separate-p:hover .edit-remove{opacity:1;visibility:visible;left:-18px;}\", \".content-right_owner .message-time>div.separate-p .edit-remove:after{content:'';position:absolute;top:0;bottom:0;left:0;right:0;height:0.8px;width:18px;margin:auto;background:#fff;}\", \".content-right_owner .message-time>div.separate-p .edit-remove:before{content:'';position:absolute;top:0;bottom:0;right:-1px;height:27px;width:0.8px;margin:auto;background:#fff;z-index:2;}\", \".opened-encryptPopUp .edit-remove{display:none !important;}\", \".content-right_owner .message-time>div.separate-p .encryptPopUp,.content-left_owner .message-time>div.separate-p .encryptPopUp{position:absolute;height:25px;display:none;width:25px;padding:2px;bottom:0;top:0;margin:auto;cursor:pointer;border-radius:5px;}\", \".content-right_owner .message-time>div.separate-p .encryptPopUp{left:-30px;}\", \".content-left_owner .message-time>div.separate-p .encryptPopUp{right:-30px;}\", \".opened-encryptPopUp{background-color:#e7e7e7 !important;color:#000 !important;}\", \".opened-encryptPopUp:before{border-left-color:#e7e7e7 !important;}\", \".opened-encryptPopUp .encryptPopUp{display:block !important;}\", \".content-right_owner .message-time>div.separate-p,.content-left_owner .message-time>div.separate-p{cursor:pointer;text-align:left;margin:0 0 5px 0;display:inline-block;padding:5px 10px;color:#fff;font-size:13px;border-radius:5px;position:relative;min-height:27px;word-break:break-all;}\", `.content-right_owner .message-time>div.separate-p,.content-right_owner .message-time>span{background-color:${this.state.rightColor};}`, `.content-left_owner .message-time>div.separate-p,.content-left_owner .message-time>span{background-color:${this.state.leftColor};}`, `.content-right_owner .message-time>div.separate-p:before{content:'';width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:4px solid ${this.state.rightColor};position:absolute;right:-3px;-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);top:7px;}`, `.content-left_owner .message-time>div.separate-p:before{content:'';width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:4px solid ${this.state.leftColor};position:absolute;left:-3px;-webkit-transform:rotate(-180deg);-ms-transform:rotate(-180deg);transform:rotate(-180deg);top:7px;}`, \".is-typing-wrap{margin-left:20px;margin-bottom:7px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:13px;}\", \".is-typing-wrap .spinner{margin-top:5px;margin-left:10px;}\"]));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  loggedUser: state.chat.loggedUser,\n  activeUser: state.chat.activeUser,\n  messages: state.chat.activeUserMessages,\n  messagesPage: state.chat.messagesPage\n});\n\nconst mapDispatchToProps = {\n  __LOAD_MORE_MESSAGES\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateMessageContent);","map":null,"metadata":{},"sourceType":"module"}