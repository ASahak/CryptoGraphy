{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { classDebounce } from 'hooks/use-debounce';\nimport { __CHANGE_IS_SEEN } from \"../../store/saga\";\nimport { Bus } from \"components/shared/helpers/Bus\";\n\nconst SendIcon = props => {\n  return __jsx(React.Fragment, null, props.inProcessing ? __jsx(\"div\", {\n    className: \"jsx-148590241\" + \" \" + \"sbl-circ\"\n  }) : props.value ? __jsx(\"img\", {\n    src: \"./assets/images/send.png\",\n    onClick: () => props.sendMessage('message'),\n    className: \"jsx-148590241\"\n  }) : __jsx(\"img\", {\n    src: \"./assets/images/key.png\",\n    onClick: () => props.sendMessage('key'),\n    className: \"jsx-148590241\"\n  }), __jsx(_JSXStyle, {\n    id: \"148590241\"\n  }, [\".sbl-circ.jsx-148590241{height:22px;width:22px;color:#5a5a5a;position:relative;display:block;border:2px solid;border-radius:50%;border-top-color:transparent;-webkit-animation:rotate-jsx-148590241 1s linear infinite;animation:rotate-jsx-148590241 1s linear infinite;margin:5px 10px 5px 5px;}\", \"@-webkit-keyframes rotate-jsx-148590241{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}\", \"@keyframes rotate-jsx-148590241{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}\"]));\n};\n\nclass TextAreaMessage extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"__debounceTyping\", classDebounce(this.__isTyping, 600));\n\n    this.messageArea = React.createRef();\n    this.state = {\n      messageValue: '',\n      inProcessing: false,\n      editMessage: {\n        index: null,\n        msg: ''\n      }\n    };\n    this.__debounceTyping = this.__debounceTyping.bind(this);\n    this.__setMessageValue = this.__setMessageValue.bind(this);\n    this.__autoSize = this.__autoSize.bind(this);\n    this.__submitMessage = this.__submitMessage.bind(this);\n    this.__userIsOnline = this.__userIsOnline.bind(this);\n    this.__userIsOffline = this.__userIsOffline.bind(this);\n    Bus.subscribe('editMessage', ({\n      msg,\n      index\n    }) => {\n      this.setState({\n        editMessage: {\n          mainObj: msg,\n          msg: msg === null || msg === void 0 ? void 0 : msg.message,\n          index: index\n        }\n      }, () => {\n        var _this$messageArea$cur;\n\n        return (_this$messageArea$cur = this.messageArea.current) === null || _this$messageArea$cur === void 0 ? void 0 : _this$messageArea$cur.focus();\n      });\n    });\n    Bus.subscribe('messageSendingFinish', () => {\n      this.setState({\n        inProcessing: false\n      });\n    });\n    addEventListener('blur', () => {\n      if (this.state.editMessage.hasOwnProperty('mainObj') && !this.state.editMessage.msg) {\n        this.props.isTyping(false);\n      }\n    });\n  }\n\n  __autoSize() {\n    this.messageArea.current.style.height = 'auto';\n    this.messageArea.current.style.height = this.messageArea.current.scrollHeight + 'px';\n  }\n\n  __userIsOffline() {\n    if (this.state.editMessage.hasOwnProperty('mainObj') && !this.state.editMessage.msg) {\n      Bus.dispatch('cancelEditing');\n      this.setState({\n        editMessage: {}\n      });\n    }\n  }\n\n  __userIsOnline() {\n    var _this$props$activeUse, _this$props$activeUse2;\n\n    if (((_this$props$activeUse = this.props.activeUser) === null || _this$props$activeUse === void 0 ? void 0 : _this$props$activeUse.id) && this.props.loggedUserId && !((_this$props$activeUse2 = this.props.activeUser) === null || _this$props$activeUse2 === void 0 ? void 0 : _this$props$activeUse2.isSender)) {\n      var _this$props$activeUse3;\n\n      __CHANGE_IS_SEEN({\n        senderID: (_this$props$activeUse3 = this.props.activeUser) === null || _this$props$activeUse3 === void 0 ? void 0 : _this$props$activeUse3.id,\n        myID: this.props.loggedUserId\n      }).next();\n    }\n  }\n\n  __isTyping() {\n    if (this.state.messageValue !== '' && !this.state.editMessage.msg) {\n      this.props.isTyping(true);\n    }\n  }\n\n  __submitMessage(evt) {\n    if (evt.key === 'Enter' && evt.shiftKey) {\n      return;\n    }\n\n    if (evt === 'key') {\n      this.props.sendMessage('key', true);\n      this.setState({\n        inProcessing: true\n      });\n    } else if (evt === 'message' || evt.key === 'Enter') {\n      this.setState({\n        inProcessing: true\n      });\n\n      if (this.state.editMessage.msg) {\n        this.props.sendMessage(this.state.editMessage.msg, this.state.editMessage);\n      } else if (this.state.messageValue !== '') {\n        this.props.sendMessage(this.state.messageValue);\n      }\n\n      this.messageArea.current.blur();\n      this.setState({\n        editMessage: {},\n        messageValue: ''\n      }, () => {\n        this.messageArea.current.style.height = 'auto';\n      });\n      evt.key && evt.preventDefault();\n    }\n  }\n\n  __setMessageValue(evt) {\n    this.setState(_objectSpread({}, this.state.editMessage.msg && {\n      editMessage: _objectSpread({}, this.state.editMessage, {\n        msg: evt.target.value\n      })\n    }, {\n      messageValue: evt.target.value\n    }), () => {\n      if (this.state.messageValue === '' && !this.state.editMessage.msg) {\n        this.props.isTyping(false);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Bus.unsubscribe('editMessage');\n    Bus.unsubscribe('messageSendingFinish');\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"jsx-1746285459\" + \" \" + \"message-send-container\"\n    }, __jsx(\"textarea\", {\n      ref: this.messageArea,\n      value: this.state.editMessage.msg || this.state.messageValue,\n      rows: this.state.rowLineCount,\n      onFocus: this.__userIsOnline,\n      onBlur: this.__userIsOffline,\n      onInput: this.__autoSize,\n      onChange: evt => {\n        this.__setMessageValue(evt);\n\n        this.__debounceTyping();\n      },\n      placeholder: \"Type message...\",\n      onKeyDown: this.__submitMessage,\n      className: \"jsx-1746285459\"\n    }), __jsx(SendIcon, {\n      inProcessing: this.state.inProcessing,\n      sendMessage: this.__submitMessage,\n      value: this.state.messageValue\n    })), __jsx(_JSXStyle, {\n      id: \"1746285459\"\n    }, [\".message-send-container{padding-left:3px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;border-top:1px solid rgb(227,222,222);-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\", \".message-send-container img{width:25px;height:25px;margin-right:7px;cursor:pointer;}\", \".message-send-container textarea{resize:none;max-height:70px;width:calc(100% - 30px);border:none;outline:none;}\", \".message-send-container textarea::-webkit-scrollbar{width:0px;height:10px;}\", \".message-send-container textarea::-webkit-scrollbar-thumb{background:transparent;}\", \".message-send-container textarea::-webkit-scrollbar-track{background:transparent;}\"]));\n  }\n\n}\n\nexport default TextAreaMessage;","map":null,"metadata":{},"sourceType":"module"}