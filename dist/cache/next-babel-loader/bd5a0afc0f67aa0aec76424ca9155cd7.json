{"ast":null,"code":"export default function ROT13(string) {\n  var messageArray = string.split('');\n  var messageInNumbers = messageArray.map(function (_char) {\n    if (!_char) {\n      return _char;\n    } else return _char.charCodeAt(0);\n  });\n  var messageNumbersShifted = messageInNumbers.map(function (charCode) {\n    var translatedCharCode; //caps\n\n    if (charCode >= 65 && charCode <= 90) {\n      if (charCode > 'M'.charCodeAt(0)) {\n        translatedCharCode = charCode - 13;\n      } else {\n        translatedCharCode = charCode + 13;\n      }\n\n      return String.fromCharCode(translatedCharCode);\n    } //lower case\n    else if (charCode >= 97 && charCode <= 122) {\n        if (charCode > 'm'.charCodeAt(0)) {\n          translatedCharCode = charCode - 13;\n        } else {\n          translatedCharCode = charCode + 13;\n        }\n\n        return String.fromCharCode(translatedCharCode);\n      } //characters that are left alone\n      else {\n          return String.fromCharCode(charCode);\n        }\n  });\n  return messageNumbersShifted.join('');\n}","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/ROT13.js"],"names":["ROT13","string","messageArray","split","messageInNumbers","map","char","charCodeAt","messageNumbersShifted","charCode","translatedCharCode","String","fromCharCode","join"],"mappings":"AAAA,eAAe,SAASA,KAAT,CAAgBC,MAAhB,EAAwB;AACnC,MAAIC,YAAY,GAAGD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAnB;AACA,MAAIC,gBAAgB,GAAGF,YAAY,CAACG,GAAb,CAAiB,UAASC,KAAT,EAAe;AACnD,QAAI,CAACA,KAAL,EAAW;AACP,aAAOA,KAAP;AACH,KAFD,MAEO,OAAOA,KAAI,CAACC,UAAL,CAAgB,CAAhB,CAAP;AACV,GAJsB,CAAvB;AAMA,MAAMC,qBAAqB,GAAGJ,gBAAgB,CAACC,GAAjB,CAAqB,UAASI,QAAT,EAAmB;AAClE,QAAIC,kBAAJ,CADkE,CAElE;;AACA,QAAID,QAAQ,IAAI,EAAZ,IAAkBA,QAAQ,IAAI,EAAlC,EAAsC;AAClC,UAAIA,QAAQ,GAAG,IAAIF,UAAJ,CAAe,CAAf,CAAf,EAAkC;AAC9BG,QAAAA,kBAAkB,GAAGD,QAAQ,GAAG,EAAhC;AACH,OAFD,MAEO;AACHC,QAAAA,kBAAkB,GAAGD,QAAQ,GAAG,EAAhC;AACH;;AAED,aAAOE,MAAM,CAACC,YAAP,CAAoBF,kBAApB,CAAP;AAEH,KATD,CAUA;AAVA,SAWK,IAAID,QAAQ,IAAI,EAAZ,IAAkBA,QAAQ,IAAI,GAAlC,EAAuC;AACxC,YAAIA,QAAQ,GAAG,IAAIF,UAAJ,CAAe,CAAf,CAAf,EAAkC;AAC9BG,UAAAA,kBAAkB,GAAGD,QAAQ,GAAG,EAAhC;AACH,SAFD,MAEO;AACHC,UAAAA,kBAAkB,GAAGD,QAAQ,GAAG,EAAhC;AACH;;AACD,eAAOE,MAAM,CAACC,YAAP,CAAoBF,kBAApB,CAAP;AACH,OAPI,CAQL;AARK,WASA;AACD,iBAAOC,MAAM,CAACC,YAAP,CAAoBH,QAApB,CAAP;AACH;AACJ,GA1B6B,CAA9B;AA4BA,SAAOD,qBAAqB,CAACK,IAAtB,CAA2B,EAA3B,CAAP;AAEH","sourcesContent":["export default function ROT13 (string) {\r\n    let messageArray = string.split('');\r\n    let messageInNumbers = messageArray.map(function(char) {\r\n        if (!char) {\r\n            return char;\r\n        } else return char.charCodeAt(0);\r\n    });\r\n\r\n    const messageNumbersShifted = messageInNumbers.map(function(charCode) {\r\n        let translatedCharCode;\r\n        //caps\r\n        if (charCode >= 65 && charCode <= 90) {\r\n            if (charCode > 'M'.charCodeAt(0)) {\r\n                translatedCharCode = charCode - 13;\r\n            } else {\r\n                translatedCharCode = charCode + 13;\r\n            }\r\n\r\n            return String.fromCharCode(translatedCharCode);\r\n\r\n        }\r\n        //lower case\r\n        else if (charCode >= 97 && charCode <= 122) {\r\n            if (charCode > 'm'.charCodeAt(0)) {\r\n                translatedCharCode = charCode - 13;\r\n            } else {\r\n                translatedCharCode = charCode + 13;\r\n            }\r\n            return String.fromCharCode(translatedCharCode);\r\n        }\r\n        //characters that are left alone\r\n        else {\r\n            return String.fromCharCode(charCode);\r\n        }\r\n    });\r\n\r\n    return messageNumbersShifted.join('');\r\n\r\n}"]},"metadata":{},"sourceType":"module"}