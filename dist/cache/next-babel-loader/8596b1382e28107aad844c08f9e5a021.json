{"ast":null,"code":"const bigInt = require('big-integer');\n\nexport default class RSA {\n  static randomPrime(bits) {\n    const min = bigInt.one.shiftLeft(bits - 1);\n    const max = bigInt.one.shiftLeft(bits).prev();\n\n    while (true) {\n      let p = bigInt.randBetween(min, max);\n\n      if (p.isProbablePrime(256)) {\n        return p;\n      }\n    }\n  }\n\n  static generate(keysize) {\n    const e = bigInt(65537);\n    let p;\n    let q;\n    let totient;\n\n    do {\n      p = this.randomPrime(keysize / 2);\n      q = this.randomPrime(keysize / 2);\n      totient = bigInt.lcm(p.prev(), q.prev());\n    } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\n\n    return {\n      e,\n      n: p.multiply(q),\n      d: e.modInv(totient)\n    };\n  }\n\n  static encrypt(encodedMsg, n, e) {\n    return bigInt(encodedMsg).modPow(e, n);\n  }\n\n  static decrypt(encryptedMsg, d, n) {\n    return bigInt(encryptedMsg).modPow(d, n);\n  }\n\n  static encode(str) {\n    const codes = str.split('').map(i => i.charCodeAt()).join('');\n    return bigInt(codes);\n  }\n\n  static decode(code) {\n    const stringified = code.toString();\n    let string = '';\n\n    for (let i = 0; i < stringified.length; i += 2) {\n      let num = Number(stringified.substr(i, 2));\n\n      if (num <= 30) {\n        string += String.fromCharCode(Number(stringified.substr(i, 3)));\n        i++;\n      } else {\n        string += String.fromCharCode(num);\n      }\n    }\n\n    return string;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}