{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar Vigenere = /*#__PURE__*/function () {\n  function Vigenere() {\n    _classCallCheck(this, Vigenere);\n  }\n\n  _createClass(Vigenere, null, [{\n    key: \"doCryptVigenere\",\n    value: function doCryptVigenere(isDecrypt, value, key, callback) {\n      if (key.length === 0) {\n        callback(\"Key is empty\");\n        return;\n      }\n\n      var keyDouble = this.filterKey(key);\n\n      if (keyDouble.length === 0) {\n        callback(\"Key has no letters\");\n        return;\n      }\n\n      if (isDecrypt) {\n        for (var i = 0; i < keyDouble.length; i++) {\n          keyDouble[i] = (26 - keyDouble[i]) % 26;\n        }\n      }\n\n      return this.crypt(value, keyDouble);\n    }\n    /*\r\n     * Returns the result the Vigenere encryption on the given text with the given key.\r\n     */\n\n  }, {\n    key: \"crypt\",\n    value: function crypt(input, key) {\n      var output = \"\";\n\n      for (var i = 0, j = 0; i < input.length; i++) {\n        var c = input.charCodeAt(i);\n\n        if (this.isUppercase(c)) {\n          output += String.fromCharCode((c - 65 + key[j % key.length]) % 26 + 65);\n          j++;\n        } else if (this.isLowercase(c)) {\n          output += String.fromCharCode((c - 97 + key[j % key.length]) % 26 + 97);\n          j++;\n        } else {\n          output += input.charAt(i);\n        }\n      }\n\n      return output;\n    }\n    /*\r\n     * Returns an array of numbers, each in the range [0, 26), representing the given key.\r\n     * The key is case-insensitive, and non-letters are ignored.\r\n     * Examples:\r\n     * - filterKey(\"AAA\") = [0, 0, 0].\r\n     * - filterKey(\"abc\") = [0, 1, 2].\r\n     * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\r\n     */\n\n  }, {\n    key: \"filterKey\",\n    value: function filterKey(key) {\n      var result = [];\n\n      for (var i = 0; i < key.length; i++) {\n        var c = key.charCodeAt(i);\n        if (this.isLetter(c)) result.push((c - 65) % 32);\n      }\n\n      return result;\n    } // Tests whether the specified character code is a letter.\n\n  }, {\n    key: \"isLetter\",\n    value: function isLetter(c) {\n      return this.isUppercase(c) || this.isLowercase(c);\n    } // Tests whether the specified character code is an uppercase letter.\n\n  }, {\n    key: \"isUppercase\",\n    value: function isUppercase(c) {\n      return 65 <= c && c <= 90; // 65 is character code for 'A'. 90 is 'Z'.\n    } // Tests whether the specified character code is a lowercase letter.\n\n  }, {\n    key: \"isLowercase\",\n    value: function isLowercase(c) {\n      return 97 <= c && c <= 122; // 97 is character code for 'a'. 122 is 'z'.\n    }\n  }]);\n\n  return Vigenere;\n}();\n\nexport { Vigenere as default };","map":null,"metadata":{},"sourceType":"module"}