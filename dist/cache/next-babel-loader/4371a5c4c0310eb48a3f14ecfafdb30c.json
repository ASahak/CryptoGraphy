{"ast":null,"code":"const bigInt = require('big-integer');\n\nexport default class RSA {\n  static randomPrime(bits) {\n    const min = bigInt.one.shiftLeft(bits - 1);\n    const max = bigInt.one.shiftLeft(bits).prev();\n\n    while (true) {\n      let p = bigInt.randBetween(min, max);\n\n      if (p.isProbablePrime(256)) {\n        return p;\n      }\n    }\n  }\n\n  static generate(keysize) {\n    const e = bigInt(65537);\n    let p;\n    let q;\n    let totient;\n\n    do {\n      p = this.randomPrime(keysize / 2);\n      q = this.randomPrime(keysize / 2);\n      totient = bigInt.lcm(p.prev(), q.prev());\n    } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\n\n    return {\n      e,\n      n: p.multiply(q),\n      d: e.modInv(totient)\n    };\n  }\n\n  static encrypt(encodedMsg, n, e) {\n    return bigInt(encodedMsg).modPow(e, n);\n  }\n\n  static decrypt(encryptedMsg, d, n) {\n    return bigInt(encryptedMsg).modPow(d, n);\n  }\n\n  static encode(str) {\n    const codes = str.split('').map(i => i.charCodeAt()).join('');\n    return bigInt(codes);\n  }\n\n  static decode(code) {\n    const stringified = code.toString();\n    let string = '';\n\n    for (let i = 0; i < stringified.length; i += 2) {\n      let num = Number(stringified.substr(i, 2));\n\n      if (num <= 30) {\n        string += String.fromCharCode(Number(stringified.substr(i, 3)));\n        i++;\n      } else {\n        string += String.fromCharCode(num);\n      }\n    }\n\n    return string;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ruala/Desktop/ASahak/daser/next/CryptoGraphy/libraries/RSA.js"],"names":["bigInt","require","RSA","randomPrime","bits","min","one","shiftLeft","max","prev","p","randBetween","isProbablePrime","generate","keysize","e","q","totient","lcm","gcd","notEquals","minus","abs","shiftRight","isZero","n","multiply","d","modInv","encrypt","encodedMsg","modPow","decrypt","encryptedMsg","encode","str","codes","split","map","i","charCodeAt","join","decode","code","stringified","toString","string","length","num","Number","substr","String","fromCharCode"],"mappings":"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","sourcesContent":["const bigInt = require('big-integer');\r\n\r\nexport default class RSA {\r\n\r\n    static randomPrime(bits) {\r\n        const min = bigInt.one.shiftLeft(bits - 1);\r\n        const max = bigInt.one.shiftLeft(bits).prev();\r\n\r\n        while (true) {\r\n            let p = bigInt.randBetween(min, max);\r\n            if (p.isProbablePrime(256)) {\r\n                return p;\r\n            }\r\n        }\r\n    }\r\n\r\n    static generate(keysize) {\r\n        const e = bigInt(65537);\r\n        let p;\r\n        let q;\r\n        let totient;\r\n\r\n        do {\r\n            p = this.randomPrime(keysize / 2);\r\n            q = this.randomPrime(keysize / 2);\r\n            totient = bigInt.lcm(\r\n                p.prev(),\r\n                q.prev()\r\n            );\r\n        } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\r\n\r\n        return {\r\n            e,\r\n            n: p.multiply(q),\r\n            d: e.modInv(totient),\r\n        };\r\n    }\r\n\r\n    static encrypt(encodedMsg, n, e) {\r\n        return bigInt(encodedMsg).modPow(e, n);\r\n    }\r\n\r\n    static decrypt(encryptedMsg, d, n) {\r\n        return bigInt(encryptedMsg).modPow(d, n);\r\n    }\r\n\r\n    static encode(str) {\r\n        const codes = str\r\n            .split('')\r\n            .map(i => i.charCodeAt())\r\n            .join('');\r\n\r\n        return bigInt(codes);\r\n    }\r\n\r\n    static decode(code) {\r\n        const stringified = code.toString();\r\n        let string = '';\r\n\r\n        for (let i = 0; i < stringified.length; i += 2) {\r\n            let num = Number(stringified.substr(i, 2));\r\n\r\n            if (num <= 30) {\r\n                string += String.fromCharCode(Number(stringified.substr(i, 3)));\r\n                i++;\r\n            } else {\r\n                string += String.fromCharCode(num);\r\n            }\r\n        }\r\n\r\n        return string;\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}